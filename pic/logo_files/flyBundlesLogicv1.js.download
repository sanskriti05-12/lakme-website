let DEFAULT_addToCartBtnSelectorsApp9Ext =
  'input[name="add"], button[name="add"], form[action*="/cart/add"] .gfb__add-to-cart,form[action*="/cart/add"] button[type="submit"], form[action*="/cart/add"] input[type="submit"], [data-text="Add to cart"]';
let DEFAULT_checkoutBtnSelectorsApp9Ext =
  'button[name="checkout"], input[name="checkout"], form[action*="/cart"] a[href="/checkout"], a[href="/checkout"], form[action="/cart"] input[type="submit"][name="checkout"], form[action="/cart"] button[type="submit"][name="checkout"]';
let DEFAULT_quantityBtnSelectorsApp9Ext =
  ".ajaxcart__qty,quantity-input .quantity,.quantity-input,.quantity__input,.quantity_input,.product-form__input, .product-form__quantity,.quantity,.quantity__container,.quantity_container";
let DEFAULT_sideCartSelectorsApp9Ext = ".cart-notification,cart-notification,.cart-notification-wrapper,#cart-notification, #CartDrawer, .drawer, .drawer-cover, .Drawer";
let DEFAULT_buyNowBtnApp9Ext = ".shopify-payment-button__button, .shopify-payment-button__button--unbranded";
let DEFAULT_cartFormApp9Ext = 'form[action="/cart"], form[action="/cart/"], form[action="cart"]';
//for cart integration
let DEFAULT_cartItemSelectorApp9Ext = ".cart-item";
let DEFAULT_cartItemRemoveParentSelectorApp9Ext = "cart-remove-button";
let DEFAULT_cartItemRemoveSelectorApp9Ext = "";
let DEFAULT_cartItemQuantityBtnSelectorsApp9Ext = "";
let CONSTANT_ARROW_SVG_App9Ext =
  '<svg width="32" height="32" viewBox="0 0 32 32" fill="none" xmlns="http://www.w3.org/2000/svg">' +
  '<path d="M22.6666 18.6667L15.9999 12L9.33325 18.6667" stroke="#3C3C3C" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>' +
  "</svg>";

let CONSTANT_LOADING_SPINNER_SVG_APP9 = `<div class="gfbLoadingSpinner" style="width:15px;z-index:100"><svg aria-hidden="true" focusable="false" class="spinner" viewBox="0 0 66 66" xmlns="http://www.w3.org/2000/svg">
<circle class="path" fill="none" stroke-width="6" cx="33" cy="33" r="30"></circle>
</svg></div>`;
let SLIDER_ARROW_SVG_APP9 = `<svg width="20" height="20" viewBox="0 0 20 20" fill="#000000" xmlns="http://www.w3.org/2000/svg">
            <path d="M7.5751 10.6338C7.66423 10.4337 7.71029 10.2171 7.71029 9.99803C7.71029 9.77898 7.66423 9.56238 7.5751 9.36228L4.79758 3.12659C4.03356 1.63414 5.61587 0.775821 6.5827 1.5267C8.37685 2.92008 12.9226 7.11354 14.9809 9.02707C15.1144 9.15114 15.2208 9.30139 15.2937 9.46845C15.3665 9.63552 15.404 9.8158 15.404 9.99803C15.404 10.1803 15.3665 10.3606 15.2937 10.5276C15.2208 10.6947 15.1144 10.8449 14.9809 10.969C12.9226 12.8825 8.37685 17.076 6.5827 18.4694C5.59192 19.2388 4.04781 18.3341 4.79758 16.8695L7.5751 10.6338Z"></path>
          </svg>`;
let PLUS_SVG_ICON_APP9 = `<svg fill="#000000" version="1.1" id="Capa_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 45.402 45.402" xml:space="preserve"><g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier"> <g> <path d="M41.267,18.557H26.832V4.134C26.832,1.851,24.99,0,22.707,0c-2.283,0-4.124,1.851-4.124,4.135v14.432H4.141 c-2.283,0-4.139,1.851-4.138,4.135c-0.001,1.141,0.46,2.187,1.207,2.934c0.748,0.749,1.78,1.222,2.92,1.222h14.453V41.27 c0,1.142,0.453,2.176,1.201,2.922c0.748,0.748,1.777,1.211,2.919,1.211c2.282,0,4.129-1.851,4.129-4.133V26.857h14.435 c2.283,0,4.134-1.867,4.133-4.15C45.399,20.425,43.548,18.557,41.267,18.557z"></path> </g> </g></svg>`;
let DOWN_ARROW_ICON_APP9 = `<svg width="20" height="20" viewBox="0 0 20 20" fill="#303030" xmlns="http://www.w3.org/2000/svg">
    <path fill-rule="evenodd" clip-rule="evenodd" d="M5.71967 8.46967C6.01256 8.17678 6.48744 8.17678 6.78033 8.46967L10.25 11.9393L13.7197 8.46967C14.0126 8.17678 14.4874 8.17678 14.7803 8.46967C15.0732 8.76256 15.0732 9.23744 14.7803 9.53033L10.7803 13.5303C10.4874 13.8232 10.0126 13.8232 9.71967 13.5303L5.71967 9.53033C5.42678 9.23744 5.42678 8.76256 5.71967 8.46967Z"></path>
  </svg>`;
let CONSTANT_bundleCartRrepresentationObj = {
  type: "OVERWRITE_LINE_ITEM",
  overwriteLineItemObj: {
    renderItemsNameVirtually: false,
    renderItemsNameAsProperty: true
    }
  }

let CONSTANT_testSettings = [
  {
      "productId": "10830819852606",
      "graphqlId": "gid://shopify/Product/10830819852606",
      "quantity": 1,
      "id": "gid://shopify/Product/10830819852606",
      "handle": "test-2",
      "variants": [
          {
              "id": "gid://shopify/ProductVariant/48828947628350",
              "variantId": "48828947628350",
              "variantGraphqlId": "gid://shopify/ProductVariant/48828947628350",
              "compareAtPrice": null,
              "image": "https://cdn.shopify.com/s/files/1/0774/9219/1550/products/red.jpg?v=1708882150",
              "isSelected": true,
              "isPreviewOptionsSelected": true,
              "selectedOptions": [
                  "S",
                  "red"
              ],
              "price": "200.00",
              "totalVariantPrice": "200.00"
          },
          {
              "id": "gid://shopify/ProductVariant/48828947661118",
              "variantId": "48828947661118",
              "variantGraphqlId": "gid://shopify/ProductVariant/48828947661118",
              "compareAtPrice": null,
              "image": "https://cdn.shopify.com/s/files/1/0774/9219/1550/products/white.jpg?v=1708882150",
              "isSelected": true,
              "isPreviewOptionsSelected": false,
              "selectedOptions": [
                  "S",
                  "white"
              ],
              "price": "200.00",
              "totalVariantPrice": "200.00"
          },
          {
              "id": "gid://shopify/ProductVariant/48828947693886",
              "variantId": "48828947693886",
              "variantGraphqlId": "gid://shopify/ProductVariant/48828947693886",
              "compareAtPrice": null,
              "image": "https://cdn.shopify.com/s/files/1/0774/9219/1550/products/download_3.png?v=1708882150",
              "isSelected": true,
              "isPreviewOptionsSelected": false,
              "selectedOptions": [
                  "S",
                  "black"
              ],
              "price": "200.00",
              "totalVariantPrice": "200.00"
          },
          {
              "id": "gid://shopify/ProductVariant/48828947726654",
              "variantId": "48828947726654",
              "variantGraphqlId": "gid://shopify/ProductVariant/48828947726654",
              "compareAtPrice": null,
              "image": "https://cdn.shopify.com/s/files/1/0774/9219/1550/products/green.png?v=1708882150",
              "isSelected": true,
              "isPreviewOptionsSelected": false,
              "selectedOptions": [
                  "S",
                  "green"
              ],
              "price": "200.00",
              "totalVariantPrice": "200.00"
          },
          {
              "id": "gid://shopify/ProductVariant/48828947759422",
              "variantId": "48828947759422",
              "variantGraphqlId": "gid://shopify/ProductVariant/48828947759422",
              "compareAtPrice": null,
              "image": "https://cdn.shopify.com/s/files/1/0774/9219/1550/products/blue.png?v=1708882150",
              "isSelected": true,
              "isPreviewOptionsSelected": false,
              "selectedOptions": [
                  "S",
                  "blue"
              ],
              "price": "200.00",
              "totalVariantPrice": "200.00"
          },
          {
              "id": "gid://shopify/ProductVariant/48828947792190",
              "variantId": "48828947792190",
              "variantGraphqlId": "gid://shopify/ProductVariant/48828947792190",
              "compareAtPrice": null,
              "image": "https://cdn.shopify.com/s/files/1/0774/9219/1550/products/red.jpg?v=1708882150",
              "isSelected": true,
              "isPreviewOptionsSelected": false,
              "selectedOptions": [
                  "M",
                  "red"
              ],
              "price": "100.00",
              "totalVariantPrice": "100.00"
          },
          {
              "id": "gid://shopify/ProductVariant/48828947824958",
              "variantId": "48828947824958",
              "variantGraphqlId": "gid://shopify/ProductVariant/48828947824958",
              "compareAtPrice": null,
              "image": "https://cdn.shopify.com/s/files/1/0774/9219/1550/products/white.jpg?v=1708882150",
              "isSelected": true,
              "isPreviewOptionsSelected": false,
              "selectedOptions": [
                  "M",
                  "white"
              ],
              "price": "100.00",
              "totalVariantPrice": "100.00"
          },
          {
              "id": "gid://shopify/ProductVariant/48828947857726",
              "variantId": "48828947857726",
              "variantGraphqlId": "gid://shopify/ProductVariant/48828947857726",
              "compareAtPrice": null,
              "image": "https://cdn.shopify.com/s/files/1/0774/9219/1550/products/download_3.png?v=1708882150",
              "isSelected": true,
              "isPreviewOptionsSelected": false,
              "selectedOptions": [
                  "M",
                  "black"
              ],
              "price": "100.00",
              "totalVariantPrice": "100.00"
          },
          {
              "id": "gid://shopify/ProductVariant/48828947890494",
              "variantId": "48828947890494",
              "variantGraphqlId": "gid://shopify/ProductVariant/48828947890494",
              "compareAtPrice": null,
              "image": "https://cdn.shopify.com/s/files/1/0774/9219/1550/products/green.png?v=1708882150",
              "isSelected": true,
              "isPreviewOptionsSelected": false,
              "selectedOptions": [
                  "M",
                  "green"
              ],
              "price": "100.00",
              "totalVariantPrice": "100.00"
          },
          {
              "id": "gid://shopify/ProductVariant/48828947923262",
              "variantId": "48828947923262",
              "variantGraphqlId": "gid://shopify/ProductVariant/48828947923262",
              "compareAtPrice": null,
              "image": "https://cdn.shopify.com/s/files/1/0774/9219/1550/products/blue.png?v=1708882150",
              "isSelected": true,
              "isPreviewOptionsSelected": false,
              "selectedOptions": [
                  "M",
                  "blue"
              ],
              "price": "100.00",
              "totalVariantPrice": "100.00"
          },
          {
              "id": "gid://shopify/ProductVariant/48828947956030",
              "variantId": "48828947956030",
              "variantGraphqlId": "gid://shopify/ProductVariant/48828947956030",
              "compareAtPrice": null,
              "image": "https://cdn.shopify.com/s/files/1/0774/9219/1550/products/red.jpg?v=1708882150",
              "isSelected": true,
              "isPreviewOptionsSelected": false,
              "selectedOptions": [
                  "L",
                  "red"
              ],
              "price": "100.00",
              "totalVariantPrice": "100.00"
          },
          {
              "id": "gid://shopify/ProductVariant/48828947988798",
              "variantId": "48828947988798",
              "variantGraphqlId": "gid://shopify/ProductVariant/48828947988798",
              "compareAtPrice": null,
              "image": "https://cdn.shopify.com/s/files/1/0774/9219/1550/products/white.jpg?v=1708882150",
              "isSelected": true,
              "isPreviewOptionsSelected": false,
              "selectedOptions": [
                  "L",
                  "white"
              ],
              "price": "100.00",
              "totalVariantPrice": "100.00"
          },
          {
              "id": "gid://shopify/ProductVariant/48828948021566",
              "variantId": "48828948021566",
              "variantGraphqlId": "gid://shopify/ProductVariant/48828948021566",
              "compareAtPrice": null,
              "image": "https://cdn.shopify.com/s/files/1/0774/9219/1550/products/download_3.png?v=1708882150",
              "isSelected": true,
              "isPreviewOptionsSelected": false,
              "selectedOptions": [
                  "L",
                  "black"
              ],
              "price": "100.00",
              "totalVariantPrice": "100.00"
          },
          {
              "id": "gid://shopify/ProductVariant/48828948054334",
              "variantId": "48828948054334",
              "variantGraphqlId": "gid://shopify/ProductVariant/48828948054334",
              "compareAtPrice": null,
              "image": "https://cdn.shopify.com/s/files/1/0774/9219/1550/products/green.png?v=1708882150",
              "isSelected": true,
              "isPreviewOptionsSelected": false,
              "selectedOptions": [
                  "L",
                  "green"
              ],
              "price": "100.00",
              "totalVariantPrice": "100.00"
          },
          {
              "id": "gid://shopify/ProductVariant/48828948087102",
              "variantId": "48828948087102",
              "variantGraphqlId": "gid://shopify/ProductVariant/48828948087102",
              "compareAtPrice": null,
              "image": "https://cdn.shopify.com/s/files/1/0774/9219/1550/products/blue.png?v=1708882150",
              "isSelected": true,
              "isPreviewOptionsSelected": false,
              "selectedOptions": [
                  "L",
                  "blue"
              ],
              "price": "100.00",
              "totalVariantPrice": "100.00"
          },
          {
              "id": "gid://shopify/ProductVariant/48828948119870",
              "variantId": "48828948119870",
              "variantGraphqlId": "gid://shopify/ProductVariant/48828948119870",
              "compareAtPrice": null,
              "image": "https://cdn.shopify.com/s/files/1/0774/9219/1550/products/red.jpg?v=1708882150",
              "isSelected": true,
              "isPreviewOptionsSelected": false,
              "selectedOptions": [
                  "XL",
                  "red"
              ],
              "price": "100.00",
              "totalVariantPrice": "100.00"
          },
          {
              "id": "gid://shopify/ProductVariant/48828948152638",
              "variantId": "48828948152638",
              "variantGraphqlId": "gid://shopify/ProductVariant/48828948152638",
              "compareAtPrice": null,
              "image": "https://cdn.shopify.com/s/files/1/0774/9219/1550/products/white.jpg?v=1708882150",
              "isSelected": true,
              "isPreviewOptionsSelected": false,
              "selectedOptions": [
                  "XL",
                  "white"
              ],
              "price": "100.00",
              "totalVariantPrice": "100.00"
          },
          {
              "id": "gid://shopify/ProductVariant/48828948185406",
              "variantId": "48828948185406",
              "variantGraphqlId": "gid://shopify/ProductVariant/48828948185406",
              "compareAtPrice": null,
              "image": "https://cdn.shopify.com/s/files/1/0774/9219/1550/products/download_3.png?v=1708882150",
              "isSelected": true,
              "isPreviewOptionsSelected": false,
              "selectedOptions": [
                  "XL",
                  "black"
              ],
              "price": "100.00",
              "totalVariantPrice": "100.00"
          },
          {
              "id": "gid://shopify/ProductVariant/48828948218174",
              "variantId": "48828948218174",
              "variantGraphqlId": "gid://shopify/ProductVariant/48828948218174",
              "compareAtPrice": null,
              "image": "https://cdn.shopify.com/s/files/1/0774/9219/1550/products/green.png?v=1708882150",
              "isSelected": true,
              "isPreviewOptionsSelected": false,
              "selectedOptions": [
                  "XL",
                  "green"
              ],
              "price": "100.00",
              "totalVariantPrice": "100.00"
          },
          {
              "id": "gid://shopify/ProductVariant/48828948250942",
              "variantId": "48828948250942",
              "variantGraphqlId": "gid://shopify/ProductVariant/48828948250942",
              "compareAtPrice": null,
              "image": "https://cdn.shopify.com/s/files/1/0774/9219/1550/products/blue.png?v=1708882150",
              "isSelected": true,
              "isPreviewOptionsSelected": false,
              "selectedOptions": [
                  "XL",
                  "blue"
              ],
              "price": "100.00",
              "totalVariantPrice": "100.00"
          },
          {
              "id": "gid://shopify/ProductVariant/48828948283710",
              "variantId": "48828948283710",
              "variantGraphqlId": "gid://shopify/ProductVariant/48828948283710",
              "compareAtPrice": null,
              "image": "https://cdn.shopify.com/s/files/1/0774/9219/1550/products/QuesProjectIcon1.png?v=1708882150",
              "isSelected": true,
              "isPreviewOptionsSelected": false,
              "selectedOptions": [
                  "XXL",
                  "red"
              ],
              "price": "100.00",
              "totalVariantPrice": "100.00"
          },
          {
              "id": "gid://shopify/ProductVariant/48828948316478",
              "variantId": "48828948316478",
              "variantGraphqlId": "gid://shopify/ProductVariant/48828948316478",
              "compareAtPrice": null,
              "image": "https://cdn.shopify.com/s/files/1/0774/9219/1550/products/wp6189287.webp?v=1708882150",
              "isSelected": true,
              "isPreviewOptionsSelected": false,
              "selectedOptions": [
                  "XXL",
                  "white"
              ],
              "price": "100.00",
              "totalVariantPrice": "100.00"
          },
          {
              "id": "gid://shopify/ProductVariant/48828948349246",
              "variantId": "48828948349246",
              "variantGraphqlId": "gid://shopify/ProductVariant/48828948349246",
              "compareAtPrice": null,
              "image": "https://cdn.shopify.com/s/files/1/0774/9219/1550/products/download_1.png?v=1708882150",
              "isSelected": true,
              "isPreviewOptionsSelected": false,
              "selectedOptions": [
                  "XXL",
                  "black"
              ],
              "price": "100.00",
              "totalVariantPrice": "100.00"
          },
          {
              "id": "gid://shopify/ProductVariant/48828948382014",
              "variantId": "48828948382014",
              "variantGraphqlId": "gid://shopify/ProductVariant/48828948382014",
              "compareAtPrice": null,
              "image": "https://cdn.shopify.com/s/files/1/0774/9219/1550/products/QuesProjectIcon5.png?v=1708882150",
              "isSelected": true,
              "isPreviewOptionsSelected": false,
              "selectedOptions": [
                  "XXL",
                  "green"
              ],
              "price": "100.00",
              "totalVariantPrice": "100.00"
          },
          {
              "id": "gid://shopify/ProductVariant/48828948414782",
              "variantId": "48828948414782",
              "variantGraphqlId": "gid://shopify/ProductVariant/48828948414782",
              "compareAtPrice": null,
              "image": "https://cdn.shopify.com/s/files/1/0774/9219/1550/products/QuesProjectIcon3.png?v=1708882150",
              "isSelected": true,
              "isPreviewOptionsSelected": false,
              "selectedOptions": [
                  "XXL",
                  "blue"
              ],
              "price": "100.00",
              "totalVariantPrice": "100.00"
          }
      ],
      "hasOnlyDefaultVariant": false,
      "images": [
          {
              "originalSrc": "https://cdn.shopify.com/s/files/1/0774/9219/1550/products/red.jpg?v=1708882150"
          },
          {
              "originalSrc": "https://cdn.shopify.com/s/files/1/0774/9219/1550/products/white.jpg?v=1708882150"
          },
          {
              "originalSrc": "https://cdn.shopify.com/s/files/1/0774/9219/1550/products/download_3.png?v=1708882150"
          },
          {
              "originalSrc": "https://cdn.shopify.com/s/files/1/0774/9219/1550/products/green.png?v=1708882150"
          },
          {
              "originalSrc": "https://cdn.shopify.com/s/files/1/0774/9219/1550/products/blue.png?v=1708882150"
          }
      ],
      "title": "Test 2 - new",
      "options": [
          {
              "name": "siiizeee",
              "title": "Test 2 - new (Size)",
              "values": [
                  {
                      "label": "S",
                      "isSelected": true
                  },
                  {
                      "label": "M",
                      "isSelected": true
                  },
                  {
                      "label": "L",
                      "isSelected": true
                  },
                  {
                      "label": "XL",
                      "isSelected": true
                  },
                  {
                      "label": "XXL",
                      "isSelected": true
                  }
              ],
              "selectedDesign_desktop": "DROPDOWN",
              "selectedDesign_mobile": "DROPDOWN",
              "id": "13058577269054",
              "selectedDesign": "DROPDOWN"
          },
          {
              "name": "coolllorrr",
              "title": "Test 2 - new (Color)",
              "values": [
                  {
                      "label": "red",
                      "isSelected": true,
                      "hexCode": "red"
                  },
                  {
                      "label": "white",
                      "isSelected": true,
                      "hexCode": "white"
                  },
                  {
                      "label": "black",
                      "isSelected": true,
                      "hexCode": "black"
                  },
                  {
                      "label": "green",
                      "isSelected": true,
                      "hexCode": "green"
                  },
                  {
                      "label": "blue",
                      "isSelected": true,
                      "hexCode": "blue"
                  }
              ],
              "selectedDesign_desktop": "SWATCH",
              "selectedDesign_mobile": "SWATCH",
              "id": "13058577301822",
              "customizeSwatchType": "HEXCODE",
              "selectedDesign": "SWATCH"
          }
      ],
      "existingProduct": true,
      "designObject": [
          {
              "name": "siiizeee",
              "design": "DROPDOWN",
              "productId": "10830819852606",
              "values": [
                  {
                      "label": "S",
                      "isSelected": true
                  },
                  {
                      "label": "M",
                      "isSelected": true
                  },
                  {
                      "label": "L",
                      "isSelected": true
                  },
                  {
                      "label": "XL",
                      "isSelected": true
                  },
                  {
                      "label": "XXL",
                      "isSelected": true
                  }
              ]
          },
          {
              "name": "coolllorrr",
              "design": "SWATCH",
              "productId": "10830819852606",
              "values": [
                  {
                      "label": "red",
                      "isSelected": true,
                      "hexCode": "red"
                  },
                  {
                      "label": "white",
                      "isSelected": true,
                      "hexCode": "white"
                  },
                  {
                      "label": "black",
                      "isSelected": true,
                      "hexCode": "black"
                  },
                  {
                      "label": "green",
                      "isSelected": true,
                      "hexCode": "green"
                  },
                  {
                      "label": "blue",
                      "isSelected": true,
                      "hexCode": "blue"
                  }
              ],
              "customizeSwatchType": "HEXCODE"
          }
      ]
  },
  {
      "productId": "8371094978878",
      "productId_2": "837109497887800",
      "graphqlId": "gid://shopify/Product/8371094978878",
      "quantity": 3,
      "id": "gid://shopify/Product/8371094978878",
      "handle": "gift-card",
      "handle_2": "gift-card_a",
      "variants": [
          {
              "id": "gid://shopify/ProductVariant/45536014860606",
              "variantId": "45536014860606",
              "variantGraphqlId": "gid://shopify/ProductVariant/45536014860606",
              "compareAtPrice": null,
              "isSelected": true,
              "isPreviewOptionsSelected": true,
              "selectedOptions": [
                  "10"
              ],
              "price": "10.00",
              "totalVariantPrice": "10.00"
          },
          {
              "id": "gid://shopify/ProductVariant/45536014926142",
              "variantId": "45536014926142",
              "variantGraphqlId": "gid://shopify/ProductVariant/45536014926142",
              "compareAtPrice": null,
              "isSelected": true,
              "isPreviewOptionsSelected": false,
              "selectedOptions": [
                  "25"
              ],
              "price": "25.00",
              "totalVariantPrice": "25.00"
          },
      ],
      "hasOnlyDefaultVariant": false,
      "images": [
          {
              "originalSrc": "https://cdn.shopify.com/s/files/1/0774/9219/1550/products/gift_card.png?v=1686732738"
          }
      ],
      "title": "Gift Card",
      "options": [
          {
              "name": "Denominations",
              "title": "Gift Card (Denominations)",
              "values": [
                  {
                      "label": "10",
                      "isSelected": true
                  },
                  {
                      "label": "25",
                      "isSelected": true
                  },
              ],
              "selectedDesign_desktop": "LABEL",
              "selectedDesign_mobile": "LABEL",
              "id": "10609594990910",
              "selectedDesign": "LABEL"
          }
      ],   
  },
  {
      "productId": "8371094978878",
      "productId_2": "837109497887801",
      "graphqlId": "gid://shopify/Product/8371094978878",
      "quantity": 2,
      "id": "gid://shopify/Product/8371094978878",
      "handle": "gift-card",
      "handle_2": "gift-card_b",
      "variants": [
          {
              "id": "gid://shopify/ProductVariant/45536014991678",
              "variantId": "45536014991678",
              "variantGraphqlId": "gid://shopify/ProductVariant/45536014991678",
              "compareAtPrice": null,
              "isSelected": true,
              "isPreviewOptionsSelected": false,
              "selectedOptions": [
                  "50"
              ],
              "price": "50.00",
              "totalVariantPrice": "50.00"
          },
          {
              "id": "gid://shopify/ProductVariant/45536015024446",
              "variantId": "45536015024446",
              "variantGraphqlId": "gid://shopify/ProductVariant/45536015024446",
              "compareAtPrice": null,
              "isSelected": true,
              "isPreviewOptionsSelected": false,
              "selectedOptions": [
                  "100"
              ],
              "price": "100.00",
              "totalVariantPrice": "100.00"
          }
      ],
      "hasOnlyDefaultVariant": false,
      "images": [
          {
              "originalSrc": "https://cdn.shopify.com/s/files/1/0774/9219/1550/products/gift_card.png?v=1686732738"
          }
      ],
      "title": "Gift Card",
      "options": [
          {
              "name": "Denominations",
              "title": "Gift Card (Denominations)",
              "values": [
                  {
                      "label": "50",
                      "isSelected": true
                  },
                  {
                      "label": "100",
                      "isSelected": true
                  }
              ],
              "selectedDesign_desktop": "LABEL",
              "selectedDesign_mobile": "LABEL",
              "id": "10609594990910",
              "selectedDesign": "LABEL"
          }
      ],
      
  }
]

var gfbUtils = {
  f: {},
};
window.gfbUtils = gfbUtils;
// console.log("gfbUtils", gfbUtils);


gfbUtils.f.loadScript = function (a, b) {
  var c = document.createElement("script");
  c.type = "text/javascript";
  c.src = a;
  document.getElementsByTagName("head")[0].appendChild(c);
  c.onload = function () {
    b();
  };
};

/*
 * we changed loadScript function - if else block for onload is removed as it was not making sense
 *fn(param1) =>
 *param1 - represents function that should be executed once jquery is loaded
 *https://www.w3schools.com/jquery/jquery_noconflict.asp
 */
gfbUtils.f.loadJquery = function (b) {
  // console.log("does this work");
  b()
  // let flag = false;
  // if ("undefined" === typeof jQuery || 3.0 > parseFloat(jQuery.fn.jquery)) {
  //   flag = true;
  // }
  // if ("undefined" != typeof jQuery && jQuery.post == undefined) {
  //   flag = true;productIdArray.push(...selectedIdArray);  
  // }

  // if (flag) {
  //   gfbUtils.f.loadScript("https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js", function () {
  //     gfbJquery = jQuery.noConflict(!0);
  //     b(gfbJquery);
  //   });
  // } else {
  //   b(jQuery);
  // }
};

var gfb = {
  debug: [],
  version: 1.1,
  state: {
    cachedProductData: new Map(),
    submitted: "",
    product_added: "",
    page_type: "",
    lastClickTimestamps: new Map(),
    insertWrapperOnPage: [],
    cartData: undefined,
    isOverWriteBuyNowBtnTriggered: false,
    timer: undefined,
    checkForFreeGift: false,
    isCheckForFreeGiftTriggered: false,
    gfbFrequentBoughtMsgRowButton: false,
    CONSTANT_DEBUG_FLAG: undefined, //undefined
    freeGiftsCartDataMap_productId: {},
    freeGiftsCartDataMap_variantId: {},
    freeGiftsCartData: {},
    gfbFrequentBoughtCartData: {},
    activeCampaignName: "EMPTY",
    isCartUpdatedByUs: false,
    currentProductData: undefined,
    isCurrentProductIsFBT: false,
    isCurrentProductIsVolumeBundle: false,
    storeFrontAccessToken: undefined,
    app_id: undefined,
  },
  constants: {
    themesIds: {
      DAWN_THEME: 887,
      VENTURE_THEME: 775,
      EXPRESS_THEME: 885,
      CRAVE_THEME: 1363,
      SENSE_THEME: 1356,
      CRAFT_THEME: 1368,
    },
  },

  settings: {
    STOREFRONT_ACCESS_TOKEN: undefined
  }, //object from function
  selectors: {},
  cartInterval: "",
  productinterval: "",
  f: {
    bootstrap: function (settings) {
      gfb.utility.debugConsole("bootstap?");
      gfb.f.initThemeCSS();
      gfb.utility.setWindowDataIfEmpty();
      gfb.utility.setCachedProductDataUsingSessionStorage();
      gfb.utility.setCachedProductDataUsingLiquidData();
      gfb.utility.setStateUsingLiquidData();
      gfb.f.globalListener(settings);
    },
    initThemeCSS: function () {},
    getSettings: async function () {
      //promise
    
      gfb.utility.debugConsole("GET setting of giftboxbuilder ext fired");
      let storefrontAccessToken = gfb.utility.getSetDataFromLocalStorage('gfb.utilis.storeFrontAccessToken', {}, "GET");
      gfb.settings.STOREFRONT_ACCESS_TOKEN = storefrontAccessToken;
      gfb.utility.debugConsole("benchmark s3 start");
      let shopNames = ["wanderlust-life-jewellery.myshopify.com"];
      try {
        let readFromLiquid = window.flyBundlesMetafield?.product || false;
        let settingsResult;
        let isShopPresent = shopNames.includes(readFromLiquid.flyConfigData.userData.shopName);
        readFromLiquid = !isShopPresent;
        if (readFromLiquid) {
          settingsResult = window.flyBundlesMetafield?.product?.flyConfigData;
        } else {
          if (window?.fly_app_data?.storefrontAccessToken) {
            gfb.state.storeFrontAccessToken = window?.fly_app_data?.storefrontAccessToken;
            gfb.state.app_id = window?.fly_app_data?.app_id;
            gfb.utility.debugConsole("fetching from storefront access token");
            settingsResult = await gfb.utility.getDataFromMetaObjects();
            if(isShopPresent){
              settingsResult = false;
            }
          }
        }

        if (settingsResult) {
          if (settingsResult?.userData) {
            return settingsResult;
          } else {
            // fetch from s3, which is gonna happen in the next block;
          }
        }
      } catch (error) {
        gfb.utility.debugError("error in s3 fetch. ", error);
      }
      return new Promise(function (resolve, reject) {
        gfb.utility.debugConsole("fetching from s3");
        gfb.f
          .getSettingsFromS3()
          .then((success) => {
            gfb.utility.debugConsole("benchmark s3 start");
            resolve(success);
          })
          .catch((error) => {
            gfb.utility.debugError("error in s3 fetch. ", error);
          });
      });


    },
    getSettingsFromS3: async function () {
      //promise
      let shopName = window.Shopify.shop;
      gfb.utility.debugConsole("GET setting of giftlab pro fired");
      return new Promise(function (resolve, reject) {
        fetch(`https://echo-fixed-bundle-app9.s3.us-east-2.amazonaws.com/tempCartSettings/${shopName}.json?nocache=${new Date().getTime()}`, {
          method: "GET",
        })
          .then(
            (response) => response.json() // if the response is a JSON object
          )
          .then((success) => {
            if (success.responseCode == 200) {
              gfb.utility.debugConsole("success-data", success);
            }
            resolve(success);
          })
          .catch((error) => {
            gfb.utility.debugConsole(error); // Handle the error response object
            reject(error);
          });
      });
    },

    setSettings: function (tmpCartSettings) {
      var cart_settings = {
        SERVER_URL: tmpCartSettings.SERVER_URL,
        SHOP_DOMAIN : tmpCartSettings?.userData?.shopName,
        STOREFRONT_ACCESS_TOKEN: tmpCartSettings?.userData?.storefrontAccessToken || undefined,
        app: {
          disableApp: tmpCartSettings.userData.customSettings.disableApp || false,
          disableSideCart: tmpCartSettings.userData.customSettings.disableSideCart || false,
          refreshProductPageOnGiftWrap: tmpCartSettings.userData.customSettings.refreshProductPageOnGiftWrap || false,
          addToCartBtnSelectors: tmpCartSettings.userData.customSettings.addToCartBtnSelectors || DEFAULT_addToCartBtnSelectorsApp9Ext,
          checkoutBtnSelectors: tmpCartSettings.userData.customSettings.checkoutBtnSelectors || DEFAULT_checkoutBtnSelectorsApp9Ext,
          sideCartCheckoutBtnSelectors: tmpCartSettings.userData.customSettings.sideCartCheckoutBtnSelectors || DEFAULT_checkoutBtnSelectorsApp9Ext,
          overWriteCheckoutBtn: tmpCartSettings.userData.customSettings.overWriteCheckoutBtn || false,
          quantityBtnSelectors: tmpCartSettings.userData.customSettings.quantityBtnSelectors || DEFAULT_quantityBtnSelectorsApp9Ext,
          sideCartSelectors: tmpCartSettings.userData.customSettings.sideCartSelectors || DEFAULT_sideCartSelectorsApp9Ext,
          isCartIntegrationEnabled: tmpCartSettings.userData.customSettings.isCartIntegrationEnabled || false,
          cartItemSelectors: tmpCartSettings.userData.customSettings.cartItemSelectors || DEFAULT_cartItemSelectorApp9Ext,
          cartItemRemoveParentSelectors: tmpCartSettings.userData.customSettings.cartItemRemoveParentSelectors || DEFAULT_cartItemRemoveParentSelectorApp9Ext,
          cartItemRemoveSelectors: tmpCartSettings.userData.customSettings.cartItemRemoveSelectors || DEFAULT_cartItemRemoveSelectorApp9Ext,
          cartItemQuantityBtnSelectors: tmpCartSettings.userData.customSettings.cartItemQuantityBtnSelectors || DEFAULT_cartItemQuantityBtnSelectorsApp9Ext,
          customCartIntegrationScript: tmpCartSettings.userData.customSettings.customCartIntegrationScript || null,
          activeVariantCodes: tmpCartSettings.userData.customSettings.activeVariantCodes || "123456789",
          showBranding: tmpCartSettings.userData.customSettings.showBranding,
          buyNowBtn: tmpCartSettings.userData.customSettings.buyNowBtn || DEFAULT_buyNowBtnApp9Ext,
          customStyle: tmpCartSettings.userData.customSettings.customStyle || null,
          customScript: tmpCartSettings.userData.customSettings.customScript || null,
          enableCustomScript: tmpCartSettings.userData.customSettings.enableCustomScript || false,
          enablingApiFromSetInterval: tmpCartSettings.userData.customSettings.enablingApiFromSetInterval || false,
          isMultipleFreeGiftAllowed: tmpCartSettings.userData.customSettings.isMultipleFreeGiftAllowed || false,
          addAfterAddTocartBtn: tmpCartSettings.userData.customSettings.addAfterAddTocartBtn || false,
          addAftercheckoutBtn: tmpCartSettings.userData.customSettings.addAftercheckoutBtn || false,
          // sideCartSectionId = "cart-drawer"
          sideCartSectionId: tmpCartSettings.userData.customSettings.sideCartSectionId || "cart-drawer",
          sideCartSectionSelector: tmpCartSettings.userData.customSettings.sideCartSectionSelector || null,
          // cartPageItemsId = "cart-items"
          cartPageItemsSectionId: tmpCartSettings.userData.customSettings.cartPageItemsSectionId || tmpCartSettings.userData.customSettings.cartPageItemsId || "cart-items",
          cartPageItemsSelector: tmpCartSettings.userData.customSettings.cartPageItemsSelector || ".cart__row",

          executeScriptAfterAddToCart: tmpCartSettings.userData.customSettings.executeScriptAfterAddToCart || "console.log('executeScriptAfterAddToCart')",
          redirectToCartEnabled_volumeBundle: tmpCartSettings.userData.customSettings.redirectToCartEnabled_volumeBundle || false,
          redirectToCartEnabled_FBT: tmpCartSettings.userData.customSettings.redirectToCartEnabled_FBT || false,
          isExecuteCustomScriptAfterAddToCartEnabled_FBT: tmpCartSettings.userData.customSettings.isExecuteCustomScriptAfterAddToCartEnabled_FBT || false,
          executeCustomScriptAfterAddToCart_FBT: tmpCartSettings.userData.customSettings.executeCustomScriptAfterAddToCart_FBT || "console.log('executeScript executeCustomScriptAfterAddToCart_FBT')",
          executeDefaultSideCartUpdate_FBT: tmpCartSettings.userData.customSettings.executeDefaultSideCartUpdate_FBT || false,
          isExecuteCustomScriptAfterAddToCartEnabled_volumeBundle: tmpCartSettings.userData.customSettings.isExecuteCustomScriptAfterAddToCartEnabled_volumeBundle || false,
          executeCustomScriptAfterAddToCart_volumeBundle: tmpCartSettings.userData.customSettings.executeCustomScriptAfterAddToCart_volumeBundle || "console.log('executeScript executeCustomScriptAfterAddToCart_volumeBundle')",
          executeDefaultSideCartUpdate_volumeBundle: tmpCartSettings.userData.customSettings.executeDefaultSideCartUpdate_volumeBundle || false,
          redirectToCheckoutEnabled_FBT: tmpCartSettings.userData.customSettings.redirectToCheckoutEnabled_FBT || false,
          redirectToCheckoutEnabled_volumeBundle: tmpCartSettings.userData.customSettings.redirectToCheckoutEnabled_volumeBundle || false,
          itemTitleSelector: tmpCartSettings.userData.customSettings.itemTitleSelector || '.cart-item__name',
          bundleImageSelector: tmpCartSettings.userData.customSettings.bundleImageSelector || '.cart-item__image',
          cartPageSelector: tmpCartSettings.userData.customSettings.cartPageSelector || '.cart-item',
          bundleCartRrepresentationObj: tmpCartSettings.userData.customSettings.bundleCartRepresentationObj || CONSTANT_bundleCartRrepresentationObj || {},
          disableApiCallListen: tmpCartSettings.userData.customSettings.disableApiCallListen && true,
          enableThemeEditorChanges: tmpCartSettings.userData.customSettings.enableThemeEditorChanges || false,
        },
        merchantInfo: tmpCartSettings.userData,
        languageData: tmpCartSettings.languageData || {},
        freeGifts: tmpCartSettings.promotionCampaigns,
        discounts: tmpCartSettings.discounts,
        urlSearchString: window.location.search ? window.location.search : "",
        frequentBoughtData: tmpCartSettings.frequentBoughtData || dummyObject2,
        volumeDiscountData: tmpCartSettings.volumeBundleData || [],
        shopifyBundlesData: tmpCartSettings.shopifyBundles || [],
      };
      
      //filter settings based on currentProduct 
      cart_settings = gfb.utility.filterFBTAndVolumeBundleSettings(cart_settings);

      gfb.settings = cart_settings;
      gfb.utility.getSetDataFromLocalStorage('gfb.utilis.storeFrontAccessToken', gfb.settings.STOREFRONT_ACCESS_TOKEN, "SET");
      gfb.utility.getSetDataFromLocalStorage('gfb.utilis.shopDomain', gfb.settings.SHOP_DOMAIN, "SET");
      gfb.utility.debugConsole("settings assigned");
    },
    handleSkaiLamaSideCartUpdate: async function () {
      try {
        let success = false;
        let cartData;


                              // Initial cart.js call
                              try {
                                  const response = await fetch("/cart.js");
                                  cartData = await response.json();
                                } catch (error) {
                                  console.error("Error fetching cart data:", error);
                                  return false;
                                }

        try {
          window.Rebuy.Cart.init();
          window.Rebuy.SmartCart.show();
          success = true;
          return success;
        } catch (error) {
          success = false;
          console.error('Error initializing and showing Rebuy Cart:', error);
        }

                // Case 17
          try {
            smeCartCall(0); // or smeCartCall(1);
            window.openSmeCart();
            success = true;
            return success;
          } catch (error) {
            console.error('Error calling and opening Cart upsell slide cart drawer:', error);
            success = false;
          }

          try {

              window.SLIDECART_UPDATE();
              window.SLIDECART_OPEN();
              success = true;
              return success;
          
          } catch (error) {
              success = false;
              console.error('Error calling and opening Cart upsell slide cart drawer:', error);
          }

          //not working
          // if (document.querySelector('.easy-slide-cart') && document.querySelector('.slide-cart-body') && typeof CustomEvent === 'function') {
          //     try {
          //       setTimeout(()=>{
          //         window.dispatchEvent(new CustomEvent("SLIDECARTY:refresh"));
          //         window.dispatchEvent(new CustomEvent("SLIDECARTY:open"));
          //         success = true;
          //         return success;
          //       }, 400)
          //     } catch (error) {
          //       console.error('Error refreshing and opening Slide Carty:', error);
          //       success = false;
          //     }
          // }


                                if (typeof refreshCart == 'function') 
                                {
                                    try 
                                    {
                                        window.SLIDECART_UPDATE();
                                        success = true;
                                        return success;
                                    } 
                                    catch (error) 
                                    {
                                        try 
                                        {
                                            refreshCart(cartData);
                                        } 
                                        catch (e) 
                                        {
                                            success = false;
                                            gfb.utility.debugConsole("Error while updating cart", error);
                                        }
                                    }
                                }
                        
                                if (typeof window.SLIDECART_UPDATE === "function") 
                                {
                                    try 
                                    {
                                        window.SLIDECART_UPDATE();
                                        success = true;
                                        return success;
                                    } 
                                    catch (error) 
                                    {
                                        success = false;
                                        gfb.utility.debugConsole("Error while updating cart", error);
                                    }
                                }
                        
                        
                                if (typeof window.fcsb !== "undefined" && typeof window.fcsb.openMiniCart === "function" && typeof window.fcsb.fetchCart === "function") 
                                {
                                    try 
                                    {
                                        window.fcsb.fetchCart();
                                        setTimeout(() => 
                                        {
                                            window.fcsb.openMiniCart();
                                        }, 500);
                                        success = true;
                                        return success;
                                    } 
                                    catch (error) 
                                    {
                                        success = false;
                                        gfb.utility.debugConsole("Error while updating cart", error);
                                    }
                                }
                        
                        
                                if (typeof triggerCartOpen === "function") 
                                {
                                    try 
                                    {
                                        triggerCartOpen();
                                        success = true;
                                        return success;
                                    } 
                                    catch (error) 
                                    {
                                        success = false;
                                        gfb.utility.debugConsole("Error while updating cart", error);
                                    }
                                }
                        
                        
                                if (document.querySelector('#offcanvas-cart')) 
                                {
                                    try 
                                    {
                                        bootstrap.Offcanvas.getOrCreateInstance('#offcanvas-cart').show();
                                        success = true;
                                        return success;
                                    } 
                                    catch (error) 
                                    {
                                        success = false;
                                        gfb.utility.debugConsole("Error while updating cart", error);
                                    }
                                }
                        
                        
                                if (typeof window.theme !== "undefined" && typeof window.theme.ajaxCart !== "undefined" && typeof window.theme.ajaxCart.update === "function") 
                                {
                                    try 
                                    {
                                        window.theme.ajaxCart.update();
                                        success = true;
                                        return success;
                                    } 
                                    catch (error) 
                                    {
                                        success = false;
                                        gfb.utility.debugConsole("Error while updating cart", error);
                                    }
                                }
                        
                        
                                if (typeof window.icartCartActivityEvent === "function") 
                                {
                                    try 
                                    {
                                        window.icartCartActivityEvent();
                                        success = true;
                                        return success;
                                    } 
                                    catch (error) 
                                    {
                                        success = false;
                                        gfb.utility.debugConsole("Error while updating cart", error);
                                    }
                                }
                        
                        
                                try 
                                {
                                    document.dispatchEvent(new CustomEvent("theme:popup:open"))
                                } 
                                catch (e) 
                                {
                                    success = false;
                                    gfb.utility.debugConsole("Error while updating cart", e)
                                }
                        
                        
                                try 
                                {
                                    document.dispatchEvent(new Event("theme:popup:open"))
                                } 
                                catch (e) 
                                {
                                    success = false;
                                    gfb.utility.debugConsole("Error while updating cart", e)
                                }
                        
                        
                                try 
                                {
                                    document.dispatchEvent(new Event("theme:cart:update"))
                                } 
                                catch (e) 
                                {
                                    success = false;
                                    gfb.utility.debugConsole("Error while updating cart", e)
                                }
                        
                        
                                try 
                                {
                                    document.dispatchEvent(new Event("theme:drawer:open"))
                                } 
                                catch (e) 
                                {
                                    success = false;
                                    gfb.utility.debugConsole("Error while updating cart", e)
                                }
                        
                        
                                try 
                                {
                                    document.dispatchEvent(new CustomEvent("theme:cart:update"))
                                } 
                                catch (e) 
                                {
                                    success = false;
                                    gfb.utility.debugConsole("Error while updating cart", e)
                                }
                        
                        
                                try 
                                {
                                    document.dispatchEvent(new CustomEvent("theme:drawer:open"))
                                } 
                                catch (e) 
                                {
                                    success = false;
                                    gfb.utility.debugConsole("Error while updating cart", e)
                                }
                        
                        
                                try 
                                {
                                    document.dispatchEvent(new CustomEvent("cart:refresh"))
                                } 
                                catch (e) 
                                {
                                    success = false;
                                    gfb.utility.debugConsole("Error while updating cart", e)
                                }
                        
                                try 
                                {
                                    document.dispatchEvent(new Event("cart:refresh"))
                                } 
                                catch (e) 
                                {
                                    success = false;
                                    gfb.utility.debugConsole("Error while updating cart", e)
                                }
                        
                        
                                try 
                                {
                                    document.dispatchEvent(new CustomEvent('cart:build'));
                                } 
                                catch (e) 
                                {
                                    success = false;
                                    gfb.utility.debugConsole("Error while updating cart", e)
                                }
                        
                        
                                try 
                                {
                                    document.dispatchEvent(new CustomEvent('obsidian:upsell:refresh'));
                                    document.dispatchEvent(new CustomEvent('obsidian:upsell:open'));
                                } 
                                catch (e) 
                                {
                                    success = false;
                                    gfb.utility.debugConsole("Error while updating cart", e)
                                }
                        
                        
                                try 
                                {
                                    document.documentElement.dispatchEvent(new CustomEvent("cart:refresh", 
                                    {
                                        bubbles: true
                                    }));
                                } 
                                catch (error) 
                                {
                                    success = false;
                                    gfb.utility.debugConsole("Error while updating cart", error);
                                }
                        
                        
                                if (typeof window.HsCartDrawer !== "undefined" && typeof window.HsCartDrawer.updateSlideCart === "function") 
                                {
                                    globalDebounce("hscartdrawer", function() 
                                    {
                                        try 
                                        {
                                            window.HsCartDrawer.updateSlideCart();
                                            success = true;
                                        return success;
                                        } 
                                        catch (error) 
                                        {
                                            success = false;
                                            gfb.utility.debugConsole("Error while updating cart", error);
                                        }
                                    }, 100);
                                }
                        
                                if (typeof window.HS_SLIDE_CART_OPEN !== "undefined" && typeof window.HS_SLIDE_CART_OPEN === "function") 
                                {
                                    globalDebounce("hscartdraweropen", function() 
                                    {
                                        try 
                                        {
                                            window.HS_SLIDE_CART_OPEN();
                                            success = true;
                                        return success;
                                        } 
                                        catch (error) 
                                        {
                                            success = false;
                                            gfb.utility.debugConsole("Error while updating cart", error);
                                        }
                                    }, 100);
                                }
                        
                                if (typeof theme !== "undefined" && typeof theme.Cart !== "undefined" && typeof theme.Cart.updateCart === "function") 
                                {
                                    try 
                                    {
                                        theme.Cart.updateCart();
                                        success = true;
                                        return success;
                                    } 
                                    catch (error) 
                                    {
                                        success = false;
                                        gfb.utility.debugConsole("Error while updating cart", error);
                                    }
                                }
                        
                        
                                if (typeof window.updateMiniCartContents === "function") 
                                {
                                    try 
                                    {
                                        window.updateMiniCartContents();
                                        success = true;
                                        return success;
                                    } 
                                    catch (error) 
                                    {
                                        success = false;
                                        gfb.utility.debugConsole("Error while updating cart", error);
                                    }
                                }
                        
                        
                                if (typeof window.loadEgCartDrawer === "function") 
                                {
                                    try 
                                    {
                                        window.loadEgCartDrawer();
                                        success = true;
                                        return success;
                                    } 
                                    catch (error) 
                                    {
                                        success = false;
                                        gfb.utility.debugConsole("Error while updating cart", error);
                                    }
                                }
                        
                        
                                try 
                                {
                                    document.dispatchEvent(new CustomEvent("cart:build"));
                                } 
                                catch (error) 
                                {
                                    success = false;
                                    gfb.utility.debugConsole("Error while updating cart", error);
                                }
                        
                        
                                try 
                                {
                                    document.dispatchEvent(new CustomEvent("cart:open"));
                                } 
                                catch (error) 
                                {
                                    success = false;
                                    gfb.utility.debugConsole("Error while updating cart", error);
                                }
                        
                        
                                // try 
                                // {
                                //     document.documentElement.dispatchEvent(new CustomEvent("product:added", 
                                //     {
                                //         bubbles: true,
                                //         detail: 
                                //         {
                                //             source: "N9_Upsells",
                                //             quantity: 1
                                //         }
                                //     }));
                                // } 
                                // catch (error) 
                                // {
                                //     success = false;
                                //     console.log("Error while updating cart", error);
                                // }
                        
                        
                                try 
                                {
                                    if (typeof window.cart !== "undefined" && typeof window.cart.getCart !== "undefined" && typeof window.cart.openCartDropdown !== "undefined") 
                                    {
                                        window.cart.getCart();
                                        window.cart.openCartDropdown();
                                        success = true;
                                        return success;
                                    }
                                } 
                                catch (error) 
                                {
                                    success = false;
                                    gfb.utility.debugConsole("Error while updating cart", error);
                                }
                        
                        
                                try 
                                {
                                    if (typeof window.ajaxCart !== "undefined") 
                                    {
                                        window.ajaxCart.load();
                                        success = true;
                                        return success;
                                    }
                                } 
                                catch (error) 
                                {
                                    success = false;
                                    gfb.utility.debugConsole("Error while updating cart", error);
                                }
                        
                        
                                try 
                                {
                                    document.dispatchEvent(new CustomEvent("obsidian:upsell:refresh"));
                                    document.dispatchEvent(new CustomEvent("obsidian:upsell:open"));
                                } 
                                catch (error) 
                                {
                                    success = false;
                                    gfb.utility.debugConsole("Error while updating cart", error);
                                }
                        
                        
                                let tn9 = document.getElementById("site-cart");
                                if (tn9 !== null)
                                {
                                    try 
                                    {
                                        tn9.show();
                                        success = true;
                                        return success;
                                    } 
                                    catch (error) 
                                    {
                                        success = false;
                                        gfb.utility.debugConsole("Error while updating cart", error);
                                    }
                                }
                        
                        
                                if (typeof CartJS !== "undefined" && typeof CartJS.getCart === "function") {
                                    try 
                                    {
                                        CartJS.getCart();
                                        success = true;
                                        return success;
                                    } 
                                    catch (error) 
                                    {
                                        success = false;
                                        gfb.utility.debugConsole("Error while updating cart", error);
                                    }
                                }
                        
                        
                                if (typeof window.SLIDECART_OPEN !== "undefined") 
                                {
                                    setTimeout(function() 
                                    {
                                        try 
                                        {
                                            window.SLIDECART_OPEN();
                                            success = true;
                                        return success;
                                        } 
                                        catch (error) 
                                        {
                                            success = false;
                                            gfb.utility.debugConsole("Error while updating cart", error);
                                        }
                                    }, 500);
                                }
                        
                        
                                if (typeof Shopify !== "undefined" && typeof Shopify.theme !== "undefined" && typeof Shopify.theme.jsAjaxCart !== "undefined" && typeof Shopify.theme.jsAjaxCart.updateView === "function") 
                                {
                                    try 
                                    {
                                        Shopify.theme.jsAjaxCart.updateView();
                                        success = true;
                                        return success;
                                    } 
                                    catch (error) 
                                    {
                                        success = false;
                                        gfb.utility.debugConsole("Error while updating cart", error);
                                    }
                                }
                        
                        
                                if (typeof window.theme !== "undefined" && typeof window.theme.MiniCart !== "undefined" && typeof window.theme.MiniCart.update === "function") 
                                {
                                    try 
                                    {
                                        theme.MiniCart.update();
                                        success = true;
                                        return success;
                                    } 
                                    catch (error) 
                                    {
                                        success = false;
                                        gfb.utility.debugConsole("Error while updating cart", error);
                                    }
                                }
                        
                        
                                if (typeof window.openCart !== "undefined" && typeof window.monster_setCartItems !== "undefined") 
                                {
                                    try 
                                    {
                                        window.openCart();
                                        window.monster_setCartItems(cartData.items);
                                        success = true;
                                        return success;
                                    } 
                                    catch (error) 
                                    {
                                        success = false;
                                        console.error(error);
                                    }
                                }
                        
                        
                                if (typeof window.Shopify !== "undefined" && typeof window.Shopify.onCartUpdate === "function") 
                                {
                                    try 
                                    {
                                        window.Shopify.onCartUpdate();
                                        if (Shopify.onCartUpdate.toString().indexOf('There are now') === -1) 
                                        {
                                            window.Shopify.onCartUpdate(cartData, true);
                                            success = true;
                                        return success;
                                        }
                                    } 
                                    catch (error) 
                                    {
                                        success = false;
                                        console.error(error);
                                    }
                                }
                        
                        
                                if (typeof slate !== 'undefined' && typeof slate.cart !== 'undefined' && typeof slate.cart.updateCart == 'function') 
                                {
                                    try 
                                    {
                                        slate.cart.updateCart();
                                        success = true;
                                        return success;
                                    } 
                                    catch (error) 
                                    {
                                        success = false;
                                        console.error(error);
                                    }
                                }
                        
                        
                                if (typeof Shopify !== 'undefined' && typeof Shopify.updateQuickCart !== 'undefined') 
                                {
                                    try 
                                    {
                                        Shopify.updateQuickCart(cartData);
                                        success = true;
                                        return success;
                                    } 
                                    catch (error) 
                                    {
                                        success = false;
                                        console.error(error);
                                    }
                                }
                        
                        
                                if (typeof bcActionList !== 'undefined' && typeof bcActionList.atcBuildMiniCartSlideTemplate === 'function') 
                                {
                                    try 
                                    {
                                        bcActionList.atcBuildMiniCartSlideTemplate(cartData);
                                        if (typeof openMiniCart === 'function') 
                                        {
                                            openMiniCart();
                                            success = true;
                                        return success;
                                        }
                                    } 
                                    catch (error) 
                                    {
                                        success = false;
                                        console.error(error);
                                    }
                                }
                        
                        
                                if (typeof window.SATCB !== 'undefined' && typeof window.SATCB.Helpers !== 'undefined' && typeof window.SATCB.Helpers.openCartSlider === 'function') 
                                {
                                    try 
                                    {
                                        setTimeout(function() 
                                        {
                                            window.SATCB.Helpers.openCartSlider();
                                        }, 500);
                                        success = true;
                                        return success;
                                    } 
                                    catch (error) 
                                    {
                                        success = false;
                                        console.error(error);
                                    }
                                }
                        
                        
                                if (typeof Shopify !== 'undefined' && typeof Shopify.updateCartInfo !== 'undefined' && document.querySelectorAll('.top-cart-holder .cart-target form .cart-info .cart-content').length > 0) 
                                {
                                    try 
                                    {
                                        Shopify.updateCartInfo(cartData, '.top-cart-holder .cart-target form .cart-info .cart-content');
                                        success = true;
                                        return success;
                                    } 
                                    catch (error) 
                                    {
                                        success = false;
                                        console.error(error);
                                    }
                                }
                        
                        
                                try 
                                {
                                    let event = new CustomEvent("wetheme-toggle-right-drawer", 
                                    {
                                        detail: 
                                        {
                                            type: 'cart',
                                            forceOpen: undefined,
                                            params: 
                                            {
                                                cart: cartData
                                            },
                                        },
                                    });
                                    document.documentElement.dispatchEvent(event);
                                } 
                                catch (error) 
                                {
                                    success = false;
                                    console.error(error);
                                }
                        
                        
                                if (typeof window.vndHlp !== 'undefined' && typeof window.vndHlp.refreshCart === 'function') 
                                {
                                    try 
                                    {
                                        window.vndHlp.refreshCart(cartData);
                                        success = true;
                                        return success;
                                    } 
                                    catch (error) 
                                    {
                                        success = false;
                                        console.error(error);
                                    }
                                }
                        
                        
                                if (typeof window.renderCart === 'function') 
                                {
                                    try 
                                    {
                                        window.renderCart(cartData);
                                        if (cartData.items.length > 0) 
                                        {
                                            let cart = document.querySelector('.mini-cart.is-empty');
                                            if (cart !== null) 
                                            {
                                                cart.classList.remove('is-empty');
                                            }
                                        }
                                        success = true;
                                        return success;
                                    } 
                                    catch (error) 
                                    {
                                        success = false;
                                        console.error(error);
                                    }
                                }
                        
                        
                                try 
                                {
                                    document.dispatchEvent(new CustomEvent('theme:cart:change', 
                                    {
                                        detail: 
                                        {
                                            cart: cartData,
                                            cartCount: cartData.item_count
                                        },
                                        bubbles: true
                                    }))
                                } 
                                catch (error) 
                                {
                                    success = false;
                                    console.error(error);
                                }
                        
                        
                                if (typeof window.cartStore !== 'undefined' && typeof window.cartStore.setState === 'function') 
                                {
                                    try 
                                    {
                                        window.cartStore.setState(
                                        {
                                            justAdded: {},
                                            popupActive: true,
                                            item_count: cartData.item_count,
                                            items: cartData.items,
                                            cart: cartData
                                        });
                                        success = true;
                                        return success;
                                    } 
                                    catch (error) 
                                    {
                                        success = false;
                                        console.error(error);
                                    }
                                }
                        
                        
                                if (typeof theme !== 'undefined' && typeof theme.Cart !== 'undefined' && typeof theme.Cart.setCurrentData === 'function') 
                                {
                                    try 
                                    {
                                        theme.Cart.setCurrentData(cartData);
                                        success = true;
                                        return success;
                                    } 
                                    catch (error) 
                                    {
                                        success = false;
                                        console.error(error);
                                    }
                                }
                        
                        
                                if (typeof window.halo !== 'undefined' && typeof window.halo.updateSidebarCart === 'function') 
                                {
                                    try 
                                    {
                                        window.halo.updateSidebarCart(cartData);
                                        let sideBarCartIcon = document.querySelector('[cartData-cart-sidebar]');
                                        if (sideBarCartIcon !== null) 
                                        {
                                            sideBarCartIcon.click();
                                        }
                                        success = true;
                                        return success;
                                    } 
                                    catch (error) 
                                    {
                                        success = false;
                                        console.error(error);
                                    }
                                }
                        
                        
                                if (typeof window.Shopify !== 'undefined' && typeof window.Shopify.theme !== 'undefined' && typeof window.Shopify.theme.ajaxCart !== 'undefined' && typeof window.Shopify.theme.ajaxCart.updateView === 'function') 
                                {
                                    try 
                                    {
                                        Shopify.theme.ajaxCart.updateView(
                                        {
                                            cart_url: '/cart'
                                        }, cartData);
                                        success = true;
                                        return success;
                                    } 
                                    catch (error) 
                                    {
                                        success = false;
                                        console.error(error);
                                    }
                                }
                        
                        
                                if (typeof window.theme !== 'undefined' && typeof window.theme.cart !== 'undefined' && typeof window.theme.cart.updateAllHtml === 'function') 
                                {
                                    try 
                                    {
                                        window.theme.cart.updateAllHtml();
                                        window.theme.cart.updateTotals(cartData);
                                        document.querySelector('.header--cart-toggle').click();
                                        success = true;
                                        return success;
                                    }
                                    catch (error) 
                                    {
                                        success = false;
                                        console.error(error);
                                    }
                                }
                        
                        
                                if (typeof monster_setCartItems === 'function') 
                                {
                                    try 
                                    {
                                        monster_setCartItems(cartData.items);
                                        success = true;
                                        return success;
                                    } 
                                    catch (error) 
                                    {
                                        success = false;
                                        console.error(error);
                                    }
                                }
                        
                        
                                if (typeof window.refreshCartContents !== 'undefined') 
                                {
                                    try 
                                    {
                                        window.refreshCartContents(cartData);
                                        success = true;
                                        return success;
                                    }
                                    catch (error) 
                                    {
                                        success = false;
                                        console.error(error);
                                    }
                                }
                        
                        
                                try 
                                {
                                    let miniCartOuterbox = document.querySelector('.minicart__outerbox');
                                    if (miniCartOuterbox !== null && typeof window.cartContentUpdate === 'function') 
                                    {
                                        sectionsToRender = miniCartOuterbox.dataset.section;
                                        fetch('/cart?sections=' + sectionsToRender, 
                                        {
                                            method: 'GET',
                                            cache: 'no-cache',
                                            credentials: 'same-origin',
                                            headers: 
                                            {
                                                'Content-Type': 'application/json'
                                            }
                                        }).then(function(sectionsData) 
                                        {
                                            try 
                                            {
                                                return sectionsData.clone().json().then(function(p) 
                                                {
                                                    cartData.sections = p;
                                                    window.cartContentUpdate(cartData, miniCartOuterbox, sectionsToRender);
                                                });
                                                success = true;
                                        return success;
                                            } 
                                            catch (e) 
                                            {
                                                success = false;
                                                console.error(e);
                                            }
                                        });
                                    }
                                } 
                                catch (error) 
                                {
                                    success = false;
                                    console.error(error);
                                }
                        
                        
                                if (document.querySelectorAll('.sp-cart .sp-dropdown-toggle').length > 0 && typeof Shopify !== 'undefined' && typeof Shopify.getCart === 'function') 
                                {
                                    try 
                                    {
                                        Shopify.getCart();
                                        success = true;
                                        return success;
                                    } 
                                    catch (error) 
                                    {
                                        success = false;
                                        console.error(error);
                                    }
                                }
                                
                        
                                try 
                                {
                                    let cartDrawerForm = document.querySelector('form.cart-drawer');
                                    if (cartDrawerForm !== null) 
                                    {
                                        let cartDrawerInputs = document.querySelectorAll('.cart-drawer input');
                                        if (cartDrawerInputs.length > 0) 
                                        {
                                            cartDrawerInputs[0].dispatchEvent(new Event('blur'));
                                            setTimeout(function() 
                                            {
                                                cartDrawerInputs[0].dispatchEvent(new Event('input'));
                                            }, 350);
                                            success = true;
                                        return success;
                                        }
                                    }
                                } 
                                catch (error) 
                                {
                                    success = false;
                                    console.error(error);
                                }
                        
                        
                                try 
                                {
                                    let cartDrawer = document.querySelector('m-cart-drawer');
                                    if (cartDrawer !== null && typeof cartDrawer.onCartDrawerUpdate === 'function') 
                                    {
                                        cartDrawer.onCartDrawerUpdate();
                                        if (typeof cartDrawer.open === 'function') 
                                        {
                                            cartDrawer.open();
                                        }
                                        success = true;
                                        return success;
                                    }
                                } 
                                catch (error) 
                                {
                                    success = false;
                                    console.error(error);
                                }
                        
                        
                                let siteCart = document.getElementById('site-cart');
                                if (siteCart !== null) 
                                {
                                    try 
                                    {
                                        siteCart.show();
                                        success = true;
                                        return success;
                                    }
                                    catch (error) 
                                    {
                                        success = false;
                                        console.error(error);
                                    }
                                }
                        
                        
                                if (typeof window.CD_REFRESHCART !== 'undefined') 
                                {
                                    try 
                                    {
                                        window.CD_REFRESHCART();
                                        success = true;
                                        return success;
                                    }
                                    catch (error) 
                                    {
                                        success = false;
                                        console.error(error);
                                    }
                                }
                        
                        
                                if (typeof window.CD_OPENCART !== 'undefined') 
                                {
                                    setTimeout(function() 
                                    {
                                        try 
                                        {
                                            window.CD_OPENCART();
                                            success = true;
                                        return success;
                                        } 
                                        catch (error) 
                                        {
                                            success = false;
                                            console.error(error);
                                        }
                                    }, 500);
                                }
                        
                        
                                if (typeof window.buildCart === 'function') 
                                {
                                    try 
                                    {
                                        window.buildCart();
                                        success = true;
                                        return success;
                                    }
                                    catch (error) 
                                    {
                                        success = false;
                                        console.error(error);
                                    }
                                }
                        
                        
                                if (typeof window.PXUTheme !== 'undefined' && typeof window.PXUTheme.jsAjaxCart !== 'undefined' && typeof window.PXUTheme.jsAjaxCart.updateView === 'function') 
                                {
                                    try 
                                    {
                                        window.PXUTheme.jsAjaxCart.updateView();
                                        success = true;
                                        return success;
                                    }
                                    catch (error) 
                                    {
                                        success = false;
                                        console.error(error);
                                    }
                                }
                        
                        
                                if (typeof window.theme !== 'undefined' && typeof window.theme.addedToCartHandler === 'function') 
                                {
                                    try 
                                    {
                                        window.theme.addedToCartHandler(cartData);
                                        success = true;
                                        return success;
                                    }
                                    catch (error) 
                                    {
                                        //success = false;
                                        console.error(error);
                                    }
                                }
                        
                        
                                try 
                                {
                                    let event = new Event('tcustomizer-event-cart-change');
                                    document.dispatchEvent(event);
                                }
                                catch (error) 
                                {
                                    success = false;
                                    console.error(error);
                                }
                        
                        
                        
                                try 
                                {
                                    let event = new CustomEvent('apps:product-added-to-cart');
                                    document.dispatchEvent(event);
                                }
                                catch (error) 
                                {
                                    success = false;
                                    console.error(error);
                                }
                        
                        
                                try 
                                {
                                    document.dispatchEvent(new CustomEvent("cart:refresh:opend"));
                                }
                                catch (error) 
                                {
                                    success = false;
                                    console.error(error);
                                }
                        
                        
                                try 
                                {
                                    document.dispatchEvent(new CustomEvent('dispatch:cart-drawer:refresh', 
                                    {
                                        bubbles: true
                                    }));
                                    setTimeout(function() 
                                    {
                                        document.dispatchEvent(new CustomEvent('dispatch:cart-drawer:open'));
                                    }, 500);
                                } 
                                catch (error) 
                                {
                                    success = false;
                                    console.error(error);
                                }
                        
                        
                                if (typeof window.theme !== 'undefined' && typeof window.theme.updateCartSummaries === 'function') 
                                {
                                    try 
                                    {
                                        window.theme.updateCartSummaries();
                                        success = true;
                                        return success;
                                    }
                                    catch (error) 
                                    {
                                        success = false;
                                        console.error(error);
                                    }
                                }
                        
                        
                                try 
                                {
                                  let cartNotification = document.querySelector("cart-notification") || document.querySelector("cart-drawer");
                                  if (cartNotification && typeof cartNotification.renderContents === "function") {
                                      const sectionsResponse = await fetch("/cart?sections=cart-notification-product,cart-notification-button,cart-icon-bubble,cart-drawer,cart-notification-content", {
                                        method: "GET",
                                        cache: "no-cache",
                                        credentials: "same-origin",
                                        headers: { "Content-Type": "application/json" }
                                      });
                                      const sectionsData = await sectionsResponse.json();
                              
                                      if (cartData && cartData.item_count) {
                                        let renderData = {
                                          sections: sectionsData,
                                          key: cartData.items[0] && cartData.items[0].key
                                        };
                                        cartNotification.renderContents(renderData);
                                      } else {
                                        const cartCountBubble = document.querySelector(".cart-count-bubble");
                                        if (cartCountBubble) cartCountBubble.remove();
                                      }
                              
                                      let cartDrawerElement = document.querySelector("cart-drawer");
                                      if (cartDrawerElement && cartDrawerElement.classList.contains('is-empty') && cartData.items.length != 0) {
                                        cartDrawerElement.classList.remove('is-empty');
                                      }
                                      success = true;
                                      return success;
                                      console.log("Case 1 executed");
                                      return "REFRESH";
                                  }
                                }
                                catch (error) 
                                {
                                    success = false;
                                    console.error(error);
                                }
                        
                        
                                try 
                                {
                                    window.dispatchEvent(new Event("update_cart"));
                                } 
                                catch (error) 
                                {
                                    success = false;
                                    gfb.utility.debugConsole("Error while updating cart", error);
                                }
                        
                                try 
                                {
                                    let kaktusc = document.querySelector("#kaktusc-app");
                                    let icon_buble = document.querySelector("#cart-icon-bubble");
                                    if (kaktusc !== null) 
                                    {
                                        if (icon_buble !== null) icon_buble.click();
                                    }
                                }
                                catch (error) 
                                {
                                    success = false;
                                    gfb.utility.debugConsole("Error while updating cart", error);
                                }
                        
                                return success;
    
        // If no case matches or executes successfully
        console.error("No matching cart update method found or executed successfully");
        return false;
      } catch (error) {
        gfb.utility.debugError("error in handleSkaiLamaSideCartUpdate. ", error);
        return false;
      }
    },
    updateCartState: async function(t, e, r) {
      //t is card data
      //e is even
      //refresh the cart 

      const createdAtDate = new Date(gfb.settings.merchantInfo.createdAt);
      const october15 = new Date('2024-10-15');
      
      if (createdAtDate > october15) {
        let slCartUpdateResult = await gfb.f.handleSkaiLamaSideCartUpdate();
        if (slCartUpdateResult) {
          return slCartUpdateResult;
        }
      }

      async function refreshThePage(t, e) {
          
      }
      var n = this;
      var i = window.Shopify && window.Shopify.routes ? window.Shopify.routes.root : "/";
      if ("/cart" === window.location.pathname || window.location.pathname === i + "cart") {
        await refreshThePage(t, e);
      }


      //type check the function
      function hn(t) {
          return hn = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
              return typeof t
          } : function(t) {
              return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t
          }, hn(t)
      }

      

      function f(message) {
        gfb.utility.debugConsole(message);
      }
      function z(message) {
        gfb.utility.debugConsole("z-function-", message);
      }

      try {
          var o, a, c, d, u, l, p, s, m, g, h, y;
          if (window.HsCartDrawer && "function" == typeof window.HsCartDrawer.updateSlideCart && document.querySelector(".hs-site-cart-popup-layout, .hs-header-layout")) return window.HsCartDrawer.updateSlideCart(), !1;
          if (!window.ignoreRebuyDrawer && window.Rebuy && "object" === hn(window.Rebuy.Cart) && "function" == typeof window.Rebuy.Cart.fetchCart && document.querySelector("#rebuy-cart")) return window.Rebuy.Cart.fetchCart(), f("Update drawer Rebuy"), !1;
          if (window.SATCB && "object" === hn(window.SATCB.Widgets) && "object" === hn(window.SATCB.Widgets.CartSlider) && "function" == typeof window.SATCB.Widgets.CartSlider.openSlider && document.querySelector(".satcb-cs")) return window.SATCB.Widgets.CartSlider.openSlider(), f("Update drawer SATCB"), !1;
          
          if (t && "function" == typeof window.SLIDECART_SET_CART && document.querySelector("#slidecarthq div")) return window.SLIDECART_SET_CART(t), f("Update drawer SLIDECART_SET_CART"), !1;
          
          if ("function" == typeof window.SLIDECART_UPDATE && document.querySelector("#slidecarthq div")) return window.SLIDECART_UPDATE(), f("Update drawer SLIDECART_UPDATE"), !1;
          if (window.sellify && "object" === hn(window.sellify.ucd) && "object" === hn(window.sellify.ucd.helpers) && "object" === hn(window.sellify.ucd.helpers.ShopifyAPI) && "function" == typeof window.sellify.ucd.helpers.ShopifyAPI.getCart && document.querySelector("#sellify-ucd-cart-drawer")) return window.sellify.ucd.helpers.ShopifyAPI.getCart(window.sellify.ucd.helpers.ajaxCart.buildCart), f("Update drawer sellify"), !1;
          if ("function" == typeof window.upcartRegisterAddToCart && document.querySelector(".upcart-product-item")) return window.upcartRegisterAddToCart(), f("Update drawer upcart app - upcartRegisterAddToCart"), !1;
          
          var w = window.csapps ? document.querySelector("[data-csapp_line_wrapper] .cart-quantity-wrap input[data-id]:not([readonly])") : null;
          if (w) return t && t.item_count ? (w.dispatchEvent(new Event("change", { bubbles: !0 })), f("Update drawer aiod cart app"), !1) : (f("Update drawer aiod cart app - empty cart = refresh"), refreshThePage(t, e));
          
          if ("function" == typeof window.CD_REFRESHCART && document.querySelector("#cart-drawer-app .cd-cart")) return window.CD_REFRESHCART(), f("Update drawer CD_REFRESHCART"), !1;
          if ("function" == typeof window.BoostPFS && "object" === hn(window.BoostPFS.Utils) && document.querySelector(".boost-pfs-minicart-wrapper")) return f("Update drawer not supported for BoostPFS drawer. Refresh!"), refreshThePage(t, e);
          if ("function" == typeof window.openeamcart && document.querySelector("#shopify-section-eam-cart")) return window.openeamcart(), f("Update drawer openeamcart"), !1;
          if (t && void 0 !== window.vndHlp && "function" == typeof window.vndHlp.refreshCart) return window.vndHlp.refreshCart(t), f("Update drawer vndHlp.refreshCart"), !1;
          
          if (t && window.Cart && "function" == typeof window.Cart.buildCart) return window.Cart.buildCart(t), f("Update drawer Cart.buildCart"), !1;
          if (t && "function" == typeof window.buildCart && document.querySelector("#mini__cart.yv_side_drawer_wrapper")) return window.buildCart(t), f("Update drawer window.buildCart"), !1;
          if (window.cartNotification && "function" == typeof window.cartNotification.getCart && document.querySelector("#cart-notification")) return window.cartNotification.getCart(), f("Update drawer cartNotification"), !1;
          if ("function" == typeof window.do_cart_refresh) return window.do_cart_refresh(!1), f("Update drawer do_cart_refresh"), !1;
          if (window.theme && "function" == typeof window.theme.CartDrawer && window.theme.CartDrawer.toString().includes("new theme.Drawers")) return setTimeout((function() {return new window.theme.CartDrawer}), 250), f("Update drawer theme CartDrawer"), !1;
          if (null !== (o = window.theme) && void 0 !== o && null !== (a = o.settings) && void 0 !== a && a.cart_drawer && document.querySelector("#Cart-Drawer")) {
              if (!t || !t.item_count) return f("Update drawer #Cart-Drawer no items need to refresh"), refreshThePage(t, e);
              var v = document.createElement("input");
              return v.style.display = "none", v.classList.add("qty"), v.dataset.index = "1", v.value = t.items[0].quantity, document.querySelector("#CartDrawerItem-1").appendChild(v), v.dispatchEvent(new Event("change", {
                  bubbles: !0
              })), f("Update drawer #Cart-Drawer"), !1
          }
          if (window.Shopify && window.Shopify.theme && ("Expanse" === window.Shopify.theme.name || 902 === window.Shopify.theme.theme_store_id) && document.querySelector("#HeaderCart.site-header__drawer")) return document.dispatchEvent(new Event("cart:build")), f("Update drawer cart:build"), !1;
          if (t && "function" == typeof window.refreshCart) return window.refreshCart(t), f("Update drawer window.refreshCart"), !1;
          if ("undefined" != typeof slate && void 0 !== slate.cart && "function" == typeof slate.cart.updateCart) return slate.cart.updateCart(), f("Update drawer slate.cart.updateCart"), !1;
          if (t && "undefined" != typeof Shopify && "function" == typeof Shopify.updateQuickCart) return Shopify.updateQuickCart(t), f("Update drawer Shopify.updateQuickCart"), !1;
          if (t && void 0 !== window.bcActionList && "function" == typeof window.bcActionList.atcBuildMiniCartSlideTemplate) return window.bcActionList.atcBuildMiniCartSlideTemplate(t), "function" == typeof window.openMiniCart && window.openMiniCart(), f("Update drawer bcActionList"), !1;
          if (t && "undefined" != typeof Shopify && void 0 !== Shopify.updateCartInfo && document.querySelector(".top-cart-holder .cart-target form .cart-info .cart-content")) return Shopify.updateCartInfo(t, ".top-cart-holder .cart-target form .cart-info .cart-content"), f("Update drawer Shopify.updateCartInfo"), !1;
          if (t && "undefined" != typeof Shopify && void 0 !== Shopify.updateCartInfo && document.querySelector("#cart-info #cart-content")) return Shopify.updateCartInfo(t, "#cart-info #cart-content"), f("Update drawer Shopify.updateCartInfo, selector 2"), !1;
          if (window.theme && "object" === hn(window.theme.cart) && "function" == typeof window.theme.cart._updateCart && "function" == typeof window.$) return window.theme.cart._updateCart({}), window.$("body").trigger("updateCart"), document.dispatchEvent(new Event("cart:build")), f("Update drawer cart:build + updateCart"), !1;
          if (window.theme && "function" == typeof window.theme.refreshCart) return window.theme.refreshCart(), f("Update drawer theme.refreshCart"), !1;
          if (document.querySelector("#sidebar-cart.Drawer form.Cart.Drawer__Content")) return setTimeout((function() {
              var t = new Event("product:added");
              t.detail = {}, t.detail.quantity = 0, document.dispatchEvent(t)
          }), 250), setTimeout((function() {
              document.documentElement.dispatchEvent(new Event("cart:refresh"))
          }), 500), f("Update drawer BOOMR product:added / cart:refresh"), !1;
          if ("function" == typeof window.updateQtyCart && "function" == typeof window.$ && document.querySelector("#sidebar-cart.cart-drawer .cart-content[data-cart-content]")) return fetch("/cart?view=drawer&timestamp=" + Date.now(), {
              credentials: "same-origin",
              method: "GET"
          }).then((function(t) {
              t.text().then((function(t) {
                  $("[data-cart-content]").html(t)
              }))
          })), f("Update drawer #sidebar-cart.cart-drawer"), !1;
          if (document.querySelector("form#mini-cart .mini-cart__content .mini-cart__line-item")) return setTimeout((function() {
              return document.documentElement.dispatchEvent(new Event("cart:refresh"))
          }), 500), f("Update drawer custom cart-drawer elem form#mini-cart"), !1;
          var b = z("shopify_cart_state");
          if (t && b && document.querySelector("form.cart-drawer")) {
              J("shopify_cart_state", JSON.stringify(t));
              var S = new Event("storage");
              return S.key = "shopify_cart_state", window.dispatchEvent(S), f("Update drawer BOOMR shopify_cart_state"), !1
          }
          if (document.querySelector(["#ajaxifyModal #ajaxifyCart", "#ajaxifyDrawer #ajaxifyCart", ".fixed-cart-wrap #slidedown-cart", ".sidebar-drawer-container .sidebar-drawer"].join(","))) return t && t.item_count ? window.forceUpdateModalCart ? (f("Update drawer using custom forceUpdateModalCart"), window.forceUpdateModalCart(), !1) : (gfg.utility.debugConsole("All-in-One Free Gift on Cart: forceUpdateModalCart not set, but was expected."), refreshThePage(t, e)) : (gfg.utility.debugConsole("All-in-One Free Gift on Cart: forceUpdateModalCart reload due to empty cart."), refreshThePage(t, e));
          if (window.theme && "object" === hn(window.theme.Cart) && "function" == typeof window.theme.Cart.updateCart) return window.theme.Cart.updateCart(), f("Update drawer Cart updateCart"), !1;
          if (t && "function" == typeof window.render_cart_drawer && window.render_cart_drawer.toString().includes("render_cart_drawer(cart, target, oldQtd, id_variant)")) return window.render_cart_drawer(t, jQuery(".list-products"), 0, ""), f("Update drawer render_cart_drawer"), !1;
          if (window.cart && "function" == typeof window.cart.getCart && "function" == typeof window.cart.closeCartDropdown && "function" == typeof window.cart.openCartDropdown && document.getElementById("cart-dropdown")) return window.cart.getCart(), f("Update drawer cart.getCart, #cart-dropdown"), !1;
          if (window.cart && "function" == typeof window.cart.getCart && document.querySelector(".cart-drawer")) return window.cart.getCart(), f("Update drawer cart.getCart, .cart-drawer"), !1;
          if (window.ajaxCart && "function" == typeof window.ajaxCart.load) return window.ajaxCart.load(), f("Update drawer ajaxCart load"), !1;
          if (window.Shopify && "object" === hn(window.Shopify.theme) && "object" === hn(window.Shopify.theme.jsAjaxCart) && "function" == typeof window.Shopify.theme.jsAjaxCart.updateView) return window.Shopify.theme.jsAjaxCart.updateView(), f("Update drawer jsAjaxCart updateView"), !1;
          if (window.Shopify && "object" === hn(window.Shopify.theme) && "object" === hn(window.Shopify.theme.ajaxCart) && "function" == typeof window.Shopify.theme.ajaxCart.init && document.querySelector(".js-mini-cart-trigger")) return document.querySelector(".js-mini-cart-trigger").dispatchEvent(new Event("click")), f("Update drawer js-mini-cart-trigger"), !1;
          if (window.theme && "object" === hn(window.theme.ajaxCart) && "function" == typeof window.theme.ajaxCart.update && document.querySelector("#CartDrawer.drawer")) return window.theme.ajaxCart.update(), f("Update drawer theme.ajaxCart.update"), !1;
          if (window.Shopify && "function" == typeof window.Shopify.addItem && "function" == typeof window.jQuery && document.querySelector(".cart-flyout .cart-flyout__content")) return jQuery.get("/cart?view=json", (function(t) {
              jQuery(".cart-flyout").html(t)
          })), f("Update drawer g-addtoicart cart-flyout"), !1;
          if (t && window.wetheme && "function" == typeof window.wetheme.toggleRightDrawer) return window.wetheme.toggleRightDrawer("cart", !0, {
              cart: t
          }), f("Update drawer toggleRightDrawer"), !1;
          if (window.gfTheme && "function" == typeof window.gfTheme.getCart) return window.gfTheme.getCart((function() {})), f("Update drawer gfTheme"), !1;
          if (t && z("cartCurrentData") && document.querySelector(".popup__body .js-popup-cart-ajax")) return J("cartCurrentData", JSON.stringify(t)), setTimeout((function() {
              return J("cartCurrentData", JSON.stringify(t))
          }), 100), setTimeout((function() {
              return J("cartCurrentData", JSON.stringify(t))
          }), 1e3), f("Update drawer cartCurrentData in local storage"), !1;
          if (document.querySelector("cart-drawer#mini-cart form#mini-cart-form, #shopify-section-mini-cart cart-drawer#mini-cart")) return t && t.item_count ? (setTimeout((function() {
              return document.documentElement.dispatchEvent(new Event("cart:refresh"))
          }), 750), f("Update drawer custom cart-drawer elem"), !1) : (f("When cart is empty custom cart-drawer elem's event may not work. Refresh!"), refreshThePage(t, e));
          if (window.CartJS && "function" == typeof window.CartJS.getCart && document.querySelector("#cart-drawer,#cartDrawer")) return setTimeout((function() {
              return window.CartJS.getCart(null)
          }), 500), f("Update drawer CartJS getCart"), !1;
          if ("function" == typeof window.update_cart && document.querySelector("#custom-drawer-cart")) return window.update_cart(), f("Update drawer custom-drawer-cart"), !1;
          if (window.fcsb && "function" == typeof window.fcsb.fetchCart && document.querySelector("#sticky-app-client") && document.querySelector('#sticky-app-client [data-cl="mini-cart"]')) return window.fcsb.fetchCart(), f("Update drawer fcsb"), !1;
          if (window.theme && "function" == typeof window.theme.updateCartSummaries) return window.theme.updateCartSummaries(), f("Update drawer theme.updateCartSummaries"), !1;
          if (window.BT && "function" == typeof window.BT.updateHeaderCartHtml) return window.BT.updateHeaderCartHtml(!0), f("Update drawer BT.updateHeaderCartHtml"), !1;
          if (window.geckoShopify && "function" == typeof window.geckoShopify.GetCartData) return document.querySelectorAll(".jsccount").forEach((function(t) {
              return t.innerHTML = ""
          })), window.geckoShopify.GetCartData(1, 1), f("Update drawer geckoShopify.GetCartData"), !1;
          if (window.theme && "object" === hn(window.theme.classes) && "function" == typeof window.theme.classes.CoreCart && document.querySelector('[data-view="cart"] .cart--root')) return document.querySelector('[data-view="cart"] .cart--root').dispatchEvent(new Event("update-html")), f("Update drawer cart--root"), !1;
          if (window.theme && "function" == typeof window.theme.cart && "function" == typeof window.theme.cart.updateTotals && "function" == typeof(null === (c = document.querySelector('[data-view="cart"] .cart--root')) || void 0 === c ? void 0 : c.updateHtml)) return t && t.item_count ? (document.querySelector('[data-view="cart"] .cart--root').updateHtml(), f("Update drawer cartRoot.updateHtml"), !1) : (f("When cart is empty cartRoot.updateHtml does not work. Refresh!"), refreshThePage(t, e));
          if (window.theme && "object" === hn(window.theme.classes) && "function" == typeof window.theme.classes.FrameworkCart && document.querySelector('.cart--root[data-js-class="Cart"]')) {
              var C = document.querySelector('.cart--root[data-js-class="Cart"]');
              return C.dispatchEvent(new Event("updateHtml", {
                  bubbles: !0
              })), C.dispatchEvent(new Event("update-html", {
                  bubbles: !0
              })), f("Update drawer cart--root updateHtml/update-html event"), !1
          }
          var q = window.CartDrawer ? document.querySelector("#shopify-section-cart-drawer cart-drawer cart-drawer-items, #CartDrawer.cart-drawer cart-drawer-items") : null;
          if (q && q.onChange) {
              if (t && t.items.length) {
                  var A = {
                      target: {
                          dataset: {
                              index: 1
                          },
                          value: t.items[0].quantity
                      }
                  };
                  return q.onChange(A), _("#CartDrawer-LineItemError-1 {display: none;}"), f('Update drawer customCartDrawerItems["onChange"]'), !1
              }
              return f('Update drawer customCartDrawerItems["onChange"] - no items, force refresh!'), refreshThePage(t, e)
          }
          var E = window.themeVariables ? document.querySelector("#shopify-section-cart-drawer cart-drawer, .shopify-section cart-drawer") : null;
          if (E && "function" == typeof E._onCartRefreshListener) return E._onCartRefreshListener(), f("Update drawer #shopify-section-cart-drawer cart-drawer"), !1;
          var P = window.theme && "object" === hn(window.theme.CartDrawerSection) ? document.querySelector(".cart-drawer-modal cart-form.cart-drawer") : null;
          if (P && "function" == typeof P.refresh) return P.refresh(), f("Update drawer .cart-drawer-modal cart-form.cart-drawer"), !1;
          var O = window.CartDrawer ? document.querySelector("#Drawer-Cart cart-drawer") : null;
          if (O && "function" == typeof O.updateCart) return O.updateCart(), f("Update drawer #Drawer-Cart cart-drawer updateCart"), !1;
          var k, T, x, j, D, L = window.Shopify && "function" == typeof window.Shopify.CountryProvinceSelector ? document.querySelector("#main-cart-items quantity-input .quantity__input:not([readonly])") : null;
          if (L && "object" === hn(L.parentElement.changeEvent)) {
              if (!t || !t.item_count) return f("Update drawer quantity-input .quantity__input - empty cart = refresh"), refreshThePage(t, e);
              for (var I = parseInt(L.getAttribute("data-index")), N = 0, R = 1; R <= t.items.length; R++) {
                  var G, M = null === (G = t.items[R - 1].handle) || void 0 === G ? void 0 : G.includes("docapp-free-gift");
                  if (M && R <= I && N++, !M && R < I && N--, !M && R >= I) break
              }
              return L.setAttribute("data-index", (I + N).toString()), L.dispatchEvent(L.parentElement.changeEvent), _("#main-cart-footer .cart-drawer__cart-error, mini-cart.cart-drawer .cart-item__error {display: none;}"), f("Update drawer quantity-input .quantity__input"), !1
          }
          if ("function" == typeof window.showCart && document.querySelector(".drawer .drawer_container")) return window.showCart(), f("Update drawer showCart"), !1;
          if (window.WAU && "object" === hn(window.WAU.AjaxCart) && "function" == typeof window.WAU.AjaxCart.init && "function" == typeof window.WAU.AjaxCart.showDrawer && document.querySelector('#slideout-ajax-cart[data-wau-slideout="ajax-cart"] #mini-cart') && document.querySelector(".js-mini-cart-trigger.js-slideout-open")) return window.WAU.AjaxCart.hideDrawer({
              cart_action: "drawer"
          }), setTimeout((function() {
              return document.querySelector(".js-mini-cart-trigger.js-slideout-open").dispatchEvent(new Event("click"))
          }), 400), f("Update drawer WAU - close + click"), !1;
          if ("function" == typeof window.fetchCart && document.querySelector(".cart-flyout .cart-drawer")) return window.fetchCart(), f("Update drawer fetchCart"), !1;
          if (window.elessiShopify && "function" == typeof window.elessiShopify.initAddToCart && document.querySelector(".cart__popup, .jas-mini-cart.jas-push-menu")) return t && t.item_count ? (window.elessiShopify.initAddToCart(), f("Update drawer elessiShopify.initAddToCart"), !1) : (f("Update drawer elessiShopify.initAddToCart - empty cart = refresh"), refreshThePage(t, e));
          if (window.Shopify && "object" === hn(window.Shopify.theme) && "object" === hn(window.Shopify.theme.sections) && "object" === hn(window.Shopify.theme.sections.registered) && "object" === hn(window.Shopify.theme.sections.registered.cart) && document.querySelector(".cart__drawer .drawer__body")) return document.dispatchEvent(new Event("theme:cart:reload")), f("Update drawer Pipeline theme:cart:reload"), !1;
          if ("function" == typeof window.$ && window.theme && "function" == typeof window.theme.cartUpdatePopup && "function" == typeof window.theme.cartUpdatePopupModel && document.querySelector("#CartDrawer")) return $("body").trigger("completeChangeItem.ajaxCart"), f("Update drawer completeChangeItem.ajaxCart"), !1;
          if (window.wetheme && "object" === hn(window.wetheme.cartDrawer) && "function" == typeof window.wetheme.cartDrawer.updateCartDrawer && document.querySelector("#cartSlideoutWrapper")) return window.wetheme.cartDrawer.updateCartDrawer(t), f("Update drawer updateCartDrawer"), !1;
          if (window.iopCart && "object" === hn(window.iopCart.api) && "function" == typeof window.iopCart.api.refreshCart && document.querySelector("#iop-cart-root")) return window.iopCart.api.refreshCart(), f("Update drawer iopCart"), !1;
          if (window.theme && "object" === hn(window.theme.AjaxCart) && "function" == typeof window.theme.AjaxCart.fetch && document.querySelector("#AjaxCartDrawer")) return window.theme.AjaxCart.fetch(), f("Update drawer theme.AjaxCart.fetch"), !1;
          if (window.theme && "function" == typeof window.theme.Cart && document.querySelector(".side-cart-popup [data-quantity-input]:not([readonly])")) return t && t.items.length ? (document.querySelector(".side-cart-popup [data-quantity-input]:not([readonly])").dispatchEvent(new Event("change", {
              bubbles: !0
          })), f("Update drawer side-cart-popup change event"), !1) : (f("Update drawer side-cart-popup change event - no items, force refresh!"), refreshThePage(t, e));
          if (window.theme && window.theme.dropdown && "function" == typeof window.theme.ajax_cart_dropdown && document.querySelector("#cart-dropdown")) return window.theme.ajax_cart_dropdown(), f("Update drawer ajax_cart_dropdown"), !1;
          if ("function" == typeof CartItems && document.querySelector("#drawer-cart")) return document.dispatchEvent(new Event("ajaxProduct:added")), f("Update drawer ajaxProduct:added"), _("#drawer-cart .cart-item__details .cart-item__error {display: none;}"), !1;
          if ("function" == typeof(null === (d = window.PXUTheme) || void 0 === d || null === (u = d.jsAjaxCart) || void 0 === u ? void 0 : u.updateView) && document.querySelector("#theme-ajax-cart")) return setTimeout((function() {
              return window.PXUTheme.jsAjaxCart.updateView()
          }), 250), f("Update drawer PXUTheme.jsAjaxCart.updateView"), !1;
          if ("function" == typeof(null === (l = window.ctzn_global) || void 0 === l ? void 0 : l.refreshCart) && document.querySelector("#cart-content")) return window.ctzn_global.refreshCart(), f("Update drawer ctzn_global.refreshCart"), !1;
          if ("object" === ("undefined" == typeof store ? "undefined" : hn(store)) && "function" == typeof(null === (p = store) || void 0 === p ? void 0 : p.getCart) && document.querySelector("#drawer-items")) return store.getCart(), f("Update drawer store.getCart"), !1;
          if (null !== (s = window.Avatar) && void 0 !== s && null !== (m = s.theme) && void 0 !== m && null !== (g = m.sections) && void 0 !== g && null !== (h = g.SliderCart) && void 0 !== h && null !== (y = h.instance) && void 0 !== y && y.refreshCartSlider && document.querySelector('[data-section-type="slider-cart"]')) return null === (k = window.Avatar) || void 0 === k || null === (T = k.theme) || void 0 === T || null === (x = T.sections) || void 0 === x || null === (j = x.SliderCart) || void 0 === j || null === (D = j.instance) || void 0 === D || D.refreshCartSlider(), f("Update drawer Avatar.theme"), !1;
          var H = "function" == typeof CartItems ? document.querySelector("mini-cart") : null;
          if (H) return t && t.item_count ? (H.onChange({
              target: {
                  dataset: {
                      index: 1
                  },
                  value: t.items[0].quantity
              }
          }), _("#MiniCart-Line-item-error-1 {display: none;}"), f("Update drawer athensThemeMiniCart"), !1) : (f("Update drawer athensThemeMiniCart - empty cart = refresh"), refreshThePage(t, e));
          var B = document.querySelector("sidebar-drawer#site-cart .cart-item input.qty:not([readonly])");
          if (B) return t && t.item_count ? (B.dispatchEvent(new Event("input", {
              bubbles: !0
          })), f("Update drawer sidebar-drawer#site-cart .cart-item .qty"), !1) : (f("Update drawer sidebar-drawer#site-cart .cart-item .qty - empty cart = refresh"), refreshThePage(t, e));
          var F = [".cart-drawer[data-cart-drawer] input.quantity:not([readonly])", "#dropdown-cart input.item-quantity:not([readonly])", ".halo-sidebar .previewCart input.quantity:not([readonly])", "form.mini-cart .mini-cart__content input.quantity-selector__value:not([readonly])", '#cart-modal-form-body .cart-modal-qty[type="text"]:not([readonly])', ".drawer .cart-drawer__content-container .cart__popup-qty--input:not([readonly])", ".side-cart-item input.quantity__input:not([readonly])", ".top-bar .cart-container .mini-cart__item input[data-cart-quantity-input]:not([readonly])", "#t4s-mini_cart .t4s-mini_cart__item input[data-action-change]:not([readonly])"],
              W = document.querySelector(F.join(","));
          if (t && W) return t.item_count ? (setTimeout((function() {
              var r = document.querySelector(F.join(","));
              if (!r) return f("Update drawer failed due to missing element after timeout. Force refresh!"), n.refreshThePage(t, e);
              var i = r.getAttribute("docapp-data-protected"),
                  o = null;
              if (t.items.forEach((function(t, e) {
                      o || i && i.includes(t.variant_id) && (o = e + 1)
                  })), o) {
                  var a = r.getAttribute("data-line");
                  U(a) && a < 1e3 && r.setAttribute("data-line", o);
                  var c = r.getAttribute("data-line-id");
                  U(c) && c < 1e3 && r.setAttribute("data-line-id", o);
                  var d = r.getAttribute("data-product_id");
                  U(d) && d < 1e3 && r.setAttribute("data-product_id", o);
                  var u = r.closest("[data-line-item-id]");
                  if (u) {
                      var l = u.getAttribute("data-line-item-id");
                      U(l) && l < 1e3 && u.setAttribute("data-line-item-id", o)
                  }
                  var p = r.closest("[data-line]");
                  if (p) {
                    var s = p.getAttribute("data-line");
                    U(s) && s < 1e3 && p.setAttribute("data-line", o);
                  }
                  var m = r.closest("[data-cart-item][data-line-id]");
                  if (m) {
                      var _ = m.getAttribute("data-line-id");
                      U(_) && _ < 1e3 && m.setAttribute("data-line-id", o)
                  }
              }
              r.dispatchEvent(new Event("change", {
                  bubbles: !0
              }))
          }), 150), f("Update drawer cartModalQtyNonGiftChangeSelectors match pending..."), !1) : (f("Update drawer cartModalQtyNonGiftChangeSelectors - empty cart = refresh"), refreshThePage(t, e));
          if (window.freeGiftCartUpsellProAppDisableRefreshExceptOnCart) return f("Refresh disabled except on cart page. END"), !1;
          if (document.querySelector([".go-cart__drawer", ".ajax-cart__drawer.js-ajax-cart-drawer", "mini-cart.cart-drawer .mini-cart", ".halo-sidebar .previewCart", '.nt_mini_cart .mini_cart_items input[name="updates[]"]', ".widget_shopping_cart .mini_cart_item input.custom-qty", '.mini-products-list .item .qty-group input[name="updates[]"]', "#monster-upsell-cart", ".cart-flyout__inner .quick-cart__items .quick-cart__quantity", ".quick-cart__cart .quick-cart__item .quick-cart__qty", ".quick-cart__cart .quick-cart__item .quick-cart__button", "#shopify-section-quick-cart .quick-cart__items .quantity-input__input", ".flyout__content .cart-drawer", '#right-drawer-slot [x-data="ThemeModule_CartItems"] input[\\@change]', '[data-cart-row][data-cart-item-key] input[name="updates[]"][\\@change]', '#modals-rightDrawer [x-data="ThemeModule_CartItems"]', ".cart-mini[data-cart-mini] .cart-mini-sidebar"].join(","))) return f("Update drawer force refresh due to unsupported element"), refreshThePage(t, e);
          if (t && window.Shopify && "function" == typeof window.Shopify.onCartUpdate && !window.Shopify.onCartUpdate.toString().includes("{alert(")) return window.Shopify.onCartUpdate(t), f("Update drawer Shopify onCartUpdate"), !1;
          if (document.querySelector(["#cart-summary-overlay", ".cart-summary-overlay .cart-summary-overlay__actions a.to-cart", ".atc-banner--container[data-atc-banner]"].join(",")) || window.freeGiftCartUpsellProAppDisableRefreshExceptOnCart) return f("Update drawer not required due to found element/variable."), !1;
          var V = document.querySelector(".site-header__cart #CartCount");
          if (V) return t && (V.innerHTML = t.item_count), f("Update drawer not required on Simple."), !1;
          var K = document.querySelectorAll("cart-notification #cart-notification #cart-notification-button");
          if (K.length) return t && (K.forEach((function(e) {
              return e.innerHTML = e.innerHTML.replace(/\d+/, t.item_count)
          })), document.querySelectorAll(".cart-count-bubble span[aria-hidden]").forEach((function(e) {
              return e.innerHTML = t.item_count
          }))), f("Update drawer not required on Dawn."), !1
      } catch (t) {
        f("Update drawer - ERROR!!!"), gfg.utility.debugError("Attempted to update drawer cart, Error: ", t);
      }
      return f("Update drawer - no integration found."), refreshThePage(t, e);
    },
    checkIfCartItemIsPartOfValidCollectionList: (cartItem, validCollectionList) => {
      for (let i = 0; i < validCollectionList.length; i++) {
        const collection = validCollectionList[i];
        for (let j = 0; j < collection.productIds.length; j++) {
          const product = collection.productIds[j];
          if (product.productId == cartItem.product_id) {
            return true;
          }
        }
      }
      return false;
    },
    drivedSettings: function (tmpCartSettings) {
      let bundleLinkData = tmpCartSettings.bundleLinkData;
      let bundleLinkProductIdMap = new Map();
      let bundleLinkProductHandleMap = new Map();
      for (let i = 0; i < bundleLinkData.length; i++) {
        let bundleLink = bundleLinkData[i];
        if (bundleLink.productsForBundleLink && bundleLink.productsForBundleLink.length && bundleLink.productsForBundleLink.length > 0) {
          bundleLinkProductIdMap.set(parseInt(bundleLink.productsForBundleLink[0].productId), { productData: bundleLink.productsForBundleLink[0], bundleId: bundleLink.bundleId });
          bundleLinkProductHandleMap.set(bundleLink.productsForBundleLink[0].handle, { productData: bundleLink.productsForBundleLink[0], bundleId: bundleLink.bundleId });
        }
      }

      return {
        bundleLinkProductIdMap: bundleLinkProductIdMap,
        bundleLinkProductHandleMap: bundleLinkProductHandleMap,
      };
    },
    setSelectors: function () {
      let settings = gfb.settings;
      gfb.selectors = {
        addToCart: settings.app.addToCartBtnSelectors,
        checkoutBtn: settings.app.checkoutBtnSelectors,
        sideCartCheckoutBtn: settings.app.sideCartCheckoutBtnSelectors,
        sideCartSelectors: settings.app.sideCartSelectors,
        buyNowBtn: settings.app.buyNowBtn,
        cartForm: settings.app.cartForm,
        productPageWrapperV2: ".gfbProductPageWrapperV2",
        cartPageWrapperV2: ".gfbCartPageWrapperV2",
        quantityBtnSelectors: settings.app.quantityBtnSelectors,
        cartItemSelectors: settings.app.cartItemSelectors,
        cartItemRemoveSelectors: settings.app.cartItemRemoveSelectors,
        cartItemRemoveParentSelectors: settings.app.cartItemRemoveParentSelectors,
        customCartIntegrationScript: settings.app.customCartIntegrationScript,
        cartItemQuantityBtnSelectors: settings.app.cartItemQuantityBtnSelectors,
      };
    },
    setCustomStyling: function () {
      let customStyle = gfb.settings.app.customStyle;
      if (customStyle) {
        var styleSheet = document.createElement("style");
        styleSheet.innerText = customStyle;
        document.body.appendChild(styleSheet);
      }
    },
    setCustomScript: function () {
      try{
        let customScript = gfb.settings.app.customScript;
        if(customScript){
          eval(customScript);
        }
      }catch(error){
        gfb.utility.debugConsole("Error in setCustomScript: ", error);
      }
    },
    getPageType: function () {
      var pageType = "";
      if (window.location.pathname.includes("/cart") && !window.location.pathname.includes("/products")) {
        pageType = "cart";
      } else if (window.location.pathname.includes("/products")) {
        pageType = "product";
      } else if (window.location.pathname.includes("/collections")) {
        pageType = "COLLECTION";
      } else if (window.location.pathname.includes("/")) {
        pageType = "HOME";
      } else if ("undefined" != typeof Shopify && "undefined" != typeof Shopify.Checkout) {
        pageType = "CHECKOUT";
      } else {
        pageType = "PAGE_NOT_FOUND";
      }
      return pageType;
    },
    addPoweredByBlock: function (gfbFrequentBoughtWidgetsHTML) {
      try {
        let gfgPoweredByLabelBlock = document.createElement("div");
        gfgPoweredByLabelBlock.classList.add("gfbPoweredByLabelBlock");
        let htmlForPoweredByBlock = gfb.utility.renderPoweredByLabel();
        if(!htmlForPoweredByBlock){
            return
        }

        gfgPoweredByLabelBlock.append(gfb.utility.renderPoweredByLabel());

        // find instances of  gfgPageWrapper and then attach it on those elements
        let gfgPageWrapper = document.querySelectorAll(".gfbPageWrapper");
        gfgPageWrapper.forEach((wrapper) => {
          let volBundleWrapper = document.querySelector('.gfbVolumeDiscountWidgetWrapper')?.children;
          let volBundleWrapperFlagIsEmpty = true;
          if(volBundleWrapper && volBundleWrapper.length > 0){
            volBundleWrapperFlagIsEmpty = false;
          }

          let freqBoughtWrapper = wrapper.querySelector('.gfbFrequentBoughtWidgetOfferContainer')?.children;
          let freqBoughtWrapperFlagIsEmpty = true;
          if(freqBoughtWrapper && freqBoughtWrapper.length > 0){
            freqBoughtWrapperFlagIsEmpty = false;
          }
        
          if(volBundleWrapperFlagIsEmpty && freqBoughtWrapperFlagIsEmpty){
            // select gfgPoweredByLabelBlock from wrapper and remove it
            return;
          }

          let gfbWrapperExistingWrapperBlock = document.querySelector(".gfbPoweredByLabelBlock");

          if(!gfbWrapperExistingWrapperBlock || gfbWrapperExistingWrapperBlock?.length == 0){
            wrapper.append(gfgPoweredByLabelBlock.cloneNode(true));
          }
        
        });
 
      } catch (error) {
        gfb.utility.debugConsole("Error in addPoweredByBlock: ", error);
      }
    },
    getProductPageHandle: function () {
      if ("product" === gfb.state.page_type && window.shopifyLiquidValuesApp9Ext && window.shopifyLiquidValuesApp9Ext.product.handle) {
        // let pattern = /(?<=\\/products\\/)((?!\\?|\\$).)+/g
        // if(window && window.location && window.location.href){
        //     return window.location.href.match(pattern)[0]
        // }
        gfb.state.productPageHandle = shopifyLiquidValuesApp9Ext.product.handle;
        gfb.state.productId = shopifyLiquidValuesApp9Ext.product.productId;
        return shopifyLiquidValuesApp9Ext.product.handle;
      }
      let shopName = window.Shopify.shop;
      if(shopName == 'pikaon.myshopify.com'){
        const currentUrl = window.location.href;
        let lastSlug = currentUrl.split('/').filter(Boolean).pop();
        if(lastSlug){
          return lastSlug;
        }
        return undefined;
      }

      return "undefined";
    },
    getCollectionHandle: function () {
      if ("COLLECTION" === gfb.state.page_type && window.shopifyLiquidValuesApp9Ext && window.shopifyLiquidValuesApp9Ext.collection.handle) {
        // let pattern = /(?<=\\/products\\/)((?!\\?|\\$).)+/g
        // if(window && window.location && window.location.href){
        //     return window.location.href.match(pattern)[0]
        // }
        gfb.state.collectionHandle = shopifyLiquidValuesApp9Ext.collection.handle;
        return shopifyLiquidValuesApp9Ext.collection.handle;
      }
      return "undefined";
    },
    getCollectionGIds: function () {
      if (window.shopifyLiquidValuesApp9Ext && window.shopifyLiquidValuesApp9Ext.product.collections.length > 0) {

        let listOfGids = window.shopifyLiquidValuesApp9Ext.product.collections.map((collection) => {
          return collection.gid;
        })

        gfb.state.collectionGIds = listOfGids;
        return listOfGids;
      }
      return "undefined";
    },


    getProductPageId: function () {
      if (meta && meta.product && meta.product.id) {
        gfb.state.productPageId = meta.product.id;
        return meta.product.id;
      }
      return "undefined";
    },
    getSelectedVariant: function () {
      if ("product" === gfb.state.page_type) {
        let activeCodes = gfb.settings.app.activeVariantCodes;

        if (activeCodes.indexOf("1") >= 0) {
          const params = Object.fromEntries(new URLSearchParams(location.search));
          if (params && params.variant) {
            return params.variant;
          }
        }

        if (activeCodes.indexOf("2") >= 0) {
          if (ShopifyAnalytics && ShopifyAnalytics.meta && ShopifyAnalytics.meta.selectedVariantId) {
            for (let i = 0; i < ShopifyAnalytics.meta.product.variants.length; i++) {
              if (ShopifyAnalytics.meta.product.variants[i].id == ShopifyAnalytics.meta.selectedVariantId) {
                return ShopifyAnalytics.meta.selectedVariantId;
              }
            }
          }
        }
        if (activeCodes.indexOf("3") >= 0) {
          if (document.querySelector('[name="id"]') && document.querySelector('[name="id"]').value) {
            return document.querySelector('[name="id"]').value;
          }
        }

        if (activeCodes.indexOf("4") >= 0) {
          if (shopifyLiquidValuesApp9Ext.selected_or_first_available_variant) {
            return shopifyLiquidValuesApp9Ext.selected_or_first_available_variant.id;
          }
        }

        return undefined;
      }
    },

    getProductQuantity: function () {
      if (document.querySelector('[name="quantity"]') && document.querySelector('[name="quantity"]').value) {
        if (Number(document.querySelector('[name="quantity"]').value)) {
          return Number(document.querySelector('[name="quantity"]').value);
        } else {
          return 1;
        }
      } else {
        return 1;
      }
    },

    getElements: function (settings) {
      return {
        addToCartBtn: document.querySelector(gfb.selectors.addToCart),
        addToCartButtonCloned: undefined,
        checkoutBtn: document.querySelector(gfb.selectors.checkoutBtn),
        cartForm: document.querySelector(gfb.selectors.cartForm),
        // Create productPageWrapperV2 and cartPageWrapperV2 using vanilla JavaScript
        productPageWrapperV2: (() => {
            const wrapper = document.createElement('div');
            wrapper.className = 'gfbPageWrapper gfbProductPageWrapperV2';
            wrapper.innerHTML = '<div class="gfbFrequentBoughtWrapper"></div><div class="gfbVolumeBundleWrapper"></div><div class="gfbBundleUpsellWrapper"></div>';
            return wrapper;
        })(),
        customUpsellWrapperV2: (() => {
          const wrapper = document.createElement('div');
          wrapper.className = 'gfbPageWrapper gfbProductPageWrapperV2';
          wrapper.innerHTML = '<div class="gfbBundleUpsellWrapper"></div>';
          return wrapper;
        })(),
        customFrequentBoughtWrapperV2: (() => {
          const wrapper = document.createElement('div');
          wrapper.className = 'gfbPageWrapper gfbProductPageWrapperV2';
          wrapper.innerHTML = '<div class="gfbFrequentBoughtWrapper"></div>';
          return wrapper;
        })(),
        customVolumeBundleWrapperV2: (() => {
          const wrapper = document.createElement('div');
          wrapper.className = 'gfbPageWrapper gfbProductPageWrapperV2';
          wrapper.innerHTML = '<div class="gfbVolumeBundleWrapper"></div>';
          return wrapper;
        })(),
        cartPageWrapperV2: (() => {
            const wrapper = document.createElement('div');
            wrapper.className = 'gfbPageWrapper gfbCartPageWrapperV2';
            return wrapper;
        })(),
        buyNowBtn: document.querySelector(gfb.selectors.buyNowBtn),
        quantityBtn: document.querySelectorAll(gfb.selectors.quantityBtnSelectors),
        cartDrawer: document.querySelectorAll(gfb.selectors.sideCartSelectors),
      };
    },

    initialize: async function (jQuery) {
      gfb.utility.debugConsole("benchmark first init code start");
      let tmpCartSettings = await gfb.f.getSettings();
      gfb.utility.debugConsole("benchmark renderingUI start");
      gfb.f.setSettings(tmpCartSettings);
      gfb.f.setSelectors();
      gfb.f.setCustomStyling();
      gfb.state.page_type = gfb.f.getPageType();
      gfb.elements = gfb.f.getElements(gfb.settings);
      if ("" === gfb.state.page_type) return false;
      gfb.utility.setLanguageLocale();
      // gfb.settings.frequentBoughtData[0].selectedProducts = CONSTANT_testSettings;
      return gfb.f.bootstrap(gfb.settings);
    },
    globalListener: function async(settings) {
      let isIntervalActive = false;
      //if app is disabled reurn
      // if(gfb.state && gfb.state.activeCampaignName == "EMPTY"){
      //     gfb.utility.getUrlRewardCampaignName()
      // }
      try {
        if (settings.app.disableApp) {
          return;
        } else {
          // console.log("inside else of global listener");
          //setTIMOUT FOR API CALLS
          // setTimeout(() => {
            if (gfb.settings.app.disableApiCallListen == false) {
              try {
                gfb.utility.listenForApiCalls(settings);
                // gfb.utility.listenForAjaxApiCalls(settings);
                gfb.utility.listenForXmlHttpApiCalls(settings);
              } catch (error) {
                // debugConsole
                gfb.utility.debugConsole("error in listenForApiCalls", error);
              }
            }

          // gfb.utility.listenForFormSubmits();
          // gfb.utility.interceptFetchRequest()
          // gfb.utility.interceptXMLHttpRequest()
          // }, 800);

          if ("product" === gfb.state.page_type) {
            gfb.productPage.init(settings);
            gfb.homePage.init(settings);
          }

          if (settings.app.disableSideCart) {
            if ("cart" === gfb.state.page_type) {
              gfb.cartPage.init(settings);
            }
          } else {
            gfb.cartPage.init(settings);
          }

          if('HOME' === gfb.state.page_type){
            gfb.homePage.init(settings);
          }
        }

        if(gfb.settings.app.enableCustomScript){
          gfb.f.setCustomScript();
        }

        let runProcessFreeGiftCount = 0;
        setInterval(async () => {
          if (!isIntervalActive) {
            // console.log("gfb-globalListener-active")

            isIntervalActive = true;

            if (settings.app.enablingApiFromSetInterval) {
              // if (url.includes('app=gfbBundleApp')) {
              //     return ;
              // }
              // var cartData = undefined;
              // if (cartData) {
              //     gfb.state.cartData = cartData;
              // } else {
              //     gfb.state.cartData = await gfb.utility.getCart();
              // }
              // gfb.gfbFrequentBought.f.checkForFreeGift(cartData)
              await gfb.utility.callchecksAfterApiCalls();
            }

            let wrapperElements = document.querySelectorAll(gfb.selectors.productPageWrapperV2);

            // Get the length of the NodeList returned by querySelectorAll
            let wrapperElementsLength = wrapperElements.length;
            if ("product" === gfb.state.page_type && gfb.elements.addToCartBtn && gfb.elements.addToCartBtn.length > 0 && wrapperElementsLength == 0) {
              gfb.utility.debugConsole("productPage-insertWrapperIntoPage1");
              
              gfb.productPage.f.insertWrapperIntoPage(settings);
            }

            // for gfbOverWriteBundleDisplayDataInCart
            if("product" === gfb.state.page_type){
              gfb.gfbOverWriteBundleDisplayDataInCart.init( settings, "PRODUCT_PAGE");
            }

            if("cart" === gfb.state.page_type){
              // gfb.utility.debugConsole("cartPage-insertWrapperIntoCartPage");
              gfb.gfbOverWriteBundleDisplayDataInCart.init( settings, "CART_PAGE");
            }

            let checkoutBtnEles = document.querySelectorAll(gfb.selectors.checkoutBtn);
            let cartPageWrapperV2Elements = document.querySelectorAll(gfb.selectors.cartPageWrapperV2);

            // Get the length of the NodeList returned by querySelectorAll
            let cartPageWrapperV2Length = cartPageWrapperV2Elements.length;
            // insert cartPage wrapper if cartPage is initialized
            if (checkoutBtnEles.length > 0 && cartPageWrapperV2Length == 0) {
              gfb.utility.debugConsole("cartPage-insertWrapperIntoPage");
              gfb.cartPage.f.insertWrapperIntoPage(settings);
            }

            isIntervalActive = false;
          }
        }, 1000);
      } catch (error) {
        console.error("globalListenerError", error);
      }
    },
  },
  utility: {
    getLocale: function () {
      if (window.Shopify && window.Shopify.locale) {
        return window.Shopify.locale;
      } else {
        return "en";
      }
    },
    setLanguageLocale: function () {
      let locale = gfb.utility.getLocale();

      if (gfb.settings.languageData && gfb.settings.languageData.languageMode == "SINGLE") {
        locale = "en";
      }

      if (!gfb.settings.languageData[locale]) {
        locale = "en";
      }
      gfb.settings.languageData = gfb.settings.languageData[locale];
    },

    getDate: function (date) {
      let d = new Date(date);
      let month = "" + (d.getMonth() + 1);
      let day = "" + d.getDate();
      let year = d.getFullYear();

      if (month.length < 2) month = "0" + month;
      if (day.length < 2) day = "0" + day;

      return [year, month, day].join("-");
    },
    addToCart: async function (data) {
      try {
        let url = "/cart/add.js?app=gfbBundleApp";

        const response = await fetch(url, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(data),
        });

        if (!response.ok) {
          throw new Error('Network response was not ok');
        }
    
        const res = await response.json();
        gfb.utility.debugConsole("Success:", res);

        return true;
      } catch (error) {
        gfb.utility.debugError("gfb-utility-addToCart");
        gfb.utility.debugError(error);
        return false;
      }
    },
    checkForDuplicateAndModifyItemsArray: function(itemsArray){
      try{

        let newData;
        let mapOfId = {};
        for(let i = 0; i < itemsArray.length; i++){
          let currentItem = itemsArray[i];
          
          let currentVariantId = currentItem.id;
          let currentQuantity = currentItem.quantity;
          let customText = currentItem.properties["_flyBundles:customField"];
          let offerId = currentItem.properties["_flyBundles:OfferId"];
          
          if(mapOfId.hasOwnProperty(currentVariantId)){
            let existingQuantity = mapOfId[currentVariantId].qty;
            let newQuantity = existingQuantity + currentQuantity;

            let existingText = mapOfId[currentVariantId].customText;
            let newText = existingText + '  ||  ' +  customText;

            mapOfId[currentVariantId].qty = newQuantity;
            mapOfId[currentVariantId].customText = newText;
          }else{
            mapOfId[currentVariantId] = {};
            mapOfId[currentVariantId].qty = currentQuantity;
            mapOfId[currentVariantId].customText = customText;
            mapOfId[currentVariantId].offerId = offerId;
          }
        }

        // iterate over the mapOfId;
        newData = Object.keys(mapOfId).map((key) => {
          return {
            id: key,
            quantity: mapOfId[key].qty,
            properties: {
              "_flyBundles:customField": mapOfId[key].customText || undefined,
              "_flyBundles:OfferId": mapOfId[key].offerId || undefined,
              "_flyBundles:prodQty": mapOfId[key].qty || 1
            }
          }
        })

        return newData;
      }catch(err){
        console.error("checkForDuplicateAndModifyItemsArray", err);
      }
    },
    updateCart: async function (data) {
      try {
        let response = await fetch("/cart/update.js?app=gfbBundleApp", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(data),
        });
    
        if (!response.ok) {
          throw new Error('Network response was not ok');
        }
    
        let result = await response.json();
        return result;
      } catch (error) {
          console.error("gfb-utility-updateCart", error);
          return false;
      }
    },
    changeCart: async function (data) {
      try {
        let response = await fetch("/cart/change.js?app=gfbBundleApp", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(data),
        });
    
        if (!response.ok) {
          throw new Error('Network response was not ok');
        }
        let result = await response.json();
        
        return true;
      } catch (error) {
          console.error("gfb-utility-changeCart", error);
          return false;
      }
    },
    setCachedProductDataInMapAndStorage: function(productHandle, productData){
      if(productHandle && productData){
        gfb.state.cachedProductData.set(productHandle, productData);
      }
      //fetch the array from seessoon storage check if the productHandle is already there overwirte it or add it
      let productDataArray = JSON.parse(sessionStorage.getItem("gfbCachedProductData")) || [];
      // if(productDataArray && productDataArray.length > 0){
        let productIndex = productDataArray.findIndex((product) => product.productHandle == productHandle);
        if(productIndex >= 0){
          productDataArray[productIndex] = productData;
        }else{
          productDataArray.push(productData);
        }
      // }
      sessionStorage.setItem("gfbCachedProductData", JSON.stringify(productDataArray));

    },
    getProductDataV2: async function (productHandle) {
      try {
          let languageValue = window?.Shopify?.routes?.root ? window.Shopify.routes.root : "/";
          if (gfb.state.cachedProductData.has(productHandle)) {
              let data = gfb.state.cachedProductData.get(productHandle);
              return data;
          } else {
              let response = await fetch(languageValue + "products/" + productHandle + ".js?app=gfbBundleApp");
  
              if (!response.ok) {
                  throw new Error('Network response was not ok');
              }
  
              let product = await response.json();
              gfb.utility.debugConsole("success-productHandle: ", productHandle);
              gfb.utility.setCachedProductDataInMapAndStorage(productHandle, product);
              return product;
          }
      } catch (error) {
          gfb.utility.debugError("gfb-utility-getProductDataV2");
          gfb.utility.debugError(error);
          return false;
      }
    },
    addToCartV2: function (data) {
      return new Promise((resolve, reject) => {
        fetch("/cart/add.js?app=gfbBundleApp", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(data),
        })
        .then(response => {
          if (!response.ok) {
            throw new Error('Network response was not ok');
          }
          gfb.utility.debugConsole("success-/cart/add.js': ");
          resolve(true);
        })
        .catch(error => {
          console.error("fail-/cart/add.js");
          resolve(false);
        });
     });
    },
    clearCart: function (data) {
      return new Promise((resolve, reject) => {
        fetch("/cart/clear.js?app=gfbBundleApp", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(data),
        })
        .then(response => {
          if (!response.ok) {
            throw new Error('Network response was not ok');
          }
          gfb.utility.debugConsole("success-/cart/clear.js': ");
          resolve(true);
        })
        .catch(error => {
          console.error("fail-/cart/clear.js");
          resolve(false);
        });
     });
    },
    getCart: async function (data) {
      try {
        const response = await fetch("/cart.js?app=gfbBundleApp", {
          method: "GET",
          headers: {
            "Content-Type": "application/json",
          },
        });
    
        if (!response.ok) {
          throw new Error('Network response was not ok');
        }
    
        const result = await response.json();
        // Assuming gfb.utility.refreshFreeGiftCartData is a function to handle the cart data
        // gfb.utility.refreshFreeGiftCartData(result);
        return result;
      } catch (error) {
          console.error("gfb-utility-getCart", error);
          return false;
      }
    },

    isCartEmpty: function () {
      if (gfb.state.cartData && gfb.state.cartData.items.length <= 0) {
        return true;
      } else {
        return false;
      }
    },

    cloneAddToCartBtn: function () {},
    renderLanguageValue: function (parent) {
      if (parent) {
        return parent.value;
      }
      return;
    },
    slider: {
      state: {
        slideIndex: 0,
      },
    },
    isMobileView: function () {
      if (window.innerWidth < 768) {
        return true;
      } else {
        return false;
      }
    },
    updateCart: async function (cartData) {
      try {
        const response = await fetch("/cart/update.js?app=gfbBundleApp", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(cartData),
        });
    
        if (!response.ok) {
          throw new Error('Network response was not ok');
        }
    
        gfb.utility.debugConsole("success-/cart/update.js': ");
        return true;
      } catch (error) {
          console.error("error in shopifyUtility.updateCart", error);
          return false;
      }
    },
    getCurrencySymbol: function () {
      if (window && window.Shopify && window.Shopify.currency && window.Shopify.currency.active) {
        let symbol = gfb.settings.merchantInfo.multipleCurrenciesInfo[window.Shopify.currency.active]?.symbol || Shopify.currency.active;
        return symbol;
      }
    },
    getActiveCurrencyRate: function () {
      let currencyRate = 1;
      if (window.Shopify && window.Shopify.currency && window.Shopify.currency.rate) {
        currencyRate = window.Shopify.currency.rate;
      }
      return currencyRate;
    },
    getAmountInActiveCurrency: function (amount) {
      if (!amount || amount == "" || amount == null || amount == undefined) {
        return 0;
      }
      if (window && window.Shopify && window.Shopify.currency && window.Shopify.currency.rate) {
        let rate = window.Shopify.currency.rate;
        if (rate == "1.0") {
          return amount;
        } else {
          return parseFloat(parseFloat(amount) * parseFloat(rate)).toFixed(2);
        }
      }
    },
    checkIfBrandingShouldBeVisible: function (type) {
      // return true;
      try {
        let volumeBundleWrapper = document.querySelector(".gfbVolumeDiscountWidgetWrapper");
        let isVolumeBundleWrapperChildrenPresent = false;
        if(volumeBundleWrapper){
          if(volumeBundleWrapper.children.length < 1){
            isVolumeBundleWrapperChildrenPresent = false;
          }else{
            isVolumeBundleWrapperChildrenPresent = true;
          }
        }

        let installTime = gfb.settings?.merchantInfo?.createdAt;
        let createdAt = new Date(installTime);
        let judgementTime = new Date('2024-09-20T12:00:00Z');
        if(judgementTime < createdAt){
          return true;
        }else{
          return false;
        }

        let frequentBoughtWrapper = document.querySelector(".gfbFrequentBoughtWidgetOfferContainer");
        let isFrequentBoughtWrapperChildrenPresent = false;
        if(frequentBoughtWrapper){
          if(frequentBoughtWrapper.children.length < 1){
            isFrequentBoughtWrapperChildrenPresent = false;
          }else{
            isFrequentBoughtWrapperChildrenPresent = true;
          }
        }

        if (isVolumeBundleWrapperChildrenPresent && isFrequentBoughtWrapperChildrenPresent) {
          return false;
        }

        if (!gfb.settings?.merchantInfo?.isSubscription || !gfb.settings?.merchantInfo?.isSubscription.name) {
          return true;
        }
        if (gfb.settings?.merchantInfo?.isSubscription && gfb.settings?.merchantInfo?.isSubscription?.name?.search("Free") !== -1 && !type && type !== "checkout") {
          return true;
        }
        return false;
      } catch (err) {
        gfb.utility.debugConsole(err);
        return true;
      }
    },
    renderPoweredByLabel: function () {
      if (gfb.utility.checkIfBrandingShouldBeVisible()) {

        let gfbPoweredByLabel = document.createElement("a");
        gfbPoweredByLabel.classList.add("gfbPoweredAnchorTag");
        gfbPoweredByLabel.href = "https://apps.shopify.com/fly-bundles?utm_source=widget&utm_medium=merchant_storefront&utm_campaign=promotion";
        gfbPoweredByLabel.target = "_blank";
        gfbPoweredByLabel.style.textAlign = "end";
        gfbPoweredByLabel.style.display = "block";
        gfbPoweredByLabel.style.color = "black";
        gfbPoweredByLabel.style.fontSize = "14px";
        gfbPoweredByLabel.style.textDecoration = "none";
        gfbPoweredByLabel.innerText = "✨Powered By Fly✨";

        return gfbPoweredByLabel;
      } else {
        return null;
      }
    },
    formatPrice: function (price) {
      try {
        if (window && window.Shopify && window.Shopify.currency && window.Shopify.currency.active) {
          //find the currency symbol from  gfb.settings.merchantInfo.multipleCurrencies[window.Shopify.currency.active] get the symbol
          let currencySymbol = gfb.utility.getCurrencySymbol();
          return currencySymbol + "" + parseFloat(price / 100).toFixed(2);
        }
      } catch (err) {
        gfb.utility.debugConsole(err);
      }
    },
    formatPriceWithoutSymbol: function (price) {
      if (window && window.Shopify && window.Shopify.currency && window.Shopify.currency.active) {
        //find the currency symbol from  gbb.settings.merchantInfo.multipleCurrencies[window.Shopify.currency.active] get the symbol
        return parseFloat(price / 100).toFixed(2);
      } else {
        return parseFloat(price / 100).toFixed(2);
      }
    },

    generateRandomAlphanumeric: function (length) {
      let result = '';
      const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
      const charactersLength = characters.length;
      for (let i = 0; i < length; i++) {
        result += characters.charAt(Math.floor(Math.random() * charactersLength));
      }
      return result;
    },

    createMapForVariantId: function (products, extraInfo = undefined) {
      try {
        //products is an objects with product handle as key
        //this function returns an object with product id as key
        let productsWithIdAsKey = {};
        for (let [key, value] of Object.entries(products)) {
          let product = value;
          //if product has variants
          if (product.variants.length > 0) {
            for (let i = 0; i < product.variants.length; i++) {
              product.variants[i].variant_id = product.variants[i].id;
              product.variants[i].image = product.variants[i].featured_image?.src;
              if (!product.variants[i].image) {
                product.variants[i].image = product.featured_image;
              }
              if (extraInfo == undefined || product.variants[i].title == "" || product?.variants?.length == 1) {
                product.variants[i].title =  product.variants[i].public_title ||  product.variants[i].name;
              } else if (!extraInfo.shouldVariantTitleBeConvertedToProductTitle) {
                product.variants[i].title = product.variants[i].title;
              }
              product.variants[i].product_id = product.id;
              if (product.selling_plan_groups) {
                //product.variants[i].sellingPlanDetails = gbb.utility.getSellingPlanDetailsForVariant(product?.selling_plan_groups, product.variants[i]?.selling_plan_allocations)
                product.variants[i].selling_plan_groups = product.selling_plan_groups || [];
                product.variants[i].selling_plan_allocations = product?.variants[i]?.selling_plan_allocations || [];
              }
              productsWithIdAsKey[product.variants[i].id] = product.variants[i];
            }
          }
          //if product has no variants
          else {
            productsWithIdAsKey[product.id] = product;
          }
        }
        return productsWithIdAsKey;
      } catch (err) {
        gfb.utility.debugConsole(err);
        return {};
      }
    },

    filterIrrelevantHandles: function (handlesArr, widgetInfo) {
      let relevantHandles = [];
      let relevantIds = [];
      // widget info can have
      // componentProductPages: true,
      // allProductPages: false,
      // specificProductPages: false,
      // specificProducts: [],
      // specificCollectionPages: false,
      // specificCollections: [],

      //  if its allProduct pages then return all handles
      if (widgetInfo.allProductPages) {
        return handlesArr;
      }


      // lets check if its specific product pages and specific products are present
      if (widgetInfo.specificProductPages && widgetInfo.specificProducts && widgetInfo.specificProducts.length > 0) {
        // lets check if the product handle is present in specific products
        // check if the current page is inside specific products
        let productPageHandle = gfb.f.getProductPageHandle();
        let productPageId = gfb.state.productId;
        productPageId = JSON.stringify(productPageId)
        for (let i = 0; i < widgetInfo.specificProducts.length; i++) {
          const productHandle = widgetInfo.specificProducts[i].handle;
          const productId = widgetInfo.specificProducts[i].productId || widgetInfo.specificProducts[i].id;
          if (productPageId == productId) {
            relevantHandles.push(productHandle);
            relevantIds.push(productId);
          }
        }
        // return relevantHandles;
      }

      // check if current collection is present in specific collections
      if (widgetInfo.specificCollectionPages && widgetInfo.specificCollections && widgetInfo.specificCollections.length > 0) {
        let collectionGIds = gfb.f.getCollectionGIds();
        for (let i = 0; i < widgetInfo.specificCollections.length; i++) {
          const collection = widgetInfo.specificCollections[i];
          if (collectionGIds.includes(collection.id)) {
            relevantHandles.push(collection.handle);
            relevantIds.push(collection.id);
          }
          // if (collection.id === collectionGId) {
          //   relevantHandles.push(collection);
          // }
        }
      }

      return {relevantHandles, relevantIds};
    },
    convertFromStoreCurrencyToCustomer: function (amount) {
      try {
        let activeCurrencyRate = gfb.utility.getActiveCurrencyRate();
        let convertedAmount = parseFloat(amount * activeCurrencyRate).toFixed(2);
        return convertedAmount;
      } catch (err) {
        gfb.utility.debugConsole(err);
      }
    },
    checkIfClickIsAllowed_sastaDebounce: function (selector, delay = 500) {
      try {
        const currentTime = new Date().getTime();
        let lastClickTimestamps = gfb.state.lastClickTimestamps;
        const previousClickTime = lastClickTimestamps.get(selector) || 0;
        const timeDifference = currentTime - previousClickTime;

        if (timeDifference < delay) {
          gfb.utility.debugConsole("time difference:" + timeDifference + "ms");
          return false;
        }

        lastClickTimestamps.set(selector, currentTime);
        gfb.state.lastClickTimestamps = lastClickTimestamps;
        return true;
      } catch (error) {
        gfb.utility.debugConsole("error in checkIfClickIsAllowed_sastaDebounce", error);
        return true;
      }
    },
    convertArrayToObject: function (array, key) {
      try {
        let obj = {};
        for (let i = 0; i < array.length; i++) {
          obj[array[i][key]] = array[i];
        }
      
        return obj;
      } catch (err) {
        gfb.utility.debugConsole(err);
      }
    },
    listenForApiCalls: function () {
      // Save a reference to the original fetch function
      try {
        const originalFetch = window.fetch;
        // Define a new fetch function that intercepts requests
        window.fetch = function (url, options) {
          // Log the request URL
          gfb.utility.debugConsole("gfb Request URL: " + url);
          // Check if the URL contains "/cart"
          if (url && typeof url == "string" && (url.includes("/cart/change") || url.includes("/cart/add") || url.includes("/cart/update") || url.includes("/cart/clear"))) {
            // Call the original fetch function to make the request

            return originalFetch.apply(this, arguments).then(async (response) => {
              // Log the response data
              try {
                if (typeof response === "string") {
                  await gfb.utility.callchecksAfterApiCalls(url, undefined);
                } else {
                  response
                    .clone()
                    .text()
                    .then(async (data) => {
                      await gfb.utility.callchecksAfterApiCalls(url, data);
                    });
                }

                return response;
              } catch (error) {
                gfb.utility.debugError("Error in response data: ", error);
                return response;
              }
            });
          } else {
            // If the URL doesn't contain "/cart", call the original fetch function directly
            return originalFetch.apply(this, arguments);
          }
        };
      } catch (error) {
        gfb.utility.debugError("Error in listenForApiCalls: ", error);
      }
    },
    listenForAjaxApiCalls: function () {
      try {
        var originalAjax = window.fetch;
        window.fetch = function(input, init) {
          // Log the request URL
          gfb.utility.debugConsole("Request URL: " + input);
      
          // Check if the URL contains "/cart"
          if (typeof input === "string" && (input.includes("/cart/change") || 
            input.includes("/cart/add") || 
            input.includes("/cart/update") || 
            input.includes("/cart/clear"))) {
              // Call the original fetch function to make the request
              return originalFetch(input, init).then(async function(response) {
                  // Log the response data
                  const data = await response.text();
                  gfb.utility.debugConsole("Response: " + data);
                  // Perform additional checks after API calls
                  // Assuming gfb.utility.callchecksAfterApiCalls is a function that you need to implement
                  gfb.utility.callchecksAfterApiCalls(input, data);
                  return response;
              }).catch(function(error) {
                  console.error("Error in fetch request: ", error);
              });
          } else {
              // If the URL doesn't contain "/cart", call the original fetch function directly
              return originalFetch(input, init);
          }
        }
      } catch (error) {
        gfb.utility.debugConsole("Error in listenForAjaxApiCalls: ", error);
      }
    },
    listenForXmlHttpApiCalls: function () {
      // Save a reference to the original XMLHttpRequest constructor
      try {
        gfb.utility.debugConsole("inside xml http api call");
        const OriginalXMLHttpRequest = window.XMLHttpRequest;

        // Override the XMLHttpRequest constructor
        window.XMLHttpRequest = function () {
          const xhr = new OriginalXMLHttpRequest();

          // Save references to the original methods
          const originalOpen = xhr.open;
          const originalSend = xhr.send;

          // Override the open method to store the URL
          xhr.open = function (method, url) {
            // Store the URL in the xhr object
            xhr._url = url;

            // Log the request URL
            //  console.log("XMLHttpRequest open url", url);
            gfb.utility.debugConsole("XMLHttpRequest Request URL: " + url);

            // Call the original open method
            return originalOpen.apply(this, arguments);
          };

          // Override the send method
          xhr.send = function (data) {
            // Check if the URL contains "/cart" immediately
            if (
              xhr._url &&
              typeof xhr._url == "string" &&
              (xhr._url.includes("/cart/change") ||
                //   xhr._url.includes('/cart.js') ||
                xhr._url.includes("/cart/add") ||
                xhr._url.includes("/cart/update") ||
                xhr._url.includes("/cart/clear"))
            ) {
              // Override the onreadystatechange event handler
              const originalOnReadyStateChange = xhr.onreadystatechange;
              xhr.onreadystatechange = async function () {
                if (xhr.readyState == XMLHttpRequest.DONE || xhr.readyState == 4) {
                  // Log the response data
                  const response = xhr.responseText;

                  try {
                    //  const response = xhr.responseText;
                    //console.log("XMLHttpRequest Response Data", response);

                    // Perform your desired actions with the response data
                    if (typeof response === "string") {
                      gfb.utility.debugConsole(" callchecksAfterApiCalls for", xhr._url);

                      await gfb.utility.callchecksAfterApiCalls(xhr._url, undefined);
                    } else {
                      response
                        .clone()
                        .text()
                        .then(async (data) => {
                          await gfb.utility.callchecksAfterApiCalls(xhr._url, data);
                        });
                      return response;
                    }
                  } catch (error) {
                    gfb.utility.debugConsole("Error in XMLHttpRequest response data: ", error);
                    return response;
                  }
                }

                // Call the original onreadystatechange event handler
                if (typeof originalOnReadyStateChange === "function") {
                  originalOnReadyStateChange.apply(xhr, arguments);
                }
              };
            }

            // Call the original send method
            return originalSend.apply(this, arguments);
          };

          return xhr;
        };
      } catch (error) {
        gfb.utility.debugConsole("Error in listenForXmlHttpApiCalls: ", error);
      }
    },
    //  listenForFormSubmits:function() {
    //     const forms = document.querySelectorAll('form');

    //     forms.forEach(form => {

    //         const action = form.getAttribute('action');

    //         if (action.includes('/cart/change') || action.includes('/cart/add') || action.includes('/cart/update') || action.includes('/cart/clear')) {
    //             gfb.utility.debugConsole("gfb Form Action: " + action);
    //             event.preventDefault();
    //             form.addEventListener('submit', async (event) => {
    //                 try {
    //                     // form.submit();

    //                     //place a timeout here to wait for the form to submit
    //                     await new Promise(resolve => setTimeout(resolve, 1000));
    //                     console.log("form after submit:");
    //                     // callchecks after api calls should only happen after the form is submitted.
    //                     await gfb.utility.callchecksAfterApiCalls(action, undefined);
    //                     } catch (error) {
    //                         gfb.utility.debugConsole("Error in ajax response data: ", error);
    //                     }
    //             });
    //         }
    //     });
    // },

    interceptFetchRequest(matches, cb) {
      const originalFetch = fetch;

      window.fetch = function (input, init) {
        return originalFetch(input, init).then(async (res) => {
          if (input && typeof input == "string" && (input.includes("/cart/change") || input.includes("/cart/add") || input.includes("/cart/update") || input.includes("/cart/clear"))) {
            // Call the original fetch function to make the request
            await gfb.utility.callchecksAfterApiCalls(input, res);
          }
          return Promise.resolve(res);
        });
      };
    },
    interceptXMLHttpRequest(matches, cb) {
      const originalOpen = XMLHttpRequest.prototype.open;

      XMLHttpRequest.prototype.open = function () {
        this.addEventListener("load", async function () {
          if (
            input &&
            typeof input == "string" &&
            // input.includes("/cart.js") &&
            (input.includes("/cart/change") || input.includes("/cart/add") || input.includes("/cart/update") || input.includes("/cart/clear"))
          ) {
            // Call the original fetch function to make the request
            await gfb.utility.callchecksAfterApiCalls(input, res);
          }
        });
        originalOpen.apply(this, arguments);
      };
    },
    callchecksAfterApiCalls: async function (url, data) {
      try {
        if (url && typeof url == "string" && url.includes("app=gfbBundleApp")) {
          return data;
        }
        var cartData = undefined;
        if (cartData) {
          gfb.state.cartData = cartData;
        } else {
          gfb.state.cartData = await gfb.utility.getCart();
          let relevantCartDataForFreeGiftEligibility = gfb.gfbFrequentBought.utility.filterCartDataBasedOnSettings(gfb.state.cartData);
          gfb.state.gfbFrequentBoughtCartData = relevantCartDataForFreeGiftEligibility;
          cartData = gfb.state.cartData;
          gfb.gfbVolumeDiscount.actions.handleQuantityUpdate();
        }

        await gfb.gfbFrequentBought.f.checkForFreeGift(cartData);
        gfb.gfbVolumeDiscount.actions.handleQuantityUpdate();
      } catch (e) {
        // gfb.utility.debugConsole("gfb Response data: ", data);
      }
    },
    combineObjects: function (obj1, obj2) {
      const combinedObject = {};

      // Copy properties from the first object
      for (let key in obj1) {
        if (obj1.hasOwnProperty(key)) {
          combinedObject[key] = obj1[key];
        }
      }

      // Copy properties from the second object
      for (let key in obj2) {
        if (obj2.hasOwnProperty(key)) {
          combinedObject[key] = obj2[key];
        }
      }

      return combinedObject;
    },
    debugConsole: function (...messages) {
      try {
        let flag = gfb.state.CONSTANT_DEBUG_FLAG;
        if (flag == false) {
          return;
        }
        if (flag == true) {
          for (let message of messages) {
            console.log(message);
          }
          return;
        }
        let isDebug = localStorage.getItem("debug");
        if (isDebug) {
          for (let message of messages) {
            console.log(message);
          }
          gfb.state.CONSTANT_DEBUG_FLAG = true;
        } else {
          gfb.state.CONSTANT_DEBUG_FLAG = false;
        }
      } catch (err) {
        console.error("error inside debugConsole ->", err);
      }
    },
    debugError: function (...messages) {
      try {
        let flag = gfb.state.CONSTANT_DEBUG_FLAG;
        if (flag == false) {
          return;
        }
        if (flag == true) {
          for (let message of messages) {
            console.error(message);
          }
          return;
        }
        let isDebug = localStorage.getItem("debug");
        if (isDebug) {
          gfb.state.CONSTANT_DEBUG_FLAG = true;
          for (let message of messages) {
            console.error(message);
          }
        } else {
          gfb.state.CONSTANT_DEBUG_FLAG = false;
        }
      } catch (err) {
        console.error("error inside the debugError function ->", err);
      }
    },
    graphQlAPIWrapper: async function(query, variables){
      try{
          let shopDomain = window.Shopify.shop;
          let storeFrontAccessToken = gfb.state.storeFrontAccessToken || gfb.settings.STOREFRONT_ACCESS_TOKEN;
          const res = await fetch(`https://${shopDomain}/api/2023-04/graphql.json`, {
            // const res = await fetch(`https://gift-kart-test-01.myshopify.com/api/2024-01/graphql.json`, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
                'X-Shopify-Storefront-Access-Token': storeFrontAccessToken,
              },
              body: JSON.stringify({ query, variables }),
            })

          const data = await res.json();
          return data;

      }catch(error){
          gfb.utility.debugConsole("error in graphQlAPIWrapper =>", error);
      }
    },
    gfbCleaningAndArrangingData: function(data){
      try{
        let cleanedData = gfb.utility.flattenGraphQLResponse(data);
        gfb.utility.debugConsole("cleanedData before processing =========>:", cleanedData);

        cleanedData = gfb.utility.dataMappingFromGraphQL(cleanedData);
        
        return cleanedData;
      }catch(err){
        gfb.utility.debugConsole("err in gfbCleaningAndArrangingData => ", err);
      }
    },
    flattenGraphQLResponse: function (response) {
      gfb.utility.debugConsole("response", response);
      const nodes = response.data ? response.data.nodes : [];
    
      gfb.utility.debugConsole("flattened-just-node",nodes);
      const flattenedNodes = nodes.map((node) => {
        if(node) {
          const flattenedNode = {};
        
          Object.keys(node).forEach((key) => {
            const value = node[key];
            if (value && typeof value === "object") {
              if (value.edges) {
                flattenedNode[key] = value.edges.map((edge) => edge.node);
              } else if (value.node) {
                flattenedNode[key] = value.node;
              } else {
                flattenedNode[key] = value;
              }
            } else {
              flattenedNode[key] = value;
            }
          });
          gfb.utility.debugConsole("flattenedNode", flattenedNode);
          return flattenedNode;
        }
      });
      gfb.utility.debugConsole("flattenedNodes", flattenedNodes);
    
      return flattenedNodes;
    },
    getProductsDataByIds: async function(productIds){
      try{
        const query = `query test($ids: [ID!]!, $countryCode: CountryCode!, $languageCode: LanguageCode!) @inContext(country: $countryCode, language: $languageCode) {    
          nodes(ids: $ids) {
          ... on Product{
            id
            availableForSale
            title
            handle
            createdAt
            description
            productType
            onlineStoreUrl
            options{
              id
              name
              values
            }
            featuredImage{
              id
              originalSrc
              transformedSrc(maxWidth: 800, maxHeight: 800, crop: CENTER)
            }
           updatedAt
          tags
          vendor
            variants(first: 100) {
              edges {
                node {
                  id
                  sku
                  title
                  price{
                    amount
                    currencyCode
                  }
                  compareAtPrice{
                    amount
                    currencyCode
                  }
                  quantityAvailable
                  selectedOptions{
                      name
                      value
                  }
                  availableForSale
                  image {
                    id
                    originalSrc
                    transformedSrc(maxWidth: 800, maxHeight: 800, crop: CENTER)
                  }
                }
              }
            }
          }
        }
      }`;

      const variables = {
          ids: productIds,
          countryCode: "IN"  || variables.countryCode,
          languageCode: "EN" || variables.languageCode.toUpperCase()
      };

      let data = await gfb.utility.graphQlAPIWrapper(query, variables);
      data = gfb.utility.gfbCleaningAndArrangingData(data);
      return data;

      }catch(error){
        console.error('error in getProductDataByIds ', error)
      }
    },
    createOfferMap: function () {
      // loop over the offers and create a map of offerId and selectedProducts
      try{
        let frequentBoughtShopifyDataByHandles = JSON.parse(JSON.stringify(gfb.gfbFrequentBought.state.frequentBoughtShopifyDataByHandles));
        let frequentBoughtShopifyDataByVariantIds = JSON.parse(JSON.stringify(gfb.gfbFrequentBought.state.frequentBoughtShopifyDataByVariantIds));
        let frequentBoughtShopifyDataByProducttIds = JSON.parse(JSON.stringify(gfb.gfbFrequentBought.state.frequentBoughtShopifyDataByProductIds));
        let notRequireddVariantIds = [];
        let requiredVariantIds = [];
        let frequentBoughtShopifyData = gfb.gfbFrequentBought.state.frequentBoughtShopifyData;
        let frequentBoughtDataByOfferId = {};
        let offers = JSON.parse(JSON.stringify(gfb.settings.frequentBoughtData));
        for (let i = 0; i < offers.length; i++) {
          let offer = offers[i];
          let offerId = offers[i].offerId || offers[i].metafieldData.offerId;
          // frequentBoughtDataByOfferId[offerId] = offer;
          let selectedProducts = offer.selectedProducts;
          // loop over the selected products
          let productArray = [];
          for (let j = 0; j < selectedProducts.length; j++) {
            let staleProductData = selectedProducts[j];
            let productHandle = selectedProducts[j].handle;
            let productId = selectedProducts[j].productId;

            if(selectedProducts[j].mutated){
              productHandle = selectedProducts[j].mutatedHandle;
              productId = selectedProducts[j].mutatedId;
            }

            let productData = frequentBoughtShopifyDataByHandles[productHandle];
            productData = frequentBoughtShopifyDataByProducttIds[productId];
            if (productData) {
              let qty = staleProductData.quantity;
              productData.quantity = qty;
              productData.designObject = staleProductData.designObject;
              productData.customDescription = staleProductData.description;
              productData.isMandatory = staleProductData.isMandatory || false;
              productData.customFieldOptions = staleProductData.customFieldOptions || {
                isAllowed: false,
                isMandatory: false,
              } ;
              let variantsArray = [];
              for (let k = 0; k < staleProductData.variants.length; k++) {
                let staleVariantData = staleProductData.variants[k];
                let variantId = staleVariantData.variantId;
                let variantData = frequentBoughtShopifyDataByVariantIds[variantId];

                // check if variantData is not undefined
                // if the variant is not present in data fetchd from shopify
                if (variantData) {
                  if (staleVariantData.isSelected) {
                    variantData.isSelected = true;
                    let price = qty * (variantData.price / 100);
                    let strikeThroughPrice;
                    if (variantData.compare_at_price) {
                      strikeThroughPrice = qty * (variantData.compare_at_price / 100);
                    } else {
                      strikeThroughPrice = qty * (variantData.price / 100);
                    }
                    variantData.totalVariantPrice = price.toFixed(2);
                    variantData.strikeThroughPrice = strikeThroughPrice.toFixed(2);
                    variantsArray.push(variantData);

                    if (!requiredVariantIds.includes(variantId)) {
                      requiredVariantIds.push(variantId);
                    }
                  } else {
                    // remove the variant from the frequentBoughtShopifyDataByVariantIds
                    // notRequireddVariantIds.push(variantId);
                  }
                } else {
                  // notRequireddVariantIds.push(variantId);
                }
              }
              // for variants of each product, create a map of variantId and variantIndex
              

              // problem when 2 same products come with different vairant combination
              let newProdData = JSON.parse(JSON.stringify(productData));
              newProdData.variants = JSON.parse(JSON.stringify(variantsArray));
              productArray.push(newProdData);
            }
          }
          // get productArray by handles
          offer.selectedProducts = productArray;
          frequentBoughtDataByOfferId[offerId] = offer;
        }

        // loop through the frequentBoughtShopifyDataByProductHandles
        let productArray = [];
        for (let [key, value] of Object.entries(frequentBoughtShopifyDataByHandles)) {
          let productData = value;
          productArray.push(productData);
        }
        frequentBoughtShopifyData = productArray;

        // from the frequentBoughtShopifyDataByVariantIds, only keep the requireddVariantIds and remove other
        let dummyDataVariantIds = frequentBoughtShopifyDataByVariantIds;

        gfb.gfbFrequentBought.state.frequentBoughtShopifyDataByVariantIds = dummyDataVariantIds;
        // gfb.gfbFrequentBought.state.frequentBoughtShopifyData = frequentBoughtShopifyData;
        return frequentBoughtDataByOfferId;
      } catch (err) {
        gfb.utility.debugConsole("error inside createOfferMap", err);
      }
    },
    dataMappingFromGraphQL: function(cleanedData){
      try{

        let newProductArray = JSON.parse(JSON.stringify(cleanedData));
        let returningArray = [];
        for(let i=0; i<newProductArray.length; i++){

          let currProduct = newProductArray[i];
          let originalProduct = cleanedData[i];

            currProduct.available = originalProduct.availableForSale;
            currProduct.featured_image = originalProduct.featuredImage.originalSrc;
            let variantData = currProduct.variants;
            let ogVariants = originalProduct.variants;
            // productId
            let splitProductId = originalProduct.id.split('/');
            let pureProductId = splitProductId[splitProductId.length -1];
            currProduct.productId = pureProductId;
            currProduct.id = pureProductId

            // for variants
            for(let j=0; j<variantData.length; j++){
              variantData[j].available = ogVariants[j].availableForSale
              variantData[j].image = ogVariants[j].image.originalSrc;
              variantData[j].price = parseFloat(variantData[j].price.amount)*100;
              let tempOptions = ogVariants[j].selectedOptions;
              variantData[j].options = tempOptions.map(item => item.value);
              // fixing variantId;
              // variantData[j].id = variantData[j].variantId;
              let spliVariantId = variantData[j].id.split('/');
              let variantId = spliVariantId[spliVariantId.length-1];
              variantData[j].variantId = variantId;
              variantData[j].variant_id = variantId;
              variantData[j].id = variantId
              // publicTitle????

            }
            currProduct.variants = variantData;
            returningArray.push(currProduct);
        }

        return returningArray;

      }catch(error){
        gfb.utility.debugConsole("error in dataMappingFromGraphQL ", error);
      }
    },
    getDataFromMetaObjects: async function(){
      try{
        let type = gfb.state.app_id
        let query = `
              query GetMetaobjects($type: String!) {
                metaobjects(first:50,type: $type) {
                  nodes {
                    id
                    handle
                    fields {
                      key
                      reference
                      type
                      value
                    }
                  }
                }
              }
            `;

            // Define the variables to pass into the GraphQL query
            const variables = {
              type: type
            };
        let data = await gfb.utility.graphQlAPIWrapper(query, variables);
        let currentValue = data.data.metaobjects.nodes[0].fields[0].value.length;
        if(currentValue > 1900000){
          return false;
        }
        data = JSON.parse(data.data.metaobjects.nodes[0].fields[0].value)
        gfb.utility.debugConsole('data --> ', data);
        return data;

      }catch(err){
        gfb.utility.debugConsole("error inside getDataFromMetaObjects ", err);
      }
    },
    getSetDataFromLocalStorage: function(key, value, operation){
      try{
        if(operation == "GET"){
          let res = localStorage.getItem(key);
          return res
        }else if(operation == "SET"){
          let res = localStorage.setItem(key, value);
          return res;
        }
      }catch(err){
        gfb.utility.debugConsole("err in getSetdataFromLocalStorage => ", err);
      }
    },
    formatLiquidToFetchJSData: function(product){
      try{
        
        //conver the product data from liquid to productdatav2 format
        let options = [];
        if(product && product.options && product.variants){
          for (let i = 0; i < product.options.length; i++) {
            let optionName = product.options[i];
            let values = [];

            // Extract unique values for this option across all variants
            for (let variant of product.variants) {
                let value = variant[`option${i + 1}`];
                if (values.indexOf(value) === -1) {
                    values.push(value);
                }
            }

            options.push({
                name: optionName,
                position: i + 1,
                values: values
            });
          }
        }else{
          product.dataFromLiquid = true
          return false;
        }
        
        product.options = options;
        product.dataFromLiquid = true

        return product;

      }catch(err){
        gfb.utility.debugConsole("error in formatLiquidToFetchJSData => ", err)
        return null;
      }
    },
    setWindowDataIfEmpty: function(){
      try{

        if(!window.currentProductParentData){
          window.currentProductParentData = meta.product;
        }

      }catch(err){
        gfb.utility.debugConsole("error in setWindowDataIfEmpty => ", err);
      }
    },
    setCachedProductDataUsingSessionStorage: function(){
      try {
        //fetch gfbCachedProductData from session storage and set it in gfb.state.cachedProductData
        let cachedProductData = sessionStorage.getItem("gfbCachedProductData");
        if (cachedProductData && cachedProductData != "undefined") {
          //fetch data and set one by one in gfb.state.cachedProductData
          let parsedData = JSON.parse(cachedProductData);
          if(parsedData && parsedData.length > 0){
            for(let i=0; i<parsedData.length; i++){
              let product = parsedData[i];
              gfb.state.cachedProductData.set(product.handle, product);
            }
          }
        }
        
      } catch (error) {
        gfb.utility.debugConsole("error in setCachedProductDataUsingSessionStorage => ", error);
      }
    },
    setCachedProductDataUsingLiquidData: function(){
      try{

        let liquidProducts = []
        if(window.currentProductParentData){
          let data  = gfb.utility.formatLiquidToFetchJSData(window.currentProductParentData);
          if(data){
            liquidProducts.push(data);
          }
        }

        if(window.currentProductChildData){
          let data = window.currentProductChildData;
          for(let i=0; i<data.length; i++){
            let product = data[i];
            let formattedData = gfb.utility.formatLiquidToFetchJSData(product);
            liquidProducts.push(formattedData);
          }
        }

        for(let i=0; i<liquidProducts.length; i++){
          let product = liquidProducts[i];
          // gfb.state.cachedProductData.set(product.handle, product);
          gfb.utility.setCachedProductDataInMapAndStorage(product.handle, product);

        }

      }catch(err){
        gfb.utility.debugConsole("error in setCachedProductData => ", err);
      }
    },
    setStateUsingLiquidData: function(){
      try{
        if(window && window.currentProductParentData){
            gfb.state.currentProductData =  window.currentProductParentData
        }
        if(window && window.isCurrentProductIsFBT){
          gfb.state.isCurrentProductIsFBT = window.isCurrentProductIsFBT
        }
        if(window && window.isCurrentProductIsVolumeBundle){
          gfb.state.isCurrentProductIsVolumeBundle = window.isCurrentProductIsVolumeBundle
        }

      }catch(err){
        gfb.utility.debugConsole("error in setStateUsingLiquidData => ", err);
      }
    },
    filterFBTAndVolumeBundleSettings: function(cart_settings){
      try {
        let currentProductParentData = undefined
        if(window && window.currentProductParentData){
          currentProductParentData =  window.currentProductParentData
        }
    
        if(window && window.isCurrentProductIsFBT && currentProductParentData){
          gfb.state.isCurrentProductIsFBT = window.isCurrentProductIsFBT
          //filter other records from cart_settings.frequentBoughtData
          let frequentBoughtData = cart_settings.frequentBoughtData;
          if(frequentBoughtData && frequentBoughtData.length > 0){

          let filteredFrequentBoughtData =  frequentBoughtData.filter(item => item.bundleShopifyData && item.bundleShopifyData.id && item.bundleShopifyData.id == currentProductParentData.id);
          cart_settings.frequentBoughtData = filteredFrequentBoughtData;
          }
        }

        if(window && window.isCurrentProductIsVolumeBundle && currentProductParentData){
          gfb.state.isCurrentProductIsVolumeBundle = window.isCurrentProductIsVolumeBundle

          //filter other records from cart_settings.volumeBundleData
          let volumeDiscounts = cart_settings.volumeDiscountData;
          let volumeDiscountFound = false 

          for(let i=0;i<volumeDiscounts.length;i++){

            if(volumeDiscountFound){
              break;
            }
            
            let volumeDiscount = volumeDiscounts[i]
            if(volumeDiscount && volumeDiscount.type === "VOLUME_BUNDLE" && volumeDiscount.isActive){
              //check volumeDiscount.selectedProducts and check if current product is in the list
              let selectedProducts = volumeDiscount.selectedProducts
              for(let j=0;j<selectedProducts.length;j++){
                let selectedProduct = selectedProducts[j]
                if(selectedProduct && selectedProduct.productId == currentProductData.productId){
                  cart_settings.volumeDiscountData = [volumeDiscount]
                  volumeDiscountFound = true
                  break;
                }
              }
            }

          }
        }
        return cart_settings
        
      } catch (error) {
        gfb.utility.debugConsole("error in filterFBTAndVolumeBundleSettings => ", error);
        return null
      }
    },
    slideUp: function(target, duration = 100) {
      target.style.transitionProperty = 'height, margin, padding';
      target.style.transitionDuration = duration + 'ms';
      target.style.boxSizing = 'border-box';
      target.style.height = target.offsetHeight + 'px';
      target.offsetHeight;
      target.style.overflow = 'hidden';
      target.style.height = 0;
      target.style.paddingTop = 0;
      target.style.paddingBottom = 0;
      target.style.marginTop = 0;
      target.style.marginBottom = 0;
      window.setTimeout(() => {
          target.style.display = 'none';
          target.style.removeProperty('height');
          target.style.removeProperty('padding-top');
          target.style.removeProperty('padding-bottom');
          target.style.removeProperty('margin-top');
          target.style.removeProperty('margin-bottom');
          target.style.removeProperty('overflow');
          target.style.removeProperty('transition-duration');
          target.style.removeProperty('transition-property');
      }, duration);
    },
    slideDown: function(target, duration = 100) {
      target.style.removeProperty('display');
      let display = window.getComputedStyle(target).display;
      if (display === 'none') display = 'block';
      target.style.display = display;
      let height = target.offsetHeight;
      target.style.overflow = 'hidden';
      target.style.height = 0;
      target.style.paddingTop = 0;
      target.style.paddingBottom = 0;
      target.style.marginTop = 0;
      target.style.marginBottom = 0;
      target.offsetHeight;
      target.style.boxSizing = 'border-box';
      target.style.transitionProperty = "height, margin, padding";
      target.style.transitionDuration = duration + 'ms';
      target.style.height = height + 'px';
      target.style.removeProperty('padding-top');
      target.style.removeProperty('padding-bottom');
      target.style.removeProperty('margin-top');
      target.style.removeProperty('margin-bottom');
      window.setTimeout(() => {
          target.style.removeProperty('height');
          target.style.removeProperty('overflow');
          target.style.removeProperty('transition-duration');
          target.style.removeProperty('transition-property');
      }, duration);
    },
    findElementsContainingText: function(text, context = document, parentSelector) {
      return Array.from(context.querySelectorAll(parentSelector)).filter(element => {
         return element.textContent.includes(text);
      });
     },
     preLoadImages: function(urls){
      // download images using promise.all from urls array
      return Promise.all(urls.map(url => {
        return new Promise((resolve, reject) => {
          const image = new Image();
          image.src = url;
          image.onload = resolve;
          image.onerror = reject;
        });
      }));
     },
    updateBundeViews: async function(option){
      try{

        let shopName = window.Shopify.shop
        let bundles;
        if(option == "VOLUME_BUNDLES"){
          bundles = gfb.gfbVolumeDiscount.state.activeOffer;
        }else if(option == "FREQUENT_BOUGHTS"){
          bundles = gfb.gfbFrequentBought.state.activeOffer;
        }
        let data = {
          shopName: shopName,
          bundles: bundles
        }
        let domain = `https://prod.backend.echofixedbundle.giftkart.app`
        fetch(`${domain}/api/orders/updateBundleViews`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ data }),
        })
          .then((response) => response.json())
          .then((data) => {
            gfb.utility.debugConsole("updateBundleView", data);
          });
        

      }catch(err){
        gfb.utility.debugConsole("error in updateBundeViews => ", err);
      }
    },
  },
  customComponents: {
    dropdown: function (offerId, gfbFrequentBoughtProductArgs, gfbFrequentBoughtOptionArgs){
      try{
        //gfbFrequentBoughtSingleDropdownContainer
        let { productHandle , productId , selectedVariantForProduct , currentSelectedVariantsByOptionsForProduct } = gfbFrequentBoughtProductArgs;
        let { options , optionIndex } = gfbFrequentBoughtOptionArgs;

        let variantData = gfb.gfbFrequentBought.state.frequentBoughtShopifyDataByVariantIds[selectedVariantForProduct.id];
        let activeIndex = gfb.gfbFrequentBought.f.gfbFindIndexOfActiveVariant(optionIndex, options.values, currentSelectedVariantsByOptionsForProduct);

        let gfbFrequentBoughtSingleDropdownContainer = document.createElement('div');
        gfbFrequentBoughtSingleDropdownContainer.classList.add('gfbFrequentBoughtSingleDropdownContainer');

        // Create a div element and add class "gfbFrequentBoughtSingleDropdownHeading", set inner HTML to options.name
        const gfbFrequentBoughtSingleDropdownHeading = document.createElement("div");
        gfbFrequentBoughtSingleDropdownHeading.classList.add("gfbFrequentBoughtSingleDropdownHeading");
        gfbFrequentBoughtSingleDropdownHeading.innerHTML = options.name;

        let gfbFrequentBoughtSingleDropdownSelector = document.createElement("div");
        // gfbFrequentBoughtSingleDropdownSelector.classList.add("gfbFrequentBoughtSingleDropdownSelector");
        gfbFrequentBoughtSingleDropdownSelector.classList.add("gfbFrequentBoughtSingleDropdownSelectorNew");
        for(let i=0; i<options.values.length; i++){
          let filterValue = options.values[i];
          let currentSelectedVariant = [...variantData.options];
          currentSelectedVariant[optionIndex] = filterValue.label;
          let public_title = currentSelectedVariant.join("/");
          let optionData = gfb.gfbFrequentBought.state.optionImageMapByOffer[offerId][productId][public_title];
          if(!optionData){
            continue;
          }

          let gfbFrequentBoughtSingleDropdownOption = document.createElement("div");
          gfbFrequentBoughtSingleDropdownOption.classList.add("gfbSingleDropdownOption");

          // image for option
          let gfbFrequentBoughtSingleDropdownOptionImageContainer = document.createElement("div");
          gfbFrequentBoughtSingleDropdownOptionImageContainer.classList.add("gfbSingleDropdownOptionImageContainer");

          let gfbFrequentBoughtSingleDropdownOptionImage = document.createElement("img");
          gfbFrequentBoughtSingleDropdownOptionImage.classList.add("gfbSingleDropdownOptionImage");
          gfbFrequentBoughtSingleDropdownOptionImage.src = optionData.imageLink;
          gfbFrequentBoughtSingleDropdownOptionImageContainer.appendChild(gfbFrequentBoughtSingleDropdownOptionImage);

          // text for option
          let gfbFrequentBoughtSingleDropdownOptionText = document.createElement("div");
          gfbFrequentBoughtSingleDropdownOptionText.classList.add("gfbSingleDropdownOptionText");
          gfbFrequentBoughtSingleDropdownOptionText.textContent = filterValue.label;

          gfbFrequentBoughtSingleDropdownOption.appendChild(gfbFrequentBoughtSingleDropdownOptionImageContainer);
          gfbFrequentBoughtSingleDropdownOption.appendChild(gfbFrequentBoughtSingleDropdownOptionText);

          // setting attributes
          gfbFrequentBoughtSingleDropdownOption.setAttribute("value", filterValue.label);
          gfbFrequentBoughtSingleDropdownOption.setAttribute("data-label", filterValue.label);
          gfbFrequentBoughtSingleDropdownOption.setAttribute("data-product-handle", productHandle);
          gfbFrequentBoughtSingleDropdownOption.setAttribute("data-offer-id", offerId);
          gfbFrequentBoughtSingleDropdownOption.setAttribute("data-label-index", optionIndex);
          if (i == activeIndex) {
            // make this option selected option in dropDown
            gfbFrequentBoughtSingleDropdownOption.classList.add("gfbSingleDropdownOptionSelected");
          }else{
            gfbFrequentBoughtSingleDropdownOption.classList.remove("gfbSingleDropdownOptionNotSelected");
        }
          if (optionData.isAvailable) {
            gfbFrequentBoughtSingleDropdownSelector.appendChild(gfbFrequentBoughtSingleDropdownOption);
          }
        }

        gfbFrequentBoughtSingleDropdownContainer.appendChild(gfbFrequentBoughtSingleDropdownHeading);
        gfbFrequentBoughtSingleDropdownContainer.appendChild(gfbFrequentBoughtSingleDropdownSelector);


        return gfbFrequentBoughtSingleDropdownContainer;


      }catch(err){
        gfb.utility.debugConsole("error in customComponents.dropdown => ", err);
      }
    },
  },
  homePage: {
    init: async function (settings) {
      gfb.gfbCustomHomePageWrapper.init(settings , 'HOME');
    },
    f: {
      insertWrapperIntoPage: function (settings) {
        let customWrapper = document.querySelectorAll(".gfbCustomHomePageWrapper");

        if(customWrapper && customWrapper.length > 0){
          return;
        }
      }
    }
  },
  productPage: {
    init: async function (settings) {
      gfb.utility.debugConsole("benchmark for product page");
      gfb.utility.debugConsole("productPage-init");
      gfb.productPage.f.insertWrapperIntoPage(settings);

      // start code from here
      gfb.gfbFrequentBought.init(settings, "PRODUCT_PAGE");
      gfb.gfbVolumeDiscount.init(settings, "PRODUCT_PAGE");
      gfb.gfbOverWriteBundleDisplayDataInCart.init( settings, "PRODUCT_PAGE")
      gfb.utility.debugConsole("benchmark for product page");

    },
    f: {
      insertWrapperIntoPage: function (settings) {
        // Configuration for app blocks and corresponding embed selectors
        const blockConfig = [
          {
            appBlockSelector: '.gfbFBTBlock', // App block selector
            appEmbedHtmlClass: 'gfbFrequentBoughtWrapper', // App Embed selector to add if block not present
            name: 'Frequent Bought'
          },
          {
            appBlockSelector: '.gfbUpsellBlock',
            appEmbedHtmlClass: 'gfbBundleUpsellWrapper',
            name: 'Bundle Upsell'
          },
          {
            appBlockSelector: '.gfbVolumeBlock',
            appEmbedHtmlClass: 'gfbVolumeBundleWrapper',
            name: 'Volume Bundle'
          },
        ];
      
        let htmlToInsert = '';
      
        // Check each app block and add embed element if needed
        for (const config of blockConfig) {
          const existingBlock = document.querySelectorAll(config.appBlockSelector);
          
          if (existingBlock && existingBlock.length > 0) {
            gfb.utility.debugConsole(`${config.name} block already present`);
          } else {
            htmlToInsert += `<div class="${config.appEmbedHtmlClass}"></div>`;
          }
        }

        // Check if we can insert embed elements
        const canInsertEmbeds = htmlToInsert && typeof gfb !== "undefined" && typeof gfb.elements.addToCartBtn !== "undefined";

        if(!canInsertEmbeds){
          return;
        }

        // Insert embed elements if any are needed and GFB is initialized
        const addToCartBtns = document.querySelectorAll(gfb.selectors.addToCart);

        const htmlElementToInsert = document.createElement("div");
        htmlElementToInsert.classList.add("gfbPageWrapper" , "gfbProductPageWrapperV2")
        htmlElementToInsert.innerHTML = htmlToInsert;

        for (const btn of addToCartBtns) {
          if (btn.style.display !== "none") {
            if (gfb.settings.app.addAfterAddTocartBtn) {
              btn.parentNode.after(htmlElementToInsert);
            } else {
              btn.parentNode.insertBefore(htmlElementToInsert, btn);
            }
          }
        }
      },
      removeUpsellWrapperFromPage: function (){
        try{
          const elementsToRemove = document.querySelectorAll('.gfbPageWrapper.gfbProductPageWrapperV2 .gfbBundleUpsellWrapper');

          // Loop through each element and remove it
          elementsToRemove.forEach(element => {
              element.remove();
          });
        }catch(err){
          gfb.utility.debugConsole("error in removeUpsellWrapperFromPage => ", err);
        }
      },
      removeVolumeDiscountWrapperFromPage: function (){
        try{
          const elementsToRemove = document.querySelectorAll('.gfbPageWrapper.gfbProductPageWrapperV2 .gfbVolumeBundleWrapper');

          // Loop through each element and remove it
          elementsToRemove.forEach(element => {
              element.remove();
          });
        }catch(err){
          gfb.utility.debugConsole("error in removeVolumeDiscountWrapperFromPage => ", err);
        }
      },
      removeFrequentBoughtWrapperFromPage: function (){
        try{
          const elementsToRemove = document.querySelectorAll('.gfbPageWrapper.gfbProductPageWrapperV2 .gfbFrequentBoughtWrapper');

          // Loop through each element and remove it
          elementsToRemove.forEach(element => {
              element.remove();
          });
        }catch(err){
          gfb.utility.debugConsole("error in removeFrequentBoughtWrapperFromPage => ", err);
        }
      },
      insertCustomUpsellWrapperIntoPage: function (selectors, position) {
        try{
          
          if (typeof gfb !== "undefined") {
            const addToCartBtns = document.querySelectorAll(selectors);
            let displayWidgetAbove = false;
            if(position == "above"){
              displayWidgetAbove = true;
            }

            addToCartBtns.forEach(function (btn) {
              if (btn.style.display !== "none") { // Check visibility
                const customUpsellWrapperV2 = gfb.elements.customUpsellWrapperV2;
          
                if (displayWidgetAbove) {
                  btn.parentNode.after(customUpsellWrapperV2); // Insert after
                } else {
                  btn.parentNode.insertBefore(customUpsellWrapperV2, btn); // Insert before
                }
              }
            });
          }

        }catch(err){
          gfb.utility.debugConsole("error in insertCustomUpsellWrapperIntoPage => ", err);
        }
      },
      insertCustomVolumeDiscountWrapperIntoPage: function (selectors, position) {
        try{
          
          if (typeof gfb !== "undefined") {
            const addToCartBtns = document.querySelectorAll(selectors);
            let displayWidgetAbove = false;
            if(position == "above"){
              displayWidgetAbove = true;
            }

            addToCartBtns.forEach(function (btn) {
              if (btn.style.display !== "none") { // Check visibility
                const customVolumeBundleWrapperV2 = gfb.elements.customVolumeBundleWrapperV2;
          
                if (displayWidgetAbove) {
                  btn.parentNode.after(customVolumeBundleWrapperV2); // Insert after
                } else {
                  btn.parentNode.insertBefore(customVolumeBundleWrapperV2, btn); // Insert before
                }
              }
            });
          }

        }catch(err){
          gfb.utility.debugConsole("error in insertCustomVolumeDiscountWrapperIntoPage => ", err);
        }
      },
      insertCustomFrequentBoughtWrapperIntoPage: function (selectors, position) {
        try{
          
          if (typeof gfb !== "undefined") {
            const addToCartBtns = document.querySelectorAll(selectors);
            let displayWidgetAbove = false;
            if(position == "above"){
              displayWidgetAbove = true;
            }

            addToCartBtns.forEach(function (btn) {
              if (btn.style.display !== "none") { // Check visibility
                const customFrequentBoughtWrapperV2 = gfb.elements.customFrequentBoughtWrapperV2;
          
                if (displayWidgetAbove) {
                  btn.parentNode.after(customFrequentBoughtWrapperV2); // Insert after
                } else {
                  btn.parentNode.insertBefore(customFrequentBoughtWrapperV2, btn); // Insert before
                }
              }
            });
          }

        }catch(err){
          gfb.utility.debugConsole("error in insertCustomFrequentBoughtWrapperIntoPage => ", err);
        }
      },
    },

    actions: {
      insertUpsellModal: function () {
        //   Gs.$("body").append(Gs.settings._modalHtml);
        alert("popModal for upsell action");
      },
    },
  },
  cartPage: {
    init: async function (settings) {
      gfb.utility.debugConsole("benchmark for cart page");
      gfb.utility.debugConsole("cartPage-init");
      gfb.cartPage.f.insertWrapperIntoPage(settings);
      gfb.gfbFrequentBought.init(settings, "CART_PAGE");
      gfb.gfbOverWriteBundleDisplayDataInCart.init( settings, "CART_PAGE")
      gfb.utility.debugConsole("benchmark for cart page");
    },
    f: {
      insertWrapperIntoPage: function (settings) {
        let cartPageWrapperElement = document.querySelectorAll(".gfbCartPageAppBlock");

        // if app block skeleton is present, then just return it as it is already populated
        if (cartPageWrapperElement && cartPageWrapperElement.length > 0) {
          // if page_type is cart then return and empty the div
          gfb.utility.debugConsole("cartPageWrapperElement already present");
          return;
        }

        //else insert the UI element in the page based on the placement of
                // 1. Check if the stuff we need exists
                // 2. Find all the "add to cart" buttons on the page
                // 3. Go through each button one by one
                // 4. Is this button actually visible?
                // 5. Create the new thing we want to add (you'll need the HTML for this part)
                // 6. Decide where to put the new thing
        return new Promise((res, rej) => {
          if ("undefined" != typeof gfb.elements.checkoutBtn) {
            let checkoutBtnEle = document.querySelectorAll(gfb.selectors.checkoutBtn);
            checkoutBtnEle.forEach(function (btn) {
              // console.log("index", index)
              if (btn.style.display !== "none") {

                const cartPageWrapper = gfb.elements.cartPageWrapperV2

                // check if theme ids matches otherwise add element to default position
                if (window.Shopify && window.Shopify.theme && window.Shopify.theme.theme_store_id && window.Shopify.theme.theme_store_id == gfb.constants.themesIds.DAWN_THEME) {
                  btn.parentNode.insertBefore(cartPageWrapper, btn.nextSibling);
                } else if (gfb.settings.app.addAftercheckoutBtn) {
                  btn.parentNode.insertBefore(cartPageWrapper, btn.nextSibling);
                } else {
                  btn.parentNode.insertBefore(cartPageWrapper, btn);
                }
              }
            });
          }
          res();
        });
      },
    },
    events: {},
  },
  gfbFrequentBought: {
    state: {
      frequentBoughtShopifyData: [],
      frequentBoughtShopifyDataByVariantIds: {},
      frequentBoughtShopifyDataByHandles: {},
      frequentBoughtShopifyDataByProductIds: {},
      frequentBoughtDataByOfferId: {},
      currentSelectedVariants: {},
      currentSelectedOptions: {},
      graphQLObject: {},
      optionImageMapByOffer: {},
      isAnyProductOutOfStock: false,
      horizontalDisplayDesign: false,
      minimumItemsInCart: 2,
      stylingGuide: {},
      activeOffer: [],
    },
    init: async function (settings, parent) {
      let productPageHandle = gfb.state.productPageHandle;

      if (!productPageHandle) {
        productPageHandle = gfb.f.getProductPageHandle();
        gfb.state.productPageHandle = productPageHandle;
      }
      await gfb.gfbFrequentBought.initialize(settings, parent);
      gfb.utility.debugConsole("finally running frequently bought feature");
      gfb.gfbFrequentBought.f.gfbFrequentBoughtCheckContainerOverflow();
      gfb.gfbFrequentBought.f.registerEvents();
    },
    initialize: async function (settings, parent) {
      try {

        gfb.utility.debugConsole("benchmark for frequent bought");
        // removeNonEligibleUpsellOffers
        gfb.gfbFrequentBought.f.deriveWidgetDataForFBT(settings, parent);
        gfb.gfbFrequentBought.f.gfbVariantDisplayAsPerScreen();
        gfb.gfbFrequentBought.f.deriveVariantDesign();
        gfb.utility.debugConsole("benchmark for frequent bought prefetch data");
        await gfb.gfbFrequentBought.f.prefetchDataForFBT();
        gfb.utility.debugConsole("benchmark for frequent bought prefetch data")
        gfb.gfbFrequentBought.f.deriveOptionImages();
        // if the current offer is relevant to the current page then render the UI

        let gfbFrequentBoughtWidgetsHTML = gfb.gfbFrequentBought.f.prepareWidgets(settings, parent);
        if (parent == "PRODUCT_PAGE") {
          gfb.gfbFrequentBought.f.customWrapperPreparationFBT(settings);
          gfb.gfbFrequentBought.f.insertIntoPageWrapper(gfbFrequentBoughtWidgetsHTML, parent);


          gfb.utility.debugConsole("render on product page");
        }
        // else if(parent == "CART_PAGE"){
        //   gfb.gfbFrequentBought.f.customWrapperPreparationFBT(settings);
        //   gfb.gfbFrequentBought.f.insertIntoPageWrapper(gfbFrequentBoughtWidgetsHTML, parent);
        //   gfb.utility.debugConsole("render on cart page");
        // }
        // gfb.f.addPoweredByBlock();
        gfb.utility.debugConsole("benchmark for frequent bought");
        await gfb.utility.updateBundeViews("FREQUENT_BOUGHTS");
      } catch (error) {
        gfb.utility.debugConsole("error inside bogo initialize", error);
      }
    },
    f: {
      customWrapperPreparationFBT: function (settings) {
        try{

          let frequentBoughtData = settings.frequentBoughtData;
          for(let i=0; i<frequentBoughtData.length; i++){
            let currentOffer = frequentBoughtData[i];
            let advancedConfig = currentOffer.advancedConfiguration;
            let offerType = currentOffer.type;
            let isMobileView = gfb.utility.isMobileView();
            let isCustomSelectorActive = false;
            let customSelector;
            let customSelectorRelativePostion;

            if(!advancedConfig.offerLevelSelectorEnabled){
              continue;
            }

            if(isMobileView){
              let offerLevelSelector = advancedConfig?.offerLevelSelector_Mobile || {};
              customSelector = offerLevelSelector?.selector || "";
              customSelectorRelativePostion = offerLevelSelector?.position || "";
  
              if(customSelector != "" || customSelectorRelativePostion != ""){
                isCustomSelectorActive = true;
              }
            }else{
              let offerLevelSelector = advancedConfig?.offerLevelSelector_Desktop || {};
              customSelector = offerLevelSelector?.selector || "";
              customSelectorRelativePostion = offerLevelSelector?.position || "";
              
              if(customSelector != "" || customSelectorRelativePostion != ""){
                isCustomSelectorActive = true;
              }
            }

            if(isCustomSelectorActive){
              if(offerType == "BUNDLE_UPSELL"){
                gfb.productPage.f.removeUpsellWrapperFromPage();
                gfb.productPage.f.insertCustomUpsellWrapperIntoPage(customSelector, customSelectorRelativePostion);
              }else if(offerType == "CUSTOM_BUNDLE"){
                gfb.productPage.f.removeFrequentBoughtWrapperFromPage();
                gfb.productPage.f.insertCustomFrequentBoughtWrapperIntoPage(customSelector, customSelectorRelativePostion);
              }
            }

          }

        }catch(err){
          gfb.utility.debugConsole("error in customWrapperPreparationFBT => ", err);
        }
      },
      insertIntoPageWrapper: function (gfbMsgHtml, parent) {
        try {
          if (parent == "PRODUCT_PAGE") {
            let gfbFrequentBoughtWrapperProductEle = document.querySelectorAll(".gfbFrequentBoughtWrapper");
            let gfbUpsellWrapperProductEle = document.querySelectorAll('.gfbBundleUpsellWrapper');

            let gfbFrequentBoughtWrapperProductEleClone = gfbMsgHtml.cloneNode(true);
            
            let regularOfferContainer = document.createElement("div");
            let bundleUpsellContainer = document.createElement("div");

            let childrenElements = gfbFrequentBoughtWrapperProductEleClone.children;
            for (let i = 0; i < childrenElements.length; i++) {
              let currEle = childrenElements[i];
              if(currEle.classList.contains("gfbFrequentBoughtWidgetOfferContainerBundleUpsell")){
                let clonedChild = currEle.cloneNode(true);
                bundleUpsellContainer.appendChild(clonedChild);
              }else if(currEle.classList.contains("gfbFrequentBoughtWidgetOfferContainerBundleRegular")){
                let clonedChild = currEle.cloneNode(true);
                regularOfferContainer.appendChild(clonedChild);
              }
            }

            // search for the container of current iterated offer
            // search for checkboxes, and change their value as per the current selected variant

          gfbFrequentBoughtWrapperProductEle.forEach(function(element) {
            let clonedNode = regularOfferContainer.cloneNode(true);
            element.appendChild(clonedNode);
            // element.innerHTML = regularOfferContainer.innerHTML; // -> when converted to cloneNode, this started breaking liquid code 🤷‍♀️

          });

          gfbUpsellWrapperProductEle.forEach(function(element) {

            let clonedNode = bundleUpsellContainer.cloneNode(true);
            element.appendChild(clonedNode);
            // element.innerHTML = bundleUpsellContainer.innerHTML; // -> when converted to cloneNode, this started breaking liquid code 🤷‍♀️

          });

          } else if (parent == "CART_PAGE") {
            // currently not doing anything on cart page for frequently bought
            gfb.utility.debugConsole('cart page -> ', gfbMsgHtml);
          }
        } catch (error) {
          gfb.utility.debugConsole(error);
        }
      },
      gfbVariantDisplayAsPerScreen: function(){
        try{
          let settings = JSON.parse(JSON.stringify(gfb.settings));
          let fbtOffers = settings.frequentBoughtData;
          for(let i=0; i<fbtOffers.length; i++){
            let isMobileView = gfb.utility.isMobileView();
            let variantDisplayDesign = fbtOffers[i].variantDisplayDesign;
            let advancedConfig = fbtOffers[i].advancedConfiguration;
            let isCustomMobileDesignActive = advancedConfig.showVariantDisplayDesign_Mobile || false
            let selectedProducts = fbtOffers[i].selectedProducts;
            for (let j = 0; j < selectedProducts.length; j++) {
              let product = selectedProducts[j];
              let options = product.options;
              for (let k = 0; k < options.length; k++) {
                  let currOption = options[k];
                  if(variantDisplayDesign.isManualVariantDesign){
                    if(isMobileView){
                      currOption.selectedDesign = isCustomMobileDesignActive ? currOption.selectedDesign_mobile : currOption.selectedDesign_desktop;
                      variantDisplayDesign.manualVariantDesign = isCustomMobileDesignActive ? variantDisplayDesign.manualVariantDesign_Mobile : variantDisplayDesign.manualVariantDesign_Desktop;
                    }else{
                      currOption.selectedDesign = currOption.selectedDesign_desktop || currOption.selectedDesign;
                      variantDisplayDesign.manualVariantDesign = variantDisplayDesign.manualVariantDesign_Desktop || variantDisplayDesign.manualVariantDesign || variantDisplayDesign.manualVariantDesign_Mobile;
                    }
                  }
              }
            }
          }
          gfb.settings = settings;
        }catch(err){
          gfb.utility.debugConsole("error in gfbVariantDisplayAsPerScreen => ", err);
        }
      },
      gfbFrequentBoughtAddTemplateSpecificCss: function (currentOffer) {
        try{
          let customCss = currentOffer?.templateDesignCss || "";
          const styleElement = document.createElement("style");
          styleElement.textContent = customCss;
          document.head.appendChild(styleElement);
        }catch(err){
          gfb.utility.debugConsole("error in gfbFrequentBoughtAddTemplateSpecificCss => ", err);
        }
      },
      gfbFrequentBoughtUpsellAddThemeEditorImposedChanges: function(customDesignObject){
        try{
          let settingsBlock = window.upsellBlockSettings;

          let styles =  `
          .gfbFrequentBoughtAddToCartButton{
            background-color: ${settingsBlock?.atbBgColor} !important;
            border-radius: ${settingsBlock?.atbBorRadius}px !important;
            color: ${settingsBlock?.atbColor} !important;
            padding: ${settingsBlock?.atbPadding}px !important;
          }
          .gfbFrequentBoughtWidgetContainer{
            background-color: ${settingsBlock?.bgColor} !important;
            border-color: ${settingsBlock?.borColor} !important;
            border-radius: ${settingsBlock?.borRadius}px !important;
          }
          .gfbFrequentBoughtWidgetTitle{
            color: ${settingsBlock?.hTextColor} !important;
            font-size: ${settingsBlock?.hTextSize}px !important;
          }
          .gfbFrequentBoughtWidgetSubTitle{
            color: ${settingsBlock?.subhTextColor} !important;
          }
          .gfbFrequentBoughtWidgetProductImage{
            width: ${settingsBlock?.pImageSize}px !important;
            height: ${settingsBlock?.pImageSize}px !important;
          }
          .gfbFrequentBoughtWidgetProductImageEle{
            object-fit: ${settingsBlock?.pImageObjectFit} !important;
            border-radius: ${settingsBlock?.pImgBorRadius}px !important;
          }
          .gfbFrequentBoughtWidgetProductTitle{
            color: ${settingsBlock?.pTitleColor} !important;
          }
          .gfbFrequentBoughtWidgetProductPriceDiscounted{
            color: ${settingsBlock?.pPriceColor} !important;
          }
          .gfbFrequentBoughtWidgetProductPriceOriginal{
            color: ${settingsBlock?.pDiscountedPriceColor} !important;
          }
          .gfbFrequentBoughtSwatchColorUI, .gfbFrequentBoughtLabelPillsUI{
            border-radius: ${settingsBlock?.varBorRadius}px !important;
          }
          .gfbFrequentBoughtSwatchColorUISelected, .gfbFrequentBoughtLabelPillsUISelected{
            border: 1px solid ${settingsBlock?.varBorColor} !important;
          }
          .gfbFrequentBoughtSingleDropdownSelector, .gfbFrequentBoughtLabelPillsUI{
            background-color: ${settingsBlock.varBgColor} !important;
            color: ${settingsBlock.varColor} !important;
          }
          .gfbFrequentBoughtWidgetPriceContainerText{
            color: ${settingsBlock?.tPriceLabelColor} !important;
          }
          .gfbFrequentBoughtWidgetPriceContainerPriceDiscounted{
            color: ${settingsBlock?.tDiscountedPriceColor} !important;
          }
          .gfbFrequentBoughtWidgetPriceContainerPriceOriginal{
            color: ${settingsBlock?.tPriceColor} !important;
          }
          .gfbFrequentBoughtQuanityBoxLabel{
            color: ${settingsBlock?.qtyLabelColor} !important;
          }
          .gfbFrequentBoughtWidgetRuler .gfbVolumeDiscountProcuctHorizontalLine{
            background: ${settingsBlock?.borColor} !important;
            border-color: ${settingsBlock?.borColor} !important;
          }
          .gfbFrequentBoughtWidgetProductContainer{
            border-bottom: 1px solid ${settingsBlock?.borColor} !important;
          }

        `

          const styleElement = document.createElement('style');
          styleElement.textContent = styles;
          document.head.appendChild(styleElement);

          // gfb.gfbFrequentBought.state.stylingGuide = customDesignObject;

        }catch(err){
          gfb.utility.debugConsole("error in gfbFrequentBoughtUpsellAddThemeEditorImposedChanges => ", err);
        }
      },
      gfbFrequentBoughtFixedAddThemeEditorImposedChanges: function(customDesignObject){
        try{
          let settingsBlock = window.fbtBlockSettings;
          
          let styles =  `
          .gfbFrequentBoughtAddToCartButton{
            background-color: ${settingsBlock?.atbBgColor} !important;
            border-radius: ${settingsBlock?.atbBorRadius}px !important;
            color: ${settingsBlock?.atbColor} !important;
            padding: ${settingsBlock?.atbPadding}px !important;
          }
          .gfbFrequentBoughtWidgetContainer{
            background-color: ${settingsBlock?.bgColor} !important;
            border-color: ${settingsBlock?.borColor} !important;
            border-radius: ${settingsBlock?.borRadius}px !important;
          }
          .gfbFrequentBoughtWidgetTitle{
            color: ${settingsBlock?.hTextColor} !important;
            font-size: ${settingsBlock?.hTextSize}px !important;
          }
          .gfbFrequentBoughtWidgetSubTitle{
            color: ${settingsBlock?.subhTextColor} !important;
          }
          .gfbFrequentBoughtWidgetProductImage{
            width: ${settingsBlock?.pImageSize}px !important;
            height: ${settingsBlock?.pImageSize}px !important;
          }
          .gfbFrequentBoughtWidgetProductImageEle{
            object-fit: ${settingsBlock?.pImageObjectFit} !important;
            border-radius: ${settingsBlock?.pImgBorRadius}px !important;
          }
          .gfbFrequentBoughtWidgetProductTitle{
            color: ${settingsBlock?.pTitleColor} !important;
          }
          .gfbFrequentBoughtWidgetProductPriceDiscounted{
            color: ${settingsBlock?.pPriceColor} !important;
          }
          .gfbFrequentBoughtWidgetProductPriceOriginal{
            color: ${settingsBlock?.pDiscountedPriceColor} !important;
          }
          .gfbFrequentBoughtSwatchColorUI, .gfbFrequentBoughtLabelPillsUI{
            border-radius: ${settingsBlock?.varBorRadius}px !important;
          }
          .gfbFrequentBoughtSwatchColorUISelected, .gfbFrequentBoughtLabelPillsUISelected{
            border: 1px solid ${settingsBlock?.varBorColor} !important;
          }
          .gfbFrequentBoughtSingleDropdownSelector, .gfbFrequentBoughtLabelPillsUI{
            background-color: ${settingsBlock.varBgColor} !important;
            color: ${settingsBlock.varColor} !important;
          }
          .gfbFrequentBoughtWidgetPriceContainerText{
            color: ${settingsBlock?.tPriceLabelColor} !important;
          }
          .gfbFrequentBoughtWidgetPriceContainerPriceDiscounted{
            color: ${settingsBlock?.tDiscountedPriceColor} !important;
          }
          .gfbFrequentBoughtWidgetPriceContainerPriceOriginal{
            color: ${settingsBlock?.tPriceColor} !important;
          }
          .gfbFrequentBoughtQuanityBoxLabel{
            color: ${settingsBlock?.qtyLabelColor} !important;
          }
          .gfbFrequentBoughtWidgetRuler .gfbVolumeDiscountProcuctHorizontalLine{
            background: ${settingsBlock?.borColor} !important;
            border-color: ${settingsBlock?.borColor} !important;
          }
          .gfbFrequentBoughtWidgetProductContainer{
            border-bottom: 1px solid ${settingsBlock?.borColor} !important;
          }
        `

          const styleElement = document.createElement('style');
          styleElement.textContent = styles;
          document.head.appendChild(styleElement);



        // gfb.gfbFrequentBought.state.stylingGuide = customDesignObject;

        }catch(err){
          gfb.utility.debugConsole("error in gfbFrequentBoughtFixedAddThemeEditorImposedChanges => ", err);
        }
      },
      gfbFrequentBoughtAddOfferSpecificCss: function (currentOffer) {
        try {
          let isParentProduct = currentOffer.widgetDisplayOptions.parentProduct;
          const selectedTemplateDesignId = currentOffer.selectedTemplateDesignId
          if(selectedTemplateDesignId == "BUNDLE_UPSELL_HORIZONTAL_DESIGN"){
            isParentProduct = false;
          }

          const userInstalledDate = new Date(gfb.settings.merchantInfo.createdAt);
          let allowNewStyle = true;
          if(userInstalledDate <= new Date("2024-10-17")){
            allowNewStyle = false;
          }

          let customCssTotal = "";
          if (allowNewStyle) {
            const quantitySelectors = DEFAULT_quantityBtnSelectorsApp9Ext;
            const combinedSelectors = `.price, .product-form__buttons, [data-text="Add to cart"] .product-form__quantity`;
            
            if (isParentProduct) {
              const parentBundleCss = `
                ${combinedSelectors} {
                  display: none !important;
                }
              `;
              customCssTotal = parentBundleCss;
            }
          } else {
            if(isParentProduct){
              const parentBundleCss = `
                .price,
              .product-form__quantity,
              .shopify-payment-button,
              .product-form__buttons button {
                  display: none !important;
                } 
              `;
              customCssTotal = parentBundleCss;
            }
          }
          if(currentOffer.customCss){
            customCssTotal = customCssTotal + `\n` + currentOffer.customCss;
          }

          const styleElement = document.createElement('style');
          styleElement.textContent = customCssTotal;
          document.head.appendChild(styleElement);
        }catch(err){
          gfb.utility.debugConsole("error in gfbFrequentBoughtAddOfferSpecificCss => ", err);
        }
      },
      gfbFrequentBoughtPrepareUIV2: function (currentOffer) {
        try {
          let currentSelectedVariantsForOffer = {};
          let currentSelectedVariantsByOptions = {};
          let offerId = currentOffer.offerId || currentOffer.metafieldData.offerId;
          let offerData = gfb.gfbFrequentBought.state.frequentBoughtDataByOfferId[offerId];
          let selectedProducts = offerData.selectedProducts;
          let isParentProduct = currentOffer.widgetDisplayOptions.parentProduct;
          let horizontalDisplayDesign = false;
          let selectedTemplateDesignId = currentOffer?.selectedTemplateDesignId;
          if(selectedTemplateDesignId == "BUNDLE_UPSELL_HORIZONTAL_DESIGN" || selectedTemplateDesignId == "CUSTOM_BUNDLE_HORIZONTAL_DESIGN"){
            horizontalDisplayDesign = true;
            gfb.gfbFrequentBought.state.horizontalDisplayDesign = true;
          }

          for (let i = 0; i < selectedProducts.length; i++) {
            let product = selectedProducts[i];

            let isProductOutOfStock = false;
            // price = price.toFixed(2);
            let variantsArray = product.variants;
            let isComparedPriceVisible = currentOffer?.advancedConfiguration?.isComparedPriceVisible;
            // let outOfStockCnt = 0;
            let isVariantFound = false;
            for (let j = 0; j < variantsArray.length; j++) {
              let currVariant = variantsArray[j];
              let price = product?.variants[j]?.totalVariantPrice || "0.00";
              let strikeThroughPrice = price;

              if (isComparedPriceVisible) {
                strikeThroughPrice = product?.variants[j]?.strikeThroughPrice || product?.variants[j]?.totalVariantPrice || "0.00";
              }

              if (currVariant.available) {
                isVariantFound = true;
                currentSelectedVariantsForOffer[product.handle] = {
                  id: product?.variants[j]?.id || null,
                  quantity: product.quantity,
                  originalPrice: price,
                  isSelected: true,
                  selectedIndex: j,
                  image: undefined,
                  strikeThroughPrice: strikeThroughPrice,
                };
                currentSelectedVariantsByOptions[product.handle] = {
                  values: product?.variants[j]?.options,
                };

                break;
              }
              // else{
              //   outOfStockCnt++;
              // }
            }

            if (!isVariantFound) {
              currentSelectedVariantsForOffer[product.handle] = {
                id: product?.variants[0]?.id || null,
                quantity: product.quantity,
                originalPrice: 0,
                isSelected: false,
                selectedIndex: 0,
                image: undefined,
                strikeThroughPrice: product?.variants[0]?.strikeThroughPrice || product?.variants[0]?.totalVariantPrice || "0.00",
              };
              currentSelectedVariantsByOptions[product.handle] = {
                values: product?.variants[0]?.options,
              };
            }
          }
          // saving data in state
          gfb.gfbFrequentBought.state.currentSelectedVariants[offerData.offerId] = currentSelectedVariantsForOffer;
          gfb.gfbFrequentBought.state.currentSelectedOptions[offerData.offerId] = currentSelectedVariantsByOptions;

          const gfbFrequentBoughtWidgetOfferContainer = document.createElement("div");
          gfbFrequentBoughtWidgetOfferContainer.classList.add("gfbFrequentBoughtWidgetOfferContainer");
          
          gfbFrequentBoughtWidgetOfferContainer.setAttribute("data-offer-id", offerData.offerId);
          
          let gfbFrequentBoughtWidgetContainer = document.createElement("div");
          gfbFrequentBoughtWidgetContainer.classList.add("gfbFrequentBoughtWidgetContainer");
          gfbFrequentBoughtWidgetContainer.setAttribute("data-offer-id", offerData.offerId);

          const checkMadatoryProductsIsOutOfStock = selectedProducts.some(product => product.isMandatory && !product.available);
          if(horizontalDisplayDesign){
            
            gfbFrequentBoughtWidgetContainer = gfb.gfbBundleUpsellHorizontalWidget.f.prepareUI.render(gfbFrequentBoughtWidgetContainer, currentOffer);
            let gfbFrequentBoughtWidgetPrice = gfb.gfbFrequentBought.f.gfbFrequentBoughtPreparePrice(offerData);
            gfbFrequentBoughtWidgetContainer.appendChild(gfbFrequentBoughtWidgetPrice);

            gfbFrequentBoughtWidgetOfferContainer.classList.add("gfbFrequentBoughtWidgetOfferContainerBundleUpsell");

            let gfbfrequentBoughtHorizontalUpsellAddTocart = gfb.gfbBundleUpsellHorizontalWidget.f.prepareAddToCartButton.render(currentOffer);
            if(checkMadatoryProductsIsOutOfStock){
              gfbfrequentBoughtHorizontalUpsellAddTocart.classList.add("gfbDisableHorizontalUpsellAddToCartBtn");
            }

            const gfbVariantSelctorPopover = document.createElement("div");
            gfbVariantSelctorPopover.classList.add("gfbVariantSelctorPopover");
            gfbVariantSelctorPopover.setAttribute("data-offer-id", offerData.offerId);
      
            gfbFrequentBoughtWidgetOfferContainer.appendChild(gfbFrequentBoughtWidgetContainer);
            // gfbFrequentBoughtWidgetOfferContainer.appendChild(buttonContainer);
            gfbFrequentBoughtWidgetOfferContainer.appendChild(gfbVariantSelctorPopover);
            gfbFrequentBoughtWidgetOfferContainer.classList.add("horizontalDisplayDesignForUpsell");

            gfbFrequentBoughtWidgetOfferContainer.appendChild(gfbfrequentBoughtHorizontalUpsellAddTocart);
            
            return gfbFrequentBoughtWidgetOfferContainer;
          }
          
          
          // appending css offer specific here
          gfb.gfbFrequentBought.f.gfbFrequentBoughtAddTemplateSpecificCss(currentOffer);

          let gfbFrequentBoughtWidgetTitle = gfb.gfbFrequentBought.f.gfbFrequentBoughtPrepareTitle(offerData);

          const gfbFrequentBoughtReplacableContent = document.createElement("div");
          gfbFrequentBoughtReplacableContent.classList.add("gfbFrequentBoughtReplacableContent");
          
          const gfbFrequentBoughtWidgetContent = gfb.gfbFrequentBought.f.gfbFrequentBoughtPrepareContent(offerData);
          
          const gfbFrequentBoughtWidgetRuler = document.createElement("hr");
          gfbFrequentBoughtWidgetRuler.classList.add("gfbFrequentBoughtWidgetRuler");
          let gfbFrequentBoughtWidgetPrice = gfb.gfbFrequentBought.f.gfbFrequentBoughtPreparePrice(offerData);

          // add to cart button;
          let gfbFrequentBoughtAddToCartButton = gfb.gfbFrequentBought.f.gfbFrequentBoughtPrepareAddToCart(offerData);

          // create a div with class gfbPopupForMissingSelection

          let gfbPopupForMissingSelectionContainer = document.createElement("div");
          gfbPopupForMissingSelectionContainer.classList.add("gfbPopupForMissingSelectionContainer");

          let gfbPopupForMissingSelection = document.createElement("div");
          gfbPopupForMissingSelection.classList.add("gfbPopupForMissingSelection");
          gfbPopupForMissingSelection.setAttribute("data-offer-id", offerData.offerId);
          gfbPopupForMissingSelection.style.display = "none";
          gfbPopupForMissingSelection.innerHTML = "Please select all the mandatory fields";
          gfbPopupForMissingSelectionContainer.appendChild(gfbPopupForMissingSelection);

          gfbFrequentBoughtWidgetContainer.appendChild(gfbFrequentBoughtWidgetTitle);

          gfbFrequentBoughtReplacableContent.appendChild(gfbFrequentBoughtWidgetContent);
          gfbFrequentBoughtReplacableContent.appendChild(gfbFrequentBoughtWidgetRuler);
          gfbFrequentBoughtReplacableContent.appendChild(gfbFrequentBoughtWidgetPrice);

          gfbFrequentBoughtWidgetContainer.appendChild(gfbFrequentBoughtReplacableContent);
          gfbFrequentBoughtWidgetContainer.appendChild(gfbFrequentBoughtAddToCartButton);
          gfbFrequentBoughtWidgetContainer.appendChild(gfbPopupForMissingSelectionContainer);

          gfbFrequentBoughtWidgetOfferContainer.appendChild(gfbFrequentBoughtWidgetContainer);

          
          if(horizontalDisplayDesign){
            gfbFrequentBoughtWidgetOfferContainer.classList.add("horizontalDisplayDesign");
          }

          // adding css from theme editor;
          if(currentOffer.type == "BUNDLE_UPSELL"){
            let themeEditorSettingsFlag = window?.upsellBlockSettings?.isStyleEnabled || false;
            gfbFrequentBoughtWidgetOfferContainer.classList.add("gfbFrequentBoughtWidgetOfferContainerBundleUpsell");
            if(themeEditorSettingsFlag){
              gfb.gfbFrequentBought.f.gfbFrequentBoughtUpsellAddThemeEditorImposedChanges();
            }
          }else{
            gfbFrequentBoughtWidgetOfferContainer.classList.add("gfbFrequentBoughtWidgetOfferContainerBundleRegular");
            let themeEditorSettingsFlag = window?.fbtBlockSettings?.isStyleEnabled || false;
            if(themeEditorSettingsFlag){
              gfb.gfbFrequentBought.f.gfbFrequentBoughtFixedAddThemeEditorImposedChanges();
            }
          }

          gfb.gfbFrequentBought.f.gfbFrequentBoughtAddOfferSpecificCss(currentOffer);
          

          gfb.gfbFrequentBought.f.setInputsForSelectedVariants(currentOffer, gfbFrequentBoughtWidgetOfferContainer);
          
          return gfbFrequentBoughtWidgetOfferContainer;
        }catch(error){
          gfb.utility.debugConsole(error);
        }
      },
      setInputsForSelectedVariants: function(currentOffer, htmlElement){
        try{
          let offerId = currentOffer.offerId;
          let selectedProducts = currentOffer.selectedProducts;
          let containerElement = htmlElement || document;
          selectedProducts.forEach(product => {
            let boxQuantity = gfb.gfbFrequentBought.state.currentSelectedVariants[offerId][product.handle]?.quantity || product.quantity || 1;
            let contentContainer = containerElement.querySelector(`.gfbFrequentBoughtWidgetContentContainer[gfbfrequentboughtwidgetcontentcontainer-id="${offerId}"]`);
            let tierWidgetContainer = contentContainer.querySelector(`.gfbFrequentBoughtWidgetProductContainer[data-product-handle="${product.handle}"]`);
            if(tierWidgetContainer){
              let inputBox = tierWidgetContainer.querySelector(`.gfbFrequentBoughtQuanityBox`);
              if(inputBox){
                inputBox.value = boxQuantity;
              }
            }
          });

        }catch(err){
          gfb.utility.debugConsole("error in setInputsForSelectedVariants => ", err);
        }
      },
      gfbFrequentBoughtPrepareAddToCart: function (offerData) {
        try {
          let currentSelectedVariantsForOffer = gfb.gfbFrequentBought.state.currentSelectedVariants[offerData.offerId];

          const gfbFrequentBoughtAddToCartButtonSection = document.createElement("div");
          gfbFrequentBoughtAddToCartButtonSection.classList.add("gfbFrequentBoughtAddToCartButtonSection");

          const dummyDivOneAddToCartSection = document.createElement("div");
          dummyDivOneAddToCartSection.classList.add("dummyDivOneAddToCartSection");

          const gfbFrequentBoughtAddToCartButton = document.createElement("div");
          gfbFrequentBoughtAddToCartButton.classList.add("gfbFrequentBoughtAddToCartButton");

          const dummyDivTwoAddToCartSection = document.createElement("div");
          dummyDivTwoAddToCartSection.classList.add("dummyDivTwoAddToCartSection");

          let isAnyProductOutOfStock = gfb.gfbFrequentBought.state.isAnyProductOutOfStock;
          let isParentProduct = offerData.widgetDisplayOptions.parentProduct;
          // if atleast two currentSelectedVariantsForOffer are selected then show the add to cart button
          let selecteProducts = 0;
          for (let [key, value] of Object.entries(currentSelectedVariantsForOffer)) {
            if (value.isSelected) {
              selecteProducts = selecteProducts + 1;
            }
          }
          let minimumItemsInCart = gfb.gfbFrequentBought.state?.minimumItemsInCart || 2;
          if (selecteProducts < minimumItemsInCart) {
            gfbFrequentBoughtAddToCartButton.classList.add("gfbDisableAddToCart");
          }
          if (isAnyProductOutOfStock && isParentProduct) {
            gfbFrequentBoughtAddToCartButton.classList.add("gfbDisableAddToCart");
            // we can add out of stock later from here
          }

          gfbFrequentBoughtAddToCartButton.setAttribute("data-offer-id", offerData.offerId);

          // Retrieve values for add to cart button text, background color, and text color
          const selectedProductsCount = Object.values(gfb.gfbFrequentBought.state.currentSelectedVariants[offerData.offerId]).filter(p => p.isSelected).length;
          let addToCartBtnText = offerData?.configuration?.cartBtnName_FBT || "Add to Cart";
          addToCartBtnText = addToCartBtnText.replace("{{SELECTED_PRODUCT}}", selectedProductsCount);
          
          const addToCartBtnBGColor = offerData?.configuration?.cartBtnBgColor || "#000000";
          const addToCartBtnTextColor = offerData?.configuration?.cartBtnTextColor || "#FFF";
          
          // Set background color and text color styles for the add to cart button
          gfbFrequentBoughtAddToCartButton.style.backgroundColor = addToCartBtnBGColor;
          gfbFrequentBoughtAddToCartButton.style.color = addToCartBtnTextColor;
          
          // Set attribute "data-cart-btn-name" with the addToCartBtnText value
          gfbFrequentBoughtAddToCartButton.setAttribute("data-cart-btn-name", addToCartBtnText);
          
          // Set inner HTML of the add to cart button with addToCartBtnText
          gfbFrequentBoughtAddToCartButton.innerHTML = addToCartBtnText;
          
          gfbFrequentBoughtAddToCartButtonSection.appendChild(dummyDivOneAddToCartSection);
          gfbFrequentBoughtAddToCartButtonSection.appendChild(gfbFrequentBoughtAddToCartButton);
          // gfbFrequentBoughtAddToCartButtonSection.appendChild(dummyDivTwoAddToCartSection);
          return gfbFrequentBoughtAddToCartButtonSection;
        } catch (error) {
          gfb.utility.debugConsole("error from gfbFrequentBoughtPrepareAddToCart ->", error);
        }
      },
      gfbFrequentBoughtPrepareTitle: function (currentOffer) {
        try {
          const gfbFrequentBoughtWidgetTitleContainer = document.createElement("div");
          gfbFrequentBoughtWidgetTitleContainer.classList.add("gfbFrequentBoughtWidgetTitleContainer");
          // let stylingObject = gfb.gfbFrequentBought.state.stylingGuide;
          
          const gfbFrequentBoughtWidgetTitle = document.createElement("div");
          gfbFrequentBoughtWidgetTitle.classList.add("gfbFrequentBoughtWidgetTitle");
          // gfbFrequentBoughtWidgetTitle.style.color = stylingObject[headingTextColor];
          
          const gfbFrequentBoughtWidgetSubTitle = document.createElement("div");
          gfbFrequentBoughtWidgetSubTitle.classList.add("gfbFrequentBoughtWidgetSubTitle");
          // gfbFrequentBoughtWidgetSubTitle.style.color = stylingObject[subHeadingTextColor];

          let title = currentOffer.title || currentOffer.metafieldData.title;
          let subtitle = currentOffer.subTitle;
          gfbFrequentBoughtWidgetTitle.innerHTML = title;
          gfbFrequentBoughtWidgetSubTitle.innerHTML = subtitle;
          gfbFrequentBoughtWidgetTitleContainer.appendChild(gfbFrequentBoughtWidgetTitle);
          gfbFrequentBoughtWidgetTitleContainer.appendChild(gfbFrequentBoughtWidgetSubTitle);

          return gfbFrequentBoughtWidgetTitleContainer;
        } catch (error) {
          gfb.utility.debugConsole(error);
        }
      },
      gfbFrequentBoughtPrepareContent: function (currentOffer) {
        try {
          // create a activeVariant array, which contains active variants of each product,
          // which contains, activeVaiant's image, price, title -> use this to rernde the image and price in the UI
          // activeVariant will change on onChange of select of resp product, and will cause rerende of prepaeUI function

          // let stylingObject = gfb.gfbFrequentBought.state.stylingGuide;
          let offerId = currentOffer.offerId;
          let currentSelectedVariantsForOffer = gfb.gfbFrequentBought.state.currentSelectedVariants[currentOffer.offerId];
          let currentSelectedVariantsByOptions = gfb.gfbFrequentBought.state.currentSelectedOptions[currentOffer.offerId];
          let selectedProducts = currentOffer.selectedProducts;
          let countOfSelectedProducts = selectedProducts.length;
          let isParentProduct = currentOffer.widgetDisplayOptions?.parentProduct || false;
          let isQuantitySelectionBoxAllowed = currentOffer.advancedConfiguration?.quantitySelectorEnabled || false;
          let isProductDescirptionEnabled = currentOffer.advancedConfiguration?.addCustomProductDescription || false;
          const gfbFrequentBoughtWidgetContentContainer = document.createElement("div");
          gfbFrequentBoughtWidgetContentContainer.classList.add("gfbFrequentBoughtWidgetContentContainer");

          gfbFrequentBoughtWidgetContentContainer.setAttribute("gfbFrequentBoughtWidgetContentContainer-id", currentOffer.offerId);


          // gfbFrequentBoughtWidgetContentContainer.css("display", "grid")
          //   .css("grid-template-rows", "repeat(" + countOfSelectedProducts + ", 1fr)").css("grid-gap", "15px");

          // loop through selectedProducts and create a div for each product
          for (let i = 0; i < selectedProducts.length; i++) {
            // let productDataByHandles = gfb.gfbFrequentBought.state.frequentBoughtShopifyDataByHandles;
            // let productHandle = selectedProducts[i].handle;
            let product = selectedProducts[i];

            let gfbFrequentBoughtWidgetProductContainer = document.createElement("div");
            gfbFrequentBoughtWidgetProductContainer.classList.add("gfbFrequentBoughtWidgetProductContainer");
            let gfbFrequentBoughtIsSelectedVariantOutOfStock = gfb.gfbFrequentBought.f.gfbFrequentBoughtIsSelectedVariantOutOfStock(
              product.variants
            );
            if (product.available == false || gfbFrequentBoughtIsSelectedVariantOutOfStock) {
              gfbFrequentBoughtWidgetProductContainer.classList.add("gfbFrequentBoughtWidgetProductContainerDisabled");
              gfbFrequentBoughtWidgetProductContainer.classList.add("gfbFrequentBoughtWidgetProductContainerOutOfStock");
              gfb.gfbFrequentBought.state.isAnyProductOutOfStock = true;
            }
            gfbFrequentBoughtWidgetProductContainer.setAttribute("data-product-handle", product.handle);

            // Create a div element and add class "gfbFrequentBoughtWidgetProductImage"
            const gfbFrequentBoughtWidgetProductImage = document.createElement("div");
            gfbFrequentBoughtWidgetProductImage.classList.add("gfbFrequentBoughtWidgetProductImage");
            // gfbFrequentBoughtWidgetProductImage.style.width = stylingObject[productImageSize] + "px";
            // gfbFrequentBoughtWidgetProductImage.style.height = stylingObject[productImageSize] + "px";
            // checkBox
            let checkBoxValue = currentSelectedVariantsForOffer[product.handle]?.isSelected || false;

            // Create a div element and add class "gfbFrequentBoughtWidgetProductCheckboxContainer"
            const gfbFrequentBoughtWidgetProductCheckboxContainer = document.createElement("div");
            gfbFrequentBoughtWidgetProductCheckboxContainer.classList.add("gfbFrequentBoughtWidgetProductCheckboxContainer");
            
            // Create an input element and add class "gfbFrequentBoughtWidgetProductCheckbox"
            if (!product.isMandatory) { // feature to make product mandatory or optional in bundle upsell
              const gfbFrequentBoughtWidgetProductCheckbox = document.createElement("input");
              gfbFrequentBoughtWidgetProductCheckbox.classList.add("gfbFrequentBoughtWidgetProductCheckbox");
              gfbFrequentBoughtWidgetProductCheckbox.setAttribute("type", "checkbox");
              gfbFrequentBoughtWidgetProductCheckbox.checked = checkBoxValue;
              gfbFrequentBoughtWidgetProductCheckbox.setAttribute("data-product-handle", product.handle);
              gfbFrequentBoughtWidgetProductCheckboxContainer.appendChild(gfbFrequentBoughtWidgetProductCheckbox);
            }
            
            // Create an img element and add class "gfbFrequentBoughtWidgetProductImageEle"
            const gfbFrequentBoughtWidgetProductImageEle = document.createElement("img");
            gfbFrequentBoughtWidgetProductImageEle.classList.add("gfbFrequentBoughtWidgetProductImageEle");
            let imageSource = currentSelectedVariantsForOffer[product.handle]?.image || product?.variants[0]?.image || product?.featured_image;
            gfbFrequentBoughtWidgetProductImageEle.setAttribute("src", imageSource);
            // gfbFrequentBoughtWidgetProductImageEle.style.objectFit = stylingObject[productImageObjectFit];
            // gfbFrequentBoughtWidgetProductImageEle.style.borderRadius = stylingObject[productImageBorderRadius] + "px";

            if((product.available != false) && (product.variants.length > 0) && (gfbFrequentBoughtIsSelectedVariantOutOfStock == false) && isParentProduct == false){
              gfbFrequentBoughtWidgetProductImage.appendChild(gfbFrequentBoughtWidgetProductCheckboxContainer);
            }
            gfbFrequentBoughtWidgetProductImage.appendChild(gfbFrequentBoughtWidgetProductImageEle);

            // content
            const gfbFrequentBoughtWidgetProductContent = document.createElement("div");
            gfbFrequentBoughtWidgetProductContent.classList.add("gfbFrequentBoughtWidgetProductContent");
            
            // Create a div element and add class "gfbFrequentBoughtWidgetProductContentNameVariantContainer"
            const gfbFrequentBoughtWidgetProductContentNameVariantContainer = document.createElement("div");
            gfbFrequentBoughtWidgetProductContentNameVariantContainer.classList.add("gfbFrequentBoughtWidgetProductContentNameVariantContainer");
            
            // Create a div element and add class "gfbFrequentBoughtWidgetProductTitle"
            let selectedBoxQty = gfb.gfbFrequentBought.state.currentSelectedVariants[offerId][product.handle]?.quantity || product.quantity || 1;
            const gfbFrequentBoughtWidgetProductTitle = document.createElement("div");
            gfbFrequentBoughtWidgetProductTitle.classList.add("gfbFrequentBoughtWidgetProductTitle");
            let quantityText = '';
            let productQty = parseInt(selectedBoxQty) || 1;
            if(productQty > 1){
              quantityText = ` x${productQty}`;
            }
            let hyperLinkedTitle = `${product.title}`;
            if(currentOffer.advancedConfiguration?.enableLinkingToProductPage){
              hyperLinkedTitle = `<a href="/products/${product.handle}" target="_blank">${product.title}</a>`;
            }
            gfbFrequentBoughtWidgetProductTitle.innerHTML = hyperLinkedTitle + `${quantityText}`;
            // gfbFrequentBoughtWidgetProductTitle.style.color = stylingObject[productTitleTextColor];
            // create a div element with className gfbFrequentBoughtWidgetProductDescription
            const gfbFrequentBoughtWidgetProductDescription = document.createElement("div");
            gfbFrequentBoughtWidgetProductDescription.classList.add("gfbFrequentBoughtWidgetProductDescription");
            gfbFrequentBoughtWidgetProductDescription.innerHTML = product.customDescription || "";
            
            if(isProductDescirptionEnabled){
              gfbFrequentBoughtWidgetProductDescription.style.display = "grid";
            }
            if(!product.customDescription || product.customDescription == ""){
              gfbFrequentBoughtWidgetProductDescription.style.display = "none";

            }

            // if product has variants then create variant selector
            let gfbFrequentBoughtPrepareUIForVariantsArgs = {product , offerId , currentSelectedVariantsForOffer, gfbFrequentBoughtWidgetProductContainer, currentSelectedVariantsByOptions};
            let gfbFrequentBoughtWidgetProductVariantSelector = gfb.gfbFrequentBought.f.gfbFrequentBoughtPrepareUIForVariants(gfbFrequentBoughtPrepareUIForVariantsArgs);

            // price
            let gfbFrequentBoughtWidgetProductPriceContainer = gfb.gfbFrequentBought.f.gfbFrequentBoughtPrepareContentPriceContainer(currentOffer, product , gfbFrequentBoughtWidgetProductContainer);

            // quantity box
            let boxQuantity = gfb.gfbFrequentBought.state.currentSelectedVariants[offerId][product.handle]?.quantity || product.quantity || 1;
            let thresholdQuantity = product.quantity
            let gfbFrequentBoughtQuanityBoxWrapper = document.createElement("div");
            gfbFrequentBoughtQuanityBoxWrapper.classList.add("gfbFrequentBoughtQuanityBoxWrapper");

            // custom field
            let customField = gfb.gfbFrequentBought.state.currentSelectedVariants[offerId][product.handle]?.customField || "";

            let gfbFrequentBoughtCustomFieldBoxTitle = document.createElement("div");
            gfbFrequentBoughtCustomFieldBoxTitle.classList.add("gfbFrequentBoughtCustomFieldBoxTitle");
            let personalizationText = product?.customFieldOptions?.personalizationText || "Personalization Text";
            gfbFrequentBoughtCustomFieldBoxTitle.innerHTML = personalizationText + (product?.customFieldOptions?.isMandatory ? "*" : "");

            let gfbFrequentBoughtCustomFieldBox = document.createElement("input");
            gfbFrequentBoughtCustomFieldBox.classList.add("gfbFrequentBoughtCustomFieldBox");
            // add data attribute of offerId and product.handle to gfbFrequentBoughtCustomFieldBox
            gfbFrequentBoughtCustomFieldBox.setAttribute("data-offer-id", offerId);
            gfbFrequentBoughtCustomFieldBox.setAttribute("data-product-handle", product.handle);
            if(product?.customFieldOptions?.isMandatory || false){
              gfbFrequentBoughtCustomFieldBox.setAttribute("required", "");
            }

            gfbFrequentBoughtCustomFieldBox.innerHTML = customField;

            let customFieldWrapper = document.createElement("div");
            customFieldWrapper.classList.add("customFieldWrapper");

            customFieldWrapper.appendChild(gfbFrequentBoughtCustomFieldBoxTitle);
            customFieldWrapper.appendChild(gfbFrequentBoughtCustomFieldBox);

            let gfbFrequentBoughtQuanityBoxLabel = document.createElement("div");
            gfbFrequentBoughtQuanityBoxLabel.classList.add("gfbFrequentBoughtQuanityBoxLabel");
            gfbFrequentBoughtQuanityBoxLabel.innerText = "Quantity:";

            let gfbFrequentBoughtQuanityBox = document.createElement("input");
            gfbFrequentBoughtQuanityBox.classList.add("gfbFrequentBoughtQuanityBox");
            gfbFrequentBoughtQuanityBox.setAttribute("type", "number");
            gfbFrequentBoughtQuanityBox.setAttribute("min", thresholdQuantity);
            gfbFrequentBoughtQuanityBox.setAttribute("product-page-handle", product.handle);
            gfbFrequentBoughtQuanityBox.value = parseInt(boxQuantity);
            if(isQuantitySelectionBoxAllowed){
              gfbFrequentBoughtQuanityBoxWrapper.style.display = "block";
            }
            gfbFrequentBoughtQuanityBoxWrapper.appendChild(gfbFrequentBoughtQuanityBoxLabel);
            gfbFrequentBoughtQuanityBoxWrapper.appendChild(gfbFrequentBoughtQuanityBox);
            

            //append title selector and price in content
            gfbFrequentBoughtWidgetProductContent.appendChild(gfbFrequentBoughtWidgetProductTitle);
            gfbFrequentBoughtWidgetProductContent.appendChild(gfbFrequentBoughtWidgetProductPriceContainer);
            gfbFrequentBoughtWidgetProductContentNameVariantContainer.appendChild(gfbFrequentBoughtWidgetProductVariantSelector);
            gfbFrequentBoughtWidgetProductContent.appendChild(gfbFrequentBoughtWidgetProductContentNameVariantContainer);

            // appendChild image and content in tile
            gfbFrequentBoughtWidgetProductContainer.appendChild(gfbFrequentBoughtWidgetProductImage);
            gfbFrequentBoughtWidgetProductContainer.appendChild(gfbFrequentBoughtWidgetProductDescription);
            gfbFrequentBoughtWidgetProductContainer.appendChild(gfbFrequentBoughtWidgetProductTitle);
            gfbFrequentBoughtWidgetProductContainer.appendChild(gfbFrequentBoughtWidgetProductPriceContainer);
            gfbFrequentBoughtWidgetProductContainer.appendChild(gfbFrequentBoughtWidgetProductContentNameVariantContainer);
            gfbFrequentBoughtWidgetProductContainer.appendChild(gfbFrequentBoughtQuanityBoxWrapper);

            if(product?.customFieldOptions?.isAllowed){
              gfbFrequentBoughtWidgetProductContainer.appendChild(customFieldWrapper);
            }
            
            // gfbFrequentBoughtWidgetProductContainer.appendChild(gfbFrequentBoughtWidgetProductContent);
            // gfbFrequentBoughtWidgetProductContainer.appendChild(gfbFrequentBoughtWidgetProductCheckboxContainer);


            // plus image bar
            let gfbHorizontalPlusImageBarContainer = document.createElement("div");
            gfbHorizontalPlusImageBarContainer.classList.add("gfbHorizontalPlusImageBarContainer");
            let gfbHorizontalPlusImageBar = document.createElement("img");
            gfbHorizontalPlusImageBar.classList.add("gfbHorizontalPlusImageBar");
            gfbHorizontalPlusImageBar.src = `https://d2h7u1ujy865aj.cloudfront.net/public/plus.webp`
            gfbHorizontalPlusImageBarContainer.appendChild(gfbHorizontalPlusImageBar);

 
            // appendChild tile in container
            gfbFrequentBoughtWidgetContentContainer.appendChild(gfbFrequentBoughtWidgetProductContainer);
            if((i != (selectedProducts.length - 1))){
              gfbFrequentBoughtWidgetContentContainer.appendChild(gfbHorizontalPlusImageBarContainer);
            }
          }

          return gfbFrequentBoughtWidgetContentContainer;
        } catch (error) {
          gfb.utility.debugConsole(error);
        }
      },
      gfbFrequentBoughtIsSelectedVariantOutOfStock: function (variants) {
        try {
          let selectedCnt = 0;
          for (let i = 0; i < variants.length; i++) {
            if (variants[i].available) {
              selectedCnt++;
            }
          }

          return selectedCnt == 0 ? true : false;
        } catch (error) {}
      },
      gfbFrequentBoughtPrepareUIForVariants: function (args) {
        try {
          let {
            product,
            offerId,
            currentSelectedVariantsForOffer,
            gfbFrequentBoughtWidgetProductContainer,
            currentSelectedVariantsByOptions,
          } = args;
          // let stylingObject = gfb.gfbFrequentBought.state.stylingGuide;
          let gfbFrequentBoughtVariantUIParentContainer = document.createElement("div");
          gfbFrequentBoughtVariantUIParentContainer.classList.add("gfbFrequentBoughtVariantUIParentContainer");
          let offerData = gfb.gfbFrequentBought.state.frequentBoughtDataByOfferId[offerId];
          const isHorizontalBundleUpsell = offerData.selectedTemplateDesignId === "BUNDLE_UPSELL_HORIZONTAL_DESIGN";
          if (offerData.variantDisplayDesign.isAllVariantMasterDropdownDesign) {
            let generatedUI = gfb.gfbFrequentBought.f.gfbFrequentBoughtPrepareUIForVariantsForMasterDropdown(
              product,
              currentSelectedVariantsForOffer,
              gfbFrequentBoughtWidgetProductContainer
            );
            return generatedUI;
          } else {
            let selectedVariantForProduct = currentSelectedVariantsForOffer[product.handle];
            let currentSelectedVariantsByOptionsForProduct = currentSelectedVariantsByOptions[product.handle];
            let designObjectArr = product.designObject;
            let productHandle = product.handle;
            const gfbFrequentBoughtSingleDropdownUIParentContainer = document.createElement("div");

            gfbFrequentBoughtSingleDropdownUIParentContainer.classList.add("gfbFrequentBoughtSingleDropdownUIParentContainer");
            
            for (let i = 0; i < designObjectArr.length; i++) {
              let checkForceRenderUI = gfb.gfbFrequentBought.f.gfbFrequentBoughtCheckForceRender(offerId, product.id);
              let optionIndex = i;
              let gfbFrequentBoughtOptionArgs = {
                options: designObjectArr[i],
                optionIndex,
              };

              let gfbFrequentBoughtProductArgs = {
                productHandle,
                productId: product.id,
                selectedVariantForProduct,
                currentSelectedVariantsByOptionsForProduct,
              };

              if(isHorizontalBundleUpsell && designObjectArr[i].design == "DROPDOWN"){
                designObjectArr[i].design = "LABEL";
              }

              if (checkForceRenderUI) {
                if (designObjectArr[i].design == "LABEL") {
                  let generatedUI = gfb.gfbFrequentBought.f.gfbFrequentBoughtPrepareUIForLabels(
                    offerId,
                    gfbFrequentBoughtProductArgs,
                    gfbFrequentBoughtOptionArgs
                  );
                  gfbFrequentBoughtVariantUIParentContainer.appendChild(generatedUI);
                } else if (designObjectArr[i].design == "SWATCH") {
                  let generatedUI = gfb.gfbFrequentBought.f.gfbFrequentBoughtPrepareUIForSwatches(
                    offerId,
                    gfbFrequentBoughtProductArgs,
                    gfbFrequentBoughtOptionArgs
                  );
                  gfbFrequentBoughtVariantUIParentContainer.appendChild(generatedUI);
                } else {
                  let generatedUI = gfb.gfbFrequentBought.f.gfbFrequentBoughtPrepareUIForSingleDropDown(
                    offerId,
                    gfbFrequentBoughtProductArgs,
                    gfbFrequentBoughtOptionArgs
                  );
                  gfbFrequentBoughtSingleDropdownUIParentContainer.appendChild(generatedUI);
                }
              }

              if (gfbFrequentBoughtSingleDropdownUIParentContainer.children.length > 0) {
                gfbFrequentBoughtVariantUIParentContainer.appendChild(gfbFrequentBoughtSingleDropdownUIParentContainer);
              }
            }
          }

          return gfbFrequentBoughtVariantUIParentContainer;
        } catch (error) {
          gfb.utility.debugConsole("error in gfbFrequentBoughtPrepareUIForVariants ", error);
        }
      },
      gfbFrequentBoughtCheckForceRender: function (currentOfferId, productId) {
        try {
          let currOffer = gfb.settings.frequentBoughtData.filter(
            (offer) => offer.offerId == currentOfferId || offer.metafieldData.offerId == currentOfferId
          )[0];
          let currentProduct = currOffer.selectedProducts.filter((product) => product.productId == productId)[0];
          if(!currentProduct){
            currentProduct = currOffer.selectedProducts.filter((product) => product.mutatedId == productId)[0];
          }
          let currentProductVariantsAvailable = currentProduct.variants.filter((variant) => variant.isSelected == true);
          return currentProductVariantsAvailable.length > 1 ? true : false;
        } catch (error) {
          gfb.utility.debugConsole("error in gfbFrequentBoughtCheckForceRender ", error);
        }
      },
      gfbFrequentBoughtPrepareUIForSwatches: function (offerId, gfbFrequentBoughtProductArgs, gfbFrequentBoughtOptionArgs) {
        // filter required variants
        // iterate over required variants
        // create swatches for each variant
        // add event listener for each swatch -> on click changes variant and image of the selected product
        // add styles for swatch
        try {
          let { productHandle, productId, selectedVariantForProduct, currentSelectedVariantsByOptionsForProduct } =
            gfbFrequentBoughtProductArgs;
          let { options, optionIndex } = gfbFrequentBoughtOptionArgs;

            let variantData = gfb.gfbFrequentBought.state.frequentBoughtShopifyDataByVariantIds[selectedVariantForProduct.id];
            let activeIndex = gfb.gfbFrequentBought.f.gfbFindIndexOfActiveVariant(optionIndex, options.values, currentSelectedVariantsByOptionsForProduct);
            const gfbFrequentBoughtSwatchContainer = document.createElement("div");
            gfbFrequentBoughtSwatchContainer.classList.add("gfbFrequentBoughtSwatchContainer");
            
            // Access current selected swatch from the state
            const currentSelectedSwatch = gfb.gfbFrequentBought.state.currentSelectedOptions[offerId][productHandle].values[optionIndex];
            
            // Create a div element and add class "gfbFrequentBoughtSwatchHeading", set inner HTML to `${options.name} (${currentSelectedSwatch})`
            const gfbFrequentBoughtSwatchHeading = document.createElement("div");
            gfbFrequentBoughtSwatchHeading.classList.add("gfbFrequentBoughtSwatchHeading");
            gfbFrequentBoughtSwatchHeading.innerHTML = `${options.name} (${currentSelectedSwatch})`;
            let filteredOptionValue = options.values;
            const reqOffer = gfb.settings.frequentBoughtData.find(item => item.offerId == offerId);
            let advancedConfig = reqOffer?.advancedConfiguration || {};


          // Create a div element and add class "gfbFrequentBoughtSwatchParentContainer"
          const gfbFrequentBoughtSwatchParentContainer = document.createElement("div");
          gfbFrequentBoughtSwatchParentContainer.classList.add("gfbFrequentBoughtSwatchParentContainer");


          for (let i = 0; i < filteredOptionValue.length; i++) {
            let filterValue = filteredOptionValue[i];
            let currentSelectedVariant = [...variantData.options];
            currentSelectedVariant[optionIndex] = filterValue.label;
            let public_title = currentSelectedVariant.join("/");
            let optionData = gfb.gfbFrequentBought.state.optionImageMapByOffer[offerId][productId][public_title];
            if(!optionData){
              continue;
            }
            // const gfbFrequentBoughtSwatchColorUIContainer = document.createElement("div");
            // gfbFrequentBoughtSwatchColorUIContainer.classList.add("gfbFrequentBoughtSwatchColorUIContainer")

            const gfbFrequentBoughtSwatchColorUI = document.createElement("div");
            gfbFrequentBoughtSwatchColorUI.classList.add("gfbFrequentBoughtSwatchColorUI");
            
            // Create an img element and add class "gfbFrequentBoughtSwatchImg"
            let gfbFrequentBoughtSwatchImage = document.createElement("img");
            gfbFrequentBoughtSwatchImage.classList.add("gfbFrequentBoughtSwatchImg");
            let optionsInVariantData = JSON.parse(JSON.stringify(variantData.options));
            optionsInVariantData[optionIndex] = filterValue.label;

            if (i == activeIndex) {
              gfbFrequentBoughtSwatchColorUI.classList.add("gfbFrequentBoughtSwatchColorUISelected");
            }
            if (!optionData.isAvailable) {
              gfbFrequentBoughtSwatchColorUI.classList.add("gfbFrequentBoughtSwatchColorUIOutOfStock");
            }

            /**
             * now we have identity of other two options
             * use them to find variant in combination with each selected option here,
             * now by replacing current option on swatchOption index in the options array
             * use that variant's image as swatch image
             */
            let imageUrl = optionData.imageLink;
            if (advancedConfig?.addCustomImagesForSwatches) {
              if (filterValue.image) {
                imageUrl = filterValue.image;
              }
            }

            gfbFrequentBoughtSwatchImage.setAttribute("src", imageUrl);
            gfbFrequentBoughtSwatchImage.setAttribute("alt", "color-imag");

            // for hex code in swatch bg;
            let swatchDesignType = options.customizeSwatchType;
            if(swatchDesignType == "HEXCODE"){
              gfbFrequentBoughtSwatchImage.style.display = "none";
              gfbFrequentBoughtSwatchColorUI.style.backgroundColor = filterValue.hexCode;
            }
            // Set attributes for the div element
            gfbFrequentBoughtSwatchColorUI.setAttribute("data-color-name", filteredOptionValue[i].label);
            gfbFrequentBoughtSwatchColorUI.setAttribute("data-product-handle", productHandle);
            gfbFrequentBoughtSwatchColorUI.setAttribute("data-offer-id", offerId);
            gfbFrequentBoughtSwatchColorUI.setAttribute("data-color-index", optionIndex);

            gfbFrequentBoughtSwatchColorUI.appendChild(gfbFrequentBoughtSwatchImage);
            gfbFrequentBoughtSwatchParentContainer.appendChild(gfbFrequentBoughtSwatchColorUI);
          }

          gfbFrequentBoughtSwatchContainer.appendChild(gfbFrequentBoughtSwatchHeading);
          gfbFrequentBoughtSwatchContainer.appendChild(gfbFrequentBoughtSwatchParentContainer);

          return gfbFrequentBoughtSwatchContainer;
        } catch (error) {
          gfb.utility.debugConsole("error in gfbFrequentBoughtPrepareUIForSwatches ", error);
        }
      },
      gfbFrequentBoughtFindMatchingVariantId: function (arrayToCompare) {
        let variantsData = gfb.gfbFrequentBought.state.frequentBoughtShopifyDataByVariantIds;
        for (const variantId in variantsData) {
          const optionsArray = JSON.parse(JSON.stringify(variantsData[variantId].options));
          let arrayInEqualityTest = gfb.gfbFrequentBought.f.gfbFrequentBoughtCheckArrayEquality(optionsArray, arrayToCompare);
          if (arrayInEqualityTest) {
            return variantsData[variantId];
          }
        }
        return null; // If no matching variant is found
      },
      gfbFrequentBoughtCheckArrayEquality: function (arr1, arr2) {
        if (arr1.length !== arr2.length) {
          return false;
        }
        for (let i = 0; i < arr1.length; i++) {
          if (arr1[i] !== arr2[i]) {
            return false;
          }
        }
        return true;
      },
      gfbFrequentBoughtPrepareUIForLabels: function (offerId, gfbFrequentBoughtProductArgs, gfbFrequentBoughtOptionArgs) {
        // filter required variants
        // iterate over required variants
        // create label for each variant
        // add event listener for each label -> on click changes variant and image of the selected product
        // add styles for label
        try {
          let { productHandle , productId , selectedVariantForProduct , currentSelectedVariantsByOptionsForProduct } = gfbFrequentBoughtProductArgs;
          let { options , optionIndex } = gfbFrequentBoughtOptionArgs;
         
          let variantData = gfb.gfbFrequentBought.state.frequentBoughtShopifyDataByVariantIds[selectedVariantForProduct.id];
          let activeIndex = gfb.gfbFrequentBought.f.gfbFindIndexOfActiveVariant(optionIndex, options.values, currentSelectedVariantsByOptionsForProduct);

          const gfbFrequentBoughtLabelContainer = document.createElement("div");
          gfbFrequentBoughtLabelContainer.classList.add("gfbFrequentBoughtLabelContainer");

          // Create a div element and add class "gfbFrequentBoughtLabelHeading", set inner HTML to options.name
          const gfbFrequentBoughtLabelHeading = document.createElement("div");
          gfbFrequentBoughtLabelHeading.classList.add("gfbFrequentBoughtLabelHeading");
          gfbFrequentBoughtLabelHeading.innerHTML = options.name;

          // Store options.values in filteredOptionValue
          let filteredOptionValue = options.values;

          // Create a div element and add class "gfbFrequentBoughtLabelParentContainer"
          const gfbFrequentBoughtLabelParentContainer = document.createElement("div");
          gfbFrequentBoughtLabelParentContainer.classList.add("gfbFrequentBoughtLabelParentContainer");

          for (let i = 0; i < filteredOptionValue.length; i++) {
            let filterValue = filteredOptionValue[i];
            let currentSelectedVariant = [...variantData.options];
            currentSelectedVariant[optionIndex] = filterValue.label;
            let public_title = currentSelectedVariant.join("/");
            let optionData = gfb.gfbFrequentBought.state.optionImageMapByOffer[offerId][productId][public_title];
            if(!optionData){
              continue;
            }
            const gfbFrequentBoughtLabelPillsUI = document.createElement("div");
            gfbFrequentBoughtLabelPillsUI.classList.add("gfbFrequentBoughtLabelPillsUI");
            gfbFrequentBoughtLabelPillsUI.innerHTML = filterValue.label;

            // Check if the current index is the active index, then add class "gfbFrequentBoughtLabelPillsUISelected"
            if (i === activeIndex) {
                gfbFrequentBoughtLabelPillsUI.classList.add("gfbFrequentBoughtLabelPillsUISelected");
            }

            // Check if optionData.isAvailable is false, then add class "gfbFrequentBoughtLabelPillsUISelectedUIOutOfStock"
            if (!optionData.isAvailable) {
                gfbFrequentBoughtLabelPillsUI.classList.add("gfbFrequentBoughtLabelPillsUISelectedUIOutOfStock");
            }

            gfbFrequentBoughtLabelPillsUI.setAttribute("data-label-name", filterValue.label);
            gfbFrequentBoughtLabelPillsUI.setAttribute("data-product-handle", productHandle);
            gfbFrequentBoughtLabelPillsUI.setAttribute("data-offer-id", offerId);
            gfbFrequentBoughtLabelPillsUI.setAttribute("data-label-index", optionIndex);
            
            gfbFrequentBoughtLabelParentContainer.appendChild(gfbFrequentBoughtLabelPillsUI);
          }

          gfbFrequentBoughtLabelContainer.appendChild(gfbFrequentBoughtLabelHeading);
          gfbFrequentBoughtLabelContainer.appendChild(gfbFrequentBoughtLabelParentContainer);

          return gfbFrequentBoughtLabelContainer;
        } catch (error) {
          gfb.utility.debugConsole("error in gfbFrequentBoughtPrepareUIForLabels ", error);
        }
      },
      gfbFrequentBoughtPrepareUIForSingleDropDown: function (offerId, gfbFrequentBoughtProductArgs, gfbFrequentBoughtOptionArgs) {
        // filter required variants
        // iterate over required variants
        // create dd for each variant
        // add event listener for each dd -> on click changes variant and image of the selected product
        // add styles for dd( refer our current dd for styles, we need same styles here too)
        try {
          let { productHandle , productId , selectedVariantForProduct , currentSelectedVariantsByOptionsForProduct } = gfbFrequentBoughtProductArgs;
          let { options , optionIndex } = gfbFrequentBoughtOptionArgs;

          let variantData = gfb.gfbFrequentBought.state.frequentBoughtShopifyDataByVariantIds[selectedVariantForProduct.id];
          let activeIndex = gfb.gfbFrequentBought.f.gfbFindIndexOfActiveVariant(optionIndex, options.values, currentSelectedVariantsByOptionsForProduct);

          let gfbFrequentBoughtSingleDropdownContainer = document.createElement("div");
          gfbFrequentBoughtSingleDropdownContainer.classList.add("gfbFrequentBoughtSingleDropdownContainer");

          // Create a div element and add class "gfbFrequentBoughtSingleDropdownHeading", set inner HTML to options.name
          const gfbFrequentBoughtSingleDropdownHeading = document.createElement("div");
          gfbFrequentBoughtSingleDropdownHeading.classList.add("gfbFrequentBoughtSingleDropdownHeading");
          gfbFrequentBoughtSingleDropdownHeading.innerHTML = options.name;

          // Store options.values in filteredOptionValue
          let filteredOptionValue = options.values;

          // Create a select element and add class "gfbFrequentBoughtSingleDropdownSelector"
          const gfbFrequentBoughtSingleDropdownSelector = document.createElement("select");
          gfbFrequentBoughtSingleDropdownSelector.classList.add("gfbFrequentBoughtSingleDropdownSelector");
          for (let i = 0; i < filteredOptionValue.length; i++) {
            let filterValue = filteredOptionValue[i];
            let currentSelectedVariant = [...variantData.options];
            currentSelectedVariant[optionIndex] = filterValue.label;
            let public_title = currentSelectedVariant.join("/");
            let optionData = gfb.gfbFrequentBought.state.optionImageMapByOffer[offerId][productId][public_title];
            if(!optionData){
              continue;
            }
            const gfbFrequentBoughtSingleDropdownOption = document.createElement("option");
            gfbFrequentBoughtSingleDropdownOption.classList.add("gfbSingleDropdownOption");
            gfbFrequentBoughtSingleDropdownOption.innerHTML = filterValue.label;

            // Set attributes for the option element
            gfbFrequentBoughtSingleDropdownOption.setAttribute("value", filterValue.label);
            gfbFrequentBoughtSingleDropdownOption.setAttribute("data-label", filterValue.label);
            gfbFrequentBoughtSingleDropdownOption.setAttribute("data-product-handle", productHandle);
            gfbFrequentBoughtSingleDropdownOption.setAttribute("data-offer-id", offerId);
            gfbFrequentBoughtSingleDropdownOption.setAttribute("data-label-index", optionIndex);
            if (i == activeIndex) {
              // make this option selected option in dropDown
              gfbFrequentBoughtSingleDropdownOption.setAttribute("selected", "selected");
            }
            if (optionData.isAvailable) {
              gfbFrequentBoughtSingleDropdownSelector.appendChild(gfbFrequentBoughtSingleDropdownOption);
            }
          }

          gfbFrequentBoughtSingleDropdownContainer.appendChild(gfbFrequentBoughtSingleDropdownHeading);
          gfbFrequentBoughtSingleDropdownContainer.appendChild(gfbFrequentBoughtSingleDropdownSelector);

          // gfbFrequentBoughtSingleDropdownContainer = gfb.customComponents.dropdown(offerId, gfbFrequentBoughtProductArgs, gfbFrequentBoughtOptionArgs)

          return gfbFrequentBoughtSingleDropdownContainer;
        } catch (error) {
          gfb.utility.debugConsole("error in gfbFrequentBoughtPrepareUIForSingleDropDown ", error);
        }
      },
      gfbFindNewVariantForSelectedOption: function (event, selectedOptionName, offerId, productHandle) {
        //
        /**
         * first change state in event listener
         * then fire this function
         *
         * here, check if variant selected by new option is available, if yes -> return
         * else find the closes variant to newly selected option for the product using
         * gfb.gfbFrequentBought.state.frequentBoughtDataByOfferId
         * here filter out one which include newly selected option, and select first in the array and assign those to
         * currentSelectedOptions state for given product in given offer
         */
        try {
          // fetch product data from offerId state instead, since we need data as per the offer of context;
          // let productData = gfb.gfbFrequentBought.state.frequentBoughtShopifyDataByHandles[productHandle];
          let productsData = gfb.gfbFrequentBought.state.frequentBoughtDataByOfferId[offerId].selectedProducts;
          let currentOffer = gfb.gfbFrequentBought.state.frequentBoughtDataByOfferId[offerId];
          let isComparedPriceVisible = currentOffer?.advancedConfiguration?.isComparedPriceVisible;
          let productData;
          for (let i = 0; i < productsData.length; i++) {
            let prod = productsData[i];
            if (prod.handle == productHandle) {
              productData = prod;
            }
          }

          // let selectedProductsFromOffer = gfb.gfbFrequentBought.state.frequentBoughtDataByOfferId[offerId].selectedProducts;
          let selectedProduct = productData;
          let productVarientsArr = selectedProduct.variants;
          let currentSelectedOptions = gfb.gfbFrequentBought.state.currentSelectedOptions[offerId][productHandle];
          let currentSelectedVariantData = gfb.gfbFrequentBought.state.currentSelectedVariants[offerId][productHandle];
          let currentSelectedOptionTitle = currentSelectedOptions.values.join("/");
          let newSelectedVariant = {};
          let newSelectedVariantOptions = {};

          let selectedVariantExist = false;

          let isHorizontal = gfb.gfbFrequentBought.state.horizontalDisplayDesign;

          for (let i = 0; i < productVarientsArr.length; i++) {
            let currentVariant = productVarientsArr[i];
            let optionsTitle = productVarientsArr[i].options.join("/");
            if (optionsTitle == currentSelectedOptionTitle && currentVariant.available) {
              selectedVariantExist = true;

              // get correct pricing
              let originalQuantity = selectedProduct.quantity || 1;
              originalQuantity = parseInt(originalQuantity);

              let currentSelectedVariantQty = currentSelectedVariantData?.quantity || selectedProduct.quantity;
              currentSelectedVariantQty = parseInt(currentSelectedVariantQty);

              let originalPrice = currentVariant.totalVariantPrice;
              originalPrice = parseFloat(originalPrice);

              let adjustedVariantPrice = originalPrice * (currentSelectedVariantQty / originalQuantity);
              adjustedVariantPrice = parseFloat(adjustedVariantPrice);

              let strikeThroughPrice = currentVariant.strikeThroughPrice;
              strikeThroughPrice = parseFloat(strikeThroughPrice);

              let adjustedStrikeThroughPrice = strikeThroughPrice * (currentSelectedVariantQty / originalQuantity);
              adjustedStrikeThroughPrice = parseFloat(adjustedStrikeThroughPrice);  

              let isSelectedValue = true;
              if(isHorizontal){
                isSelectedValue = currentSelectedVariantData?.isSelected || false;
              }

              newSelectedVariant = {
                id: currentVariant.id,
                image: currentVariant.image,
                isSelected: isSelectedValue,
                originalPrice: adjustedVariantPrice,
                quantity: currentSelectedVariantData?.quantity || selectedProduct.quantity,
                selectedIndex: i,
                strikeThroughPrice: isComparedPriceVisible ? adjustedStrikeThroughPrice : adjustedVariantPrice,
                customField: currentSelectedVariantData?.customField || "",
                customFieldOptions: {
                      isAllowed: selectedProduct?.customFieldOptions?.isAllowed || false,
                      isMandatory: selectedProduct?.customFieldOptions?.isMandatory || false,
                }
              };

              break;
            }
          }

          // goes for out of stock wala variants
          if (!selectedVariantExist) {
            for (let i = 0; i < productVarientsArr.length; i++) {
              let currentVariant = productVarientsArr[i];
              let productVariantOptions = currentVariant.options;
              for (let j = 0; j < productVariantOptions.length; j++) {
                let currentOption = productVariantOptions[j];
                if (currentVariant.available && currentOption == selectedOptionName) {
                  let valuesArr = productVariantOptions;
                  newSelectedVariantOptions = {
                    values: valuesArr,
                  };

                  newSelectedVariant = {
                    id: currentVariant.id,
                    image: currentVariant.image,
                    isSelected: isSelectedValue,
                    originalPrice: currentVariant.totalVariantPrice,
                    quantity: selectedProduct.quantity,
                    selectedIndex: i,
                    strikeThroughPrice: isComparedPriceVisible ? currentVariant.strikeThroughPrice : currentVariant.totalVariantPrice,
                    customField: "",
                    customFieldOptions: {
                      isAllowed: selectedProduct?.customFieldOptions?.isAllowed || false,
                      isMandatory: selectedProduct?.customFieldOptions?.isMandatory || false,
                    }
                  };

                  break;
                }
              }
            }

            gfb.gfbFrequentBought.state.currentSelectedVariants[offerId][productHandle] = newSelectedVariant;
            gfb.gfbFrequentBought.state.currentSelectedOptions[offerId][productHandle] = newSelectedVariantOptions;
          } else {
            gfb.gfbFrequentBought.state.currentSelectedVariants[offerId][productHandle] = newSelectedVariant;
          }

          let horizontalDisplayDesign = false;
          let selectedTemplateDesignId = currentOffer?.selectedTemplateDesignId;
          if(selectedTemplateDesignId == "BUNDLE_UPSELL_HORIZONTAL_DESIGN" || selectedTemplateDesignId == "CUSTOM_BUNDLE_HORIZONTAL_DESIGN"){
            horizontalDisplayDesign = true;
            gfb.gfbFrequentBought.state.horizontalDisplayDesign = true;
          }

          let content = gfb.gfbFrequentBought.f.gfbFrequentBoughtPrepareContent(currentOffer);
          let priceBanner = gfb.gfbFrequentBought.f.gfbFrequentBoughtPreparePrice(currentOffer);
          if(horizontalDisplayDesign){
            // content = gfb.gfbBundleUpsellHorizontalWidget.f.prepareContent.render(currentOffer);
            let product = gfb.gfbFrequentBought.state.frequentBoughtDataByOfferId[offerId].selectedProducts.filter((product) => product.handle == productHandle)[0];
            let gfbFrequentBoughtWidgetProductVariantSelectorBtnRef = document.querySelector(`.gfbFrequentBoughtWidgetProductVariantSelectorBtn[data-offer-id="${offerId}"][data-product-handle="${productHandle}"]`);
            let gfbFrequentBoughtWidgetProductImageContainerRef = gfbFrequentBoughtWidgetProductVariantSelectorBtnRef.closest(".gfbFrequentBoughtWidgetProductContainer").querySelector(".gfbFrequentBoughtWidgetProductImageContainer");
            let gfbFrequentBoughtWidgetProductImageRef = gfbFrequentBoughtWidgetProductImageContainerRef.querySelector(".gfbFrequentBoughtWidgetProductImage");
            let currentSelectedVariantsForOffer = gfb.gfbFrequentBought.state.currentSelectedVariants[offerId];
            let currentSelectedVariantsByOptions = gfb.gfbFrequentBought.state.currentSelectedOptions[offerId];
            let gfbFrequentBoughtWidgetProductContainerRef = document.querySelector(".gfbFrequentBoughtWidgetProductContainer");
            let gfbFrequentBoughtPrepareUIForVariantsArgs = {product , offerId , currentSelectedVariantsForOffer, gfbFrequentBoughtWidgetProductContainerRef , currentSelectedVariantsByOptions};
            let gfbFrequentBoughtWidgetProductVariantSelector = gfb.gfbFrequentBought.f.gfbFrequentBoughtPrepareUIForVariants(gfbFrequentBoughtPrepareUIForVariantsArgs);
            let gfbVariantSelctorPopoverRef = document.querySelector(`.gfbVariantSelctorPopover[data-offer-id="${offerId}"]`);
            let imageSource = currentSelectedVariantsForOffer[product.handle]?.image || product?.variants[0]?.image || product?.featured_image;
            gfbFrequentBoughtWidgetProductImageRef.src = imageSource;
            
            gfbVariantSelctorPopoverRef.innerHTML = "";
            gfbVariantSelctorPopoverRef.appendChild(gfbFrequentBoughtWidgetProductVariantSelector);

            // Replace only the text content, preserving child elements
            Array.from(gfbFrequentBoughtWidgetProductVariantSelectorBtnRef.childNodes)
              .filter(node => node.nodeType === Node.TEXT_NODE)
              .forEach(node => node.nodeValue = '');
            gfbFrequentBoughtWidgetProductVariantSelectorBtnRef.insertBefore(
              document.createTextNode(currentSelectedVariantsByOptions[productHandle].values.join("/")),
              gfbFrequentBoughtWidgetProductVariantSelectorBtnRef.firstChild
            );

          }

          let selectedOfferContainer = event.target.closest('.gfbFrequentBoughtWidgetContentContainer');
          let selectedPriceBannerr = document.querySelector(`.gfbFrequentBoughtWidgetPriceContainer[gfbFrequentBoughtWidgetPriceContainer-id="${offerId}"]`);

          if (selectedOfferContainer) {
            selectedOfferContainer.innerHTML = content.innerHTML;
          }
          if (!horizontalDisplayDesign && selectedPriceBannerr) {
            selectedPriceBannerr.innerHTML = priceBanner.innerHTML;
          }
          
        } catch (error) {
          gfb.utility.debugConsole("error in gfbFindNewVariantForSelectedOption ", error);
        }
      },
      gfbVariantFilterForRequiredUI: function (variantsObject, UI_TYPE) {
        //iterate over otpions and filter the varients according to options
        // UI_TYPE will be a string "dd", "swatch", "label"
        // first check for color if true then return swatch
        // if varient type is
        // filter variants accordingly
        // return the fillteredVariants
      },
      gfbFindIndexOfActiveVariant: function (optionIndex, values, currentSelectedVariantsByOptionsForProduct) {
        try {
          let index = -1;
          for (let i = 0; i < values.length; i++) {
            if (currentSelectedVariantsByOptionsForProduct.values[optionIndex] == values[i].label) {
              index = i;
              break;
            }
          }
          return index;
        } catch (error) {
          gfb.utility.debugConsole("error in gfbFindIndexOfActiveVariant ", error);
        }
      },
      gfbFrequentBoughtPrepareUIForVariantsForMasterDropdown: function (
        product,
        currentSelectedVariantsForOffer,
        gfbFrequentBoughtWidgetProductContainer
      ) {
        try {
          const gfbFrequentBoughtMasterDropdownParentContainer = document.createElement("div");
          gfbFrequentBoughtMasterDropdownParentContainer.classList.add("gfbFrequentBoughtMasterDropdownParentContainer");
          let gfbFrequentBoughtWidgetProductVariantSelector;
          if ((product && product.variants && product.variants.length > 1 ) || (product && product.options &&  product.options.length && product.options[0].values.length > 1) ) {
            gfbFrequentBoughtWidgetProductVariantSelector = document.createElement("select");
            gfbFrequentBoughtWidgetProductVariantSelector.classList.add("gfbFrequentBoughtWidgetProductVariantSelector");
            let outOfStockCnt = 0;
            for (let j = 0; j < product.variants.length; j++) {
              let variant = product.variants[j];
              if (variant && variant.available) {
                const gfbFrequentBoughtWidgetProductVariantSelectorOption = document.createElement("option");
                gfbFrequentBoughtWidgetProductVariantSelectorOption.classList.add("gfbFrequentBoughtWidgetProductVariantSelectorOption");

                if (j == currentSelectedVariantsForOffer[product.handle].selectedIndex + outOfStockCnt) {
                  gfbFrequentBoughtWidgetProductVariantSelectorOption.setAttribute("selected", true);
                  // currentSelectedVariants[product.handle] = {id: variant.id, quantity: product.quantity, originalPrice: variant.totalVariantPrice, isSelected: true}
                }

                gfbFrequentBoughtWidgetProductVariantSelectorOption.setAttribute("value", variant.id);
                gfbFrequentBoughtWidgetProductVariantSelectorOption.setAttribute("data-price", variant.totalVariantPrice);
                gfbFrequentBoughtWidgetProductVariantSelectorOption.innerText = variant.public_title;
                gfbFrequentBoughtWidgetProductVariantSelector.appendChild(gfbFrequentBoughtWidgetProductVariantSelectorOption);
              } else {
                outOfStockCnt++;
              }
            }
          }
          if (product.variants.length == 0) {
            gfbFrequentBoughtWidgetProductContainer.classList.add("gfbFrequentBoughtWidgetProductContainerDisabled");
            gfbFrequentBoughtWidgetProductContainer.classList.add("gfbFrequentBoughtWidgetProductContainerOutOfStock");
            // currentSelectedVariants[product.handle] = {id: product.variants[0].id, quantity: product.quantity, originalPrice: product.variants[0].totalVariantPrice, isSelected: true}
          }

          if(gfbFrequentBoughtWidgetProductVariantSelector){
            gfbFrequentBoughtMasterDropdownParentContainer.appendChild(gfbFrequentBoughtWidgetProductVariantSelector);
          }
          return gfbFrequentBoughtMasterDropdownParentContainer;
        } catch (error) {
          gfb.utility.debugConsole("error in gfbFrequentBoughtPrepareUIForVariantsForMasterDropdown ", error);
        }
      },
      gfbFrequentBoughtPreparePrice: function (currentOffer) {
        try {
          let currentSelectedVariantsForOffer = gfb.gfbFrequentBought.state.currentSelectedVariants[currentOffer.offerId];
          let discountCategoryType = currentOffer?.discountApplied?.type || "ALL_PRODUCTS";
          let discountType = currentOffer.discountType || currentOffer.metafieldData.discount.type;
          const gfbFrequentBoughtWidgetPriceContainer = document.createElement("div");
          gfbFrequentBoughtWidgetPriceContainer.classList.add("gfbFrequentBoughtWidgetPriceContainer");
          
          // Set attribute "gfbFrequentBoughtWidgetPriceContainer-id" with the value from currentOffer.offerId
          gfbFrequentBoughtWidgetPriceContainer.setAttribute("gfbFrequentBoughtWidgetPriceContainer-id", currentOffer.offerId);
          
          // Create a div element and add class "gfbFrequentBoughtWidgetPriceContainerText"
          const gfbFrequentBoughtWidgetPriceContainerText = document.createElement("div");
          gfbFrequentBoughtWidgetPriceContainerText.classList.add("gfbFrequentBoughtWidgetPriceContainerText");
          
          // Set inner HTML for gfbFrequentBoughtWidgetPriceContainerText
          const totalPriceText = currentOffer?.configuration?.totalPriceName_FBT || "Total Price";
          gfbFrequentBoughtWidgetPriceContainerText.innerHTML = totalPriceText;
          
          // Create a div element and add class "gfbFrequentBoughtWidgetPriceContainerPrice"
          const gfbFrequentBoughtWidgetPriceContainerPrice = document.createElement("div");
          gfbFrequentBoughtWidgetPriceContainerPrice.classList.add("gfbFrequentBoughtWidgetPriceContainerPrice");
          
          // Create a div element and add class "gfbFrequentBoughtWidgetPriceContainerPriceOriginal"
          const gfbFrequentBoughtWidgetPriceContainerPriceOriginal = document.createElement("div");
          gfbFrequentBoughtWidgetPriceContainerPriceOriginal.classList.add("gfbFrequentBoughtWidgetPriceContainerPriceOriginal");
          
          // Create a div element and add class "gfbFrequentBoughtWidgetPriceContainerPriceDiscounted"
          const gfbFrequentBoughtWidgetPriceContainerPriceDiscounted = document.createElement("div");
          gfbFrequentBoughtWidgetPriceContainerPriceDiscounted.classList.add("gfbFrequentBoughtWidgetPriceContainerPriceDiscounted");

          let getActiveCurrrencySymbol = gfb.utility.getCurrencySymbol();
          let discountValue = currentOffer.discountValue || currentOffer.metafieldData.discount.value;

          let originalPrice = 0;
          let strikeThroughPrice = 0;
          let discountedPrice = 0;
          for (let i = 0; i < currentOffer.selectedProducts.length; i++) {
            let product = currentOffer.selectedProducts[i];
            let discountTypeProduct = currentOffer.discountType || currentOffer.metafieldData.discount.type;
            let currentPrice = 0;
            let currentStrikeThroughtPrice = 0;
            if (currentSelectedVariantsForOffer[product.handle].isSelected == false) {
              continue;
            }
            currentPrice =
              currentSelectedVariantsForOffer[product.handle]?.originalPrice || product?.variants[0]?.totalVariantPrice || "0.00";
            currentStrikeThroughtPrice = currentSelectedVariantsForOffer[product.handle]?.strikeThroughPrice;
            // currentPrice = gfb.utility.convertFromStoreCurrencyToCustomer(currentPrice);
            let quantity = currentSelectedVariantsForOffer[product.handle]?.quantity || product?.quantity || 1;
            quantity = parseInt(quantity);
            currentPrice = parseFloat(currentPrice);
            currentStrikeThroughtPrice = parseFloat(currentStrikeThroughtPrice);

            if(discountCategoryType == "SPECIFIC_PRODUCTS"){
              let productArray = currentOffer.discountApplied.products;
              
              let prodID = product.id;
              let productDetails = gfb.gfbFrequentBought.state.frequentBoughtShopifyDataByHandles[product.handle];
  
              if(productDetails.mutated){
                let oldId = productDetails.id.toString();
                prodID = oldId.slice(0,-2);
                prodID = Number(prodID);
              }
  
              // search for product.id from productArray
              let _productId = JSON.stringify(JSON.parse(JSON.stringify(prodID)));

              let isProductAvailable = productArray.includes(_productId);
              if(!isProductAvailable){
                discountTypeProduct = "NO_DISCOUNT";
              }
            }

            let currentDiscountPrice = 0;
            if (discountTypeProduct == "PERCENTAGE") {
              currentDiscountPrice = currentPrice - (currentPrice * discountValue) / 100;
              currentDiscountPrice = (currentDiscountPrice).toFixed(2);
              currentDiscountPrice = parseFloat(currentDiscountPrice);
            }
            if(discountTypeProduct == "FIXED_PRICE_BUNDLE"){
              currentDiscountPrice = currentPrice - (currentPrice * 0) / 100;
              currentDiscountPrice = (currentDiscountPrice).toFixed(2);
              currentDiscountPrice = parseFloat(currentDiscountPrice);
            }
            if(discountTypeProduct == "NO_DISCOUNT" || currentOffer.isDiscountEnabled == false){
              currentDiscountPrice = currentPrice - (currentPrice * 0) / 100;
              currentDiscountPrice = (currentDiscountPrice).toFixed(2);
              currentDiscountPrice = parseFloat(currentDiscountPrice);
            }
            if(discountTypeProduct == "FIXED_AMOUNT_OFF" && discountCategoryType == "SPECIFIC_PRODUCTS"){
              discountValue = gfb.utility.convertFromStoreCurrencyToCustomer(discountValue);
              currentDiscountPrice = currentPrice - discountValue;
              if(currentDiscountPrice <= 0){
                currentDiscountPrice = 0;
              }
              currentDiscountPrice = (currentDiscountPrice).toFixed(2);
              currentDiscountPrice = parseFloat(currentDiscountPrice);
            }

            strikeThroughPrice = strikeThroughPrice + currentStrikeThroughtPrice;
            originalPrice = originalPrice + currentPrice;
            discountedPrice = discountedPrice + currentDiscountPrice;
          }

          if(discountType == "FIXED_PRICE_BUNDLE"){
            discountValue = gfb.utility.convertFromStoreCurrencyToCustomer(discountValue);
            let realDiscount = originalPrice - discountValue;
            discountedPrice = discountValue;
            discountedPrice = parseFloat(discountedPrice);
            discountedPrice = (discountedPrice).toFixed(2);
            discountedPrice = parseFloat(discountedPrice);
          }

          if(discountType == "FIXED_AMOUNT_OFF" && discountCategoryType == "ALL_PRODUCTS"){
            discountValue = gfb.utility.convertFromStoreCurrencyToCustomer(discountValue);
            discountedPrice = originalPrice - discountValue;
            discountedPrice = (discountedPrice).toFixed(2);
            discountedPrice = parseFloat(discountedPrice);
          }

          originalPrice = parseFloat(originalPrice).toFixed(2);
          strikeThroughPrice = parseFloat(strikeThroughPrice).toFixed(2);
          discountedPrice = parseFloat(discountedPrice).toFixed(2);

          if(discountType == "NO_DISCOUNT" && currentOffer.advancedConfiguration?.isComparedPriceVisible == false){
            gfbFrequentBoughtWidgetPriceContainerPrice.classList.add("gfbFrequentBoughtWidgetPriceContainerPriceNoDiscount");
          }
          originalPrice = getActiveCurrrencySymbol + originalPrice;
          strikeThroughPrice = getActiveCurrrencySymbol + strikeThroughPrice;
          discountedPrice = getActiveCurrrencySymbol + discountedPrice;
          // console.log('originalPrice->', originalPrice);
          // gfbFrequentBoughtWidgetPriceContainerPriceOriginal.html(originalPrice);
          gfbFrequentBoughtWidgetPriceContainerPriceOriginal.innerHTML = strikeThroughPrice;
          gfbFrequentBoughtWidgetPriceContainerPriceDiscounted.innerHTML = discountedPrice;

          gfbFrequentBoughtWidgetPriceContainerPrice.appendChild(gfbFrequentBoughtWidgetPriceContainerPriceDiscounted);
          gfbFrequentBoughtWidgetPriceContainerPrice.appendChild(gfbFrequentBoughtWidgetPriceContainerPriceOriginal);

          gfbFrequentBoughtWidgetPriceContainer.appendChild(gfbFrequentBoughtWidgetPriceContainerText);
          gfbFrequentBoughtWidgetPriceContainer.appendChild(gfbFrequentBoughtWidgetPriceContainerPrice);

          return gfbFrequentBoughtWidgetPriceContainer;
        } catch (error) {
          gfb.utility.debugConsole(error);
        }
      },
      gfbFrequentBoughtPrepareContentPriceContainer: function (currentOffer, product, containerElement, stylingObject) {
        try {
          let currentSelectedVariantsForOffer = gfb.gfbFrequentBought.state.currentSelectedVariants[currentOffer.offerId];
          let discountType = currentOffer.discountType || currentOffer.metafieldData.discount.type;
          let discountValue = currentOffer.discountValue || currentOffer.metafieldData.discount.value;
          let getActiveCurrrencySymbol = gfb.utility.getCurrencySymbol();
          let discountCategoryType = currentOffer?.discountApplied?.type || "ALL_PRODUCTS";
          const gfbFrequentBoughtWidgetProductPriceContainer = document.createElement("span");
          gfbFrequentBoughtWidgetProductPriceContainer.classList.add("gfbFrequentBoughtWidgetProductPriceContainer");
          
          // Create a div element and add class "gfbFrequentBoughtWidgetProductPriceOriginal"
          const gfbFrequentBoughtWidgetProductPriceOriginal = document.createElement("div");
          gfbFrequentBoughtWidgetProductPriceOriginal.classList.add("gfbFrequentBoughtWidgetProductPriceOriginal");
          // gfbFrequentBoughtWidgetProductPriceOriginal.style.color = stylingObject[productPriceTextColor]
          // Create a div element and add class "gfbFrequentBoughtWidgetProductPriceDiscounted"
          const gfbFrequentBoughtWidgetProductPriceDiscounted = document.createElement("div");
          gfbFrequentBoughtWidgetProductPriceDiscounted.classList.add("gfbFrequentBoughtWidgetProductPriceDiscounted");
          // gfbFrequentBoughtWidgetProductPriceDiscounted.style.color = stylingObject[productDiscountedPriceColor]

          let originalPrice =
            currentSelectedVariantsForOffer[product.handle]?.originalPrice || product?.variants[0]?.totalVariantPrice || 0;
          let strikeThroughPrice = currentSelectedVariantsForOffer[product.handle]?.strikeThroughPrice;
          strikeThroughPrice = parseFloat(strikeThroughPrice).toFixed(2);
          strikeThroughPrice = getActiveCurrrencySymbol + strikeThroughPrice;

          let totalOfferPrice = 0;
          const keysArray = Object.keys(currentSelectedVariantsForOffer);
          keysArray.forEach((key) => {
            let offer = currentSelectedVariantsForOffer[key];
            let tempPrice = offer.originalPrice;
            tempPrice = parseFloat(tempPrice)
            totalOfferPrice = totalOfferPrice + tempPrice;
            totalOfferPrice = parseFloat(totalOfferPrice).toFixed(2);
            totalOfferPrice = parseFloat(totalOfferPrice);
          })

          let originalPrice_dummy = JSON.parse(JSON.stringify(originalPrice));
          if(discountCategoryType == "SPECIFIC_PRODUCTS"){
            let productArray = currentOffer.discountApplied.products;

            let prodID = product.id;
            let productDetails = gfb.gfbFrequentBought.state.frequentBoughtShopifyDataByHandles[product.handle];

            if(productDetails.mutated){
              let oldId = productDetails.id.toString();
              prodID = oldId.slice(0,-2);
              prodID = Number(prodID);
            }

            // search for product.id from productArray
            let _productId = JSON.stringify(JSON.parse(JSON.stringify(prodID)));
            let isProductAvailable = productArray.includes(_productId);
            if(!isProductAvailable){
              discountType = "NO_DISCOUNT";
            }
          }

          if (discountType == "PERCENTAGE") {
            // originalPrice = gfb.utility.convertFromStoreCurrencyToCustomer(originalPrice);
            originalPrice = parseFloat(originalPrice).toFixed(2);

            let discountedPrice = originalPrice - (originalPrice * discountValue) / 100;
            discountedPrice = parseFloat(discountedPrice).toFixed(2);

            originalPrice = getActiveCurrrencySymbol + originalPrice;
            discountedPrice = getActiveCurrrencySymbol + discountedPrice;

            // gfbFrequentBoughtWidgetProductPriceOriginal.html(originalPrice);
            gfbFrequentBoughtWidgetProductPriceOriginal.innerHTML = strikeThroughPrice;
            gfbFrequentBoughtWidgetProductPriceDiscounted.innerHTML = discountedPrice;
          }
          if (discountType == "FIXED_PRICE_BUNDLE") {
            // 
            let convertedDiscountValue = gfb.utility.convertFromStoreCurrencyToCustomer(discountValue);
            // discountValue = gfb.utility.convertFromStoreCurrencyToCustomer(discountValue);
            let finalFixedPrice = convertedDiscountValue;
            discountValue = totalOfferPrice - finalFixedPrice;
            discountType = "FIXED_AMOUNT_OFF";
            
            // discountedPrice = originalPrice - (originalPrice * 0) / 100;
            // discountedPrice = parseFloat(discountedPrice).toFixed(2);

            // originalPrice = getActiveCurrrencySymbol + originalPrice;
            // discountedPrice = getActiveCurrrencySymbol + discountedPrice;

            // // gfbFrequentBoughtWidgetProductPriceOriginal.html(originalPrice);
            // gfbFrequentBoughtWidgetProductPriceOriginal.innerHTML = strikeThroughPrice;
            // gfbFrequentBoughtWidgetProductPriceDiscounted.innerHTML = discountedPrice;
          }
          if (discountType == "NO_DISCOUNT" || currentOffer.isDiscountEnabled == false) {
            discountedPrice = originalPrice_dummy - (originalPrice_dummy * 0) / 100;
            discountedPrice = parseFloat(discountedPrice).toFixed(2);

            originalPrice_dummy = getActiveCurrrencySymbol + originalPrice_dummy;
            discountedPrice = getActiveCurrrencySymbol + discountedPrice;

            // gfbFrequentBoughtWidgetProductPriceOriginal.html(originalPrice_dummy);
            gfbFrequentBoughtWidgetProductPriceOriginal.innerHTML = strikeThroughPrice;
            gfbFrequentBoughtWidgetProductPriceDiscounted.innerHTML = discountedPrice;
          }
          if (discountType == "FIXED_AMOUNT_OFF" && discountCategoryType != "SPECIFIC_PRODUCTS") {
            discountValue = gfb.utility.convertFromStoreCurrencyToCustomer(discountValue);
            let valueChange = totalOfferPrice - discountValue;
            let percentRemaining = (valueChange / totalOfferPrice) * 100;
            let percentValueChange = 100 - percentRemaining;
            percentValueChange = parseFloat(percentValueChange).toFixed(2);
            percentValueChange = parseFloat(percentValueChange);

            discountedPrice = originalPrice_dummy - (originalPrice_dummy * percentValueChange) / 100;
            discountedPrice = parseFloat(discountedPrice).toFixed(2);

            originalPrice_dummy = getActiveCurrrencySymbol + originalPrice_dummy;
            discountedPrice = getActiveCurrrencySymbol + discountedPrice;

            // gfbFrequentBoughtWidgetProductPriceOriginal.innerHTML = (originalPrice_dummy);
            gfbFrequentBoughtWidgetProductPriceOriginal.innerHTML = strikeThroughPrice;
            gfbFrequentBoughtWidgetProductPriceDiscounted.innerHTML = discountedPrice;
          }
          if(discountType =="FIXED_AMOUNT_OFF" && discountCategoryType == "SPECIFIC_PRODUCTS"){
            discountValue = gfb.utility.convertFromStoreCurrencyToCustomer(discountValue);         

            discountedPrice = originalPrice_dummy - discountValue;
            if(discountedPrice <= 0){
              discountedPrice = 0;
            }
            discountedPrice = parseFloat(discountedPrice).toFixed(2);

            originalPrice_dummy = getActiveCurrrencySymbol + originalPrice_dummy;
            discountedPrice = getActiveCurrrencySymbol + discountedPrice;

            // gfbFrequentBoughtWidgetProductPriceOriginal.innerHTML = (originalPrice_dummy);
            gfbFrequentBoughtWidgetProductPriceOriginal.innerHTML = strikeThroughPrice;
            gfbFrequentBoughtWidgetProductPriceDiscounted.innerHTML = discountedPrice;
          }
          if(discountType == "NO_DISCOUNT" && currentOffer.advancedConfiguration?.isComparedPriceVisible == false){
            gfbFrequentBoughtWidgetProductPriceContainer.classList.add("gfbFrequentBoughtWidgetProductPriceNoDiscount");
          }
          gfbFrequentBoughtWidgetProductPriceContainer.appendChild(gfbFrequentBoughtWidgetProductPriceDiscounted);
          gfbFrequentBoughtWidgetProductPriceContainer.appendChild(gfbFrequentBoughtWidgetProductPriceOriginal);

          return gfbFrequentBoughtWidgetProductPriceContainer;
        } catch (error) {
          gfb.utility.debugConsole(error);
        }
      },
      prepareWidgets: function (settings, parent) {
        try {
          let htmlContentDivs = [];
          const gfbWidgets = document.createElement("div");
          gfbWidgets.classList.add("gfbWidgets");
          let offers = gfb.settings.frequentBoughtData.length > 0 ? gfb.settings.frequentBoughtData : [];
          for (let i = 0; i < offers.length; i++) {
            // for each offer we need to create saperte widget
            // parent function to create an offer widget, then that having subsequennt sections for title, each poduct, add to cart buttons

            let offer = offers[i];

            // if offer is disabled don't render the widget
            if (!offer.isActive) {
              continue;
            }
            offer = gfb.gfbFrequentBought.state.frequentBoughtDataByOfferId[offer.offerId];
            let isOfferRelevantToCurrentPage = offer.relevantToCurrentPage || false;
            if (isOfferRelevantToCurrentPage) {
              let offerId = offer.offerId;
              gfb.gfbFrequentBought.state.activeOffer.push(offerId);
              htmlContentDivs.push(gfb.gfbFrequentBought.f.gfbFrequentBoughtPrepareUIV2(offer));
            }
          }
          htmlContentDivs.forEach(function(element) {
            gfbWidgets.appendChild(element);
          });
          return gfbWidgets;
        } catch (err) {
          gfb.utility.debugConsole(err);
        }
      },
      deriveWidgetDataForFBT: function (settings, parent) {
        try {
          
          //this function is responsible for putting data into specificProducts 
          // if display option parent is selected or isShowOnComponentPages selected

          let dataForWidget = settings?.frequentBoughtData || [];
          for (let i = 0; i < dataForWidget.length; i++) {
            let widgetInfo = dataForWidget[i].widgetDisplayOptions;
            let isShowOnComponentPages = widgetInfo?.componentProductPages || false;
            let isShowOnAllPages = widgetInfo?.allProductPages || false;
            let isShowOnSpecificPages = widgetInfo?.specificProductPages || false;
            let isParentProduct = widgetInfo?.parentProduct || false;
            // go throught selectedProducts array and if the value is set as componentProductPages = true then
            // add them to specific products array. and change the value of specificProductPages to true

            let tempProductsArray = [];

            if (isParentProduct) {
              tempProductsArray = [dataForWidget[i].bundleShopifyData];
              gfb.settings.frequentBoughtData[i].widgetDisplayOptions.specificProductPages = true;
              isShowOnComponentPages = false;
            }

            if (isShowOnComponentPages) {
              tempProductsArray = dataForWidget[i].selectedProducts.map((product) => {
                return product;
              });
              gfb.settings.frequentBoughtData[i].widgetDisplayOptions.specificProductPages = true;
            }

            gfb.settings.frequentBoughtData[i].widgetDisplayOptions.specificProducts.push(...tempProductsArray);
          }
        } catch (err) {
          gfb.utility.debugConsole(err);
        }
      },
      deriveVariantDesign: function () {
        try {
          // iterate over each offer from frequentBoughtTogether
          // iterate over selectedProducts
          // iterate over options array of each product

          // if the name of option is color -> variant Design colorSwatch
          // else check values in option -> if value count <5, labels
          //                                  else singleDropdown
          let fbtOffers = gfb.settings.frequentBoughtData;
          for (let i = 0; i < fbtOffers.length; i++) {
            let currOffer = fbtOffers[i];
            let selectedProducts = currOffer.selectedProducts;
            let variantDisplay = currOffer.variantDisplayDesign;
            let isAutomatic = variantDisplay.isAutomaticVariantDesign;
            let isManual = variantDisplay.isManualVariantDesign;
            if (isAutomatic) {
              for (let j = 0; j < selectedProducts.length; j++) {
                let productId = selectedProducts[j].productId;
                let optionsArray = selectedProducts[j].options;
                let customOptionsArray = [];
                for (let k = 0; k < optionsArray.length; k++) {
                  let currOption = optionsArray[k];
                  let optionObject = {};

                  let currOptionName = currOption.name.toLowerCase();
                  let currOptionValues = currOption.values;
                  currOptionValues = currOptionValues.filter((item) => item.isSelected);

                  if (currOptionName == "color") {
                    currOptionValues.forEach((item) => {
                      item.imgSrc = selectedProducts[j].images[0].originalSrc;
                    });
                    optionObject.customizeSwatchType = currOption?.customizeSwatchType || "IMAGES"
                    optionObject.name = currOptionName;
                    optionObject.design = "SWATCH";
                    optionObject.productId = productId;
                    optionObject.values = currOptionValues;
                  } else if (currOptionValues.length < 5) {
                    optionObject.name = currOptionName;
                    optionObject.design = "LABEL";
                    optionObject.productId = productId;
                    optionObject.values = currOptionValues;
                  } else {
                    optionObject.name = currOptionName;
                    optionObject.design = "DROPDOWN";
                    optionObject.productId = productId;
                    optionObject.values = currOptionValues;
                  }
                  customOptionsArray.push(optionObject);
                }
                gfb.settings.frequentBoughtData[i].selectedProducts[j].designObject = customOptionsArray;
              }
            } else if (isManual) {
              let maunalVariantDesignByOptionId = {};
              let variantDisplayDesign = variantDisplay.manualVariantDesign;

              variantDisplayDesign.forEach((obj) => {
                maunalVariantDesignByOptionId[obj.optionId] = obj;
              });

              for (let j = 0; j < selectedProducts.length; j++) {
                let productId = selectedProducts[j].productId;
                let optionsArray = selectedProducts[j].options;
                let customOptionsArray = [];
                for (let k = 0; k < optionsArray.length; k++) {
                  let currOption = optionsArray[k];
                  let optionObject = {};

                  let currOptionName = currOption.name.toLowerCase();
                  let currOptionValues = currOption.values;
                  let selectedDesign = currOption.selectedDesign;
                  currOptionValues = currOptionValues.filter((item) => item.isSelected);
                  let variantDesignData = maunalVariantDesignByOptionId[currOption.id];

                  optionObject.name = currOptionName;
                  optionObject.design = variantDesignData?.selectedDesign || "DROPDOWN";
                  optionObject.productId = productId;
                  optionObject.values = currOptionValues;

                  if(optionObject.design == "SWATCH"){
                    optionObject.customizeSwatchType = currOption?.customizeSwatchType || "IMAGES"
                  }

                  customOptionsArray.push(optionObject);
                }
                gfb.settings.frequentBoughtData[i].selectedProducts[j].designObject = customOptionsArray;
              }
            }
          }
        } catch (error) {
          gfb.utility.debugConsole(error);
        }
      },
      prefetchDataForFBT: async function () {

        

        if (gfb.gfbFrequentBought.state.frequentBoughtShopifyData.length > 0) {
          return;
        }

        let counterForHandlesPickedFromSessionStorage = 0;
        let productHandleArray = [];
        let productIdArray = [];
        let offers = gfb.settings.frequentBoughtData.length > 0 ? gfb.settings.frequentBoughtData : [];
        let isOfferFoundFlag = false;

        for (let i = 0; i < offers.length; i++) {
          let offer = offers[i];
          if(!offer.isActive){
            continue;
          }
          let selectedHandlesArray = [];
          let selectedIdArray = [];
          let selectedProducts = offers[i].selectedProducts;
          for (let j = 0; j < selectedProducts.length; j++) {
            let handle = selectedProducts[j].handle;
            let productId = selectedProducts[j].id;
            selectedHandlesArray.push(handle);
            selectedIdArray.push(productId);
          }
          let widgetInfo = offers[i].widgetDisplayOptions;
          let { relevantHandles, relevantIds } = gfb.utility.filterIrrelevantHandles(selectedHandlesArray, widgetInfo); // return a flag

          if (relevantIds && relevantIds.length > 0 && !isOfferFoundFlag) {
            gfb.settings.frequentBoughtData[i].relevantToCurrentPage = true;
            productHandleArray.push(...selectedHandlesArray);
            productIdArray.push(...selectedIdArray);
            isOfferFoundFlag = true;
            // productHandleArray.push(...relevantHandles);
          }else{
            // remove the offer if not valid, we dont need to fetch data for the same
            // gfb.settings.frequentBoughtData[i].relevantToCurrentPage = false;
            // remove this offer from frequentBoughtData array
            // gfb.settings.frequentBoughtData.splice(i, 1);
            // i--;
            
            // fix to get info of all offers on all pages
            // productHandleArray.push(...selectedHandlesArray);
            // productIdArray.push(...selectedIdArray);
          }

          // TODO: fix later
          if (widgetInfo.allProductPages) {
            gfb.settings.frequentBoughtData[i].relevantToCurrentPage = true;
            productHandleArray.push(...selectedHandlesArray);
            productIdArray.push(...selectedIdArray);  
          }

          if(gfb.state.page_type == "cart"){
            productHandleArray.push(...selectedHandlesArray);
            productIdArray.push(...selectedIdArray);  
          }
          
        }

        gfb.utility.debugConsole("fetching product data graphql")
          
          //check if current page handle is present in widgetData or not
          // if(false && gfb.settings.STOREFRONT_ACCESS_TOKEN){
            // let productData = await gfb.utility.getProductsDataByIds(productIdArray);
            // gfb.gfbFrequentBought.state.graphQLObject = productData
          // }

          gfb.utility.debugConsole("fetching product data graphql")


        const promises = productHandleArray.map(async (handle, index) => {
            const productData = gfb.utility.getProductDataV2(handle);
            return productData;
          // }
        });

        gfb.utility.debugConsole("fetching product data shopify-ajax")
        gfb.gfbFrequentBought.state.frequentBoughtShopifyData = await Promise.all(promises);
        gfb.utility.debugConsole("fetching product data shopify-ajax")
        // gfb.gfbFrequentBought.state.graphQLObject
        let shopifyData = JSON.parse(JSON.stringify(gfb.gfbFrequentBought.state.frequentBoughtShopifyData))
        
        gfb.gfbFrequentBought.f.mutateDataFromSettingsFBT(shopifyData);
        let frequentBoughtShopifyData = JSON.parse(JSON.stringify(gfb.gfbFrequentBought.state.frequentBoughtShopifyData));

        gfb.gfbFrequentBought.state.frequentBoughtShopifyDataByHandles = gfb.utility.convertArrayToObject(
          frequentBoughtShopifyData,
          "handle"
        );
        gfb.gfbFrequentBought.state.frequentBoughtShopifyDataByProductIds = gfb.utility.convertArrayToObject(
          frequentBoughtShopifyData,
          "id"
        );
        gfb.gfbFrequentBought.state.frequentBoughtShopifyDataByVariantIds = gfb.utility.createMapForVariantId(
          gfb.gfbFrequentBought.state.frequentBoughtShopifyDataByHandles
        );

        gfb.gfbFrequentBought.state.frequentBoughtDataByOfferId = gfb.utility.createOfferMap();

        
      },
      mutateDataFromSettingsFBT: function(shopifyData){
        try{
          let settingsData = gfb.settings.frequentBoughtData;
          
          let data = JSON.parse(JSON.stringify(shopifyData));
          for(let i = 0; i < settingsData.length; i++){
            let selectedProducts = settingsData[i].selectedProducts;
            let relevantToCurrentPage = settingsData[i].relevantToCurrentPage;
            if(!relevantToCurrentPage){
              continue;
            }
            for(let j = 0; j < selectedProducts.length; j++){

              // select product from data using productId
              let productId = selectedProducts[j].productId;
              let selectedIndex;
              for(let k = 0; k < data.length; k++){
                let item = data[k];
                if(item.id == productId && item.mutated != true){
                  selectedIndex = k;
                  break;
                }
              }

              let newHandle = selectedProducts[j]?.handle_2 || undefined;
              if(newHandle && (selectedIndex+1)){
                data[selectedIndex].handle = newHandle;
                data[selectedIndex].id = parseInt(selectedProducts[j]?.productId_2) || undefined;
                data[selectedIndex].mutated = true;
                selectedProducts[j].mutated = true;
                selectedProducts[j].mutatedHandle = newHandle;
                selectedProducts[j].mutatedId = parseInt(selectedProducts[j]?.productId_2) || undefined;
              }
            }
          }

          gfb.gfbFrequentBought.state.frequentBoughtShopifyData = data;

        }catch(err){
          gfb.utility.debugConsole('error in mutateDataFromSettingsFBT ', err);
        }
      },
      deriveOptionImages: function () {
        try {
          let offersData = gfb.gfbFrequentBought.state.frequentBoughtDataByOfferId;
          let offerDataArr = Object.keys(offersData);
          let optionImageMapByOffer = {};
          let imageArray = [];
          for (let offerId of offerDataArr) {
            let selectedProducts = offersData[offerId].selectedProducts;
            for (let product of selectedProducts) {
              let variantsArr = product.variants;
              let productId = product.id;
              let productObj = {};
              for (let i = 0; i < variantsArr.length; i++) {
                let key = variantsArr[i].options.join("/");
                let imageLink = variantsArr[i].image;
                let isAvailable = variantsArr[i].available;
                let dummyObj = { [key]: { imageLink, isAvailable } };
                productObj[productId] = { ...productObj[productId], ...dummyObj };
                imageArray.push(imageLink);
              }

              optionImageMapByOffer[offerId] = { ...optionImageMapByOffer[offerId], ...productObj };
            }
            gfb.utility.preLoadImages(imageArray);
            gfb.gfbFrequentBought.state.optionImageMapByOffer = optionImageMapByOffer;
          }

          // offer pr map krenge
          // selected product
          // variant ->
          // option array -> convert to key
          // key pr image set krenge

          // finaly state set krenge
        } catch (error) {
          gfb.utility.debugConsole("error in deriveOption Images ", error);
        }
      },
      postAddToCartDecisionApplicator: async function(response, redirectBooleans, redirectionScript){
        try{

          let redirectToCartEnabled = redirectBooleans.redirectToCartEnabled;
          let redirectToCheckoutEnabled = redirectBooleans.redirectToCheckoutEnabled;
          let isExecuteCustomScriptAfterAddToCartEnabled = redirectBooleans.isExecuteCustomScriptAfterAddToCartEnabled;
          let executeDefaultSideCartUpdate = redirectBooleans.executeDefaultSideCartUpdate;
          let executeCustomScriptAfterAddToCart = redirectionScript
          let res = redirectToCartEnabled ? "redirectToCartEnabled" : (redirectToCheckoutEnabled ? "redirectToCheckoutEnabled" : (isExecuteCustomScriptAfterAddToCartEnabled ? "isExecuteCustomScriptAfterAddToCartEnabled" : (executeDefaultSideCartUpdate ? "executeDefaultSideCartUpdate" : "undefined")));
          switch(res){
            case "redirectToCartEnabled":
              window.location.href = "/cart";

            case "redirectToCheckoutEnabled":
              window.open("/checkout");
              break;

            case "isExecuteCustomScriptAfterAddToCartEnabled":
              gfb.utility.debugConsole('run script');
              eval(executeCustomScriptAfterAddToCart);
              break;

            case "executeDefaultSideCartUpdate":
              gfb.utility.debugConsole('side cart trigger')
              if (gfb.state.isCartUpdatedByUs) {
                gfb.f.updateCartState();                
              }
              break;

            default:
              gfb.utility.debugConsole('side cart trigger')
              if (gfb.state.isCartUpdatedByUs) {
                let sideCartUpdateResult = await gfb.f.updateCartState();
                if(!sideCartUpdateResult){
                  document.querySelector('.cart-open-btn').addEventListener('click', function() {
                  window.Shopify.theme.cartDrawer.open();
                });
                }
              }
              gfb.utility.debugConsole('postAddToCartDecision decided not to do anything')
            
          }
        }catch(err){
          gfb.utility.debugConsole("error in postAddToCartDecisionApplicator ", err);
        }
      },
      checkConditionForCart: function(dataToSend, offerId){
        try{
        let flag = true;
        let items = dataToSend.items;
        for(let i = 0; i < items.length; i++){
          let item = items[i];
          let variantId = item.id;
          let itemDetails = gfb.gfbFrequentBought.state.frequentBoughtShopifyDataByVariantIds[`${variantId}`];
          let parentProductFlag = false;
          if(!itemDetails){
            itemDetails = shopifyLiquidValuesApp9Ext.product;
            parentProductFlag = true;
          }
          let prodId = itemDetails.product_id || itemDetails.productId;
          let productArray = gfb.gfbFrequentBought.state.frequentBoughtDataByOfferId[offerId].selectedProducts;

          if(parentProductFlag){
            return flag;
          }

          let product;
          for(let j = 0; j < productArray.length; j++){
            if(productArray[j].id == prodId){
              product = productArray[j];
            }
          }

          // check for customField
          let isCustomFieldMandatory = product.customFieldOptions.isMandatory || false;
          if(isCustomFieldMandatory){
            let customField = item.properties["_flyBundles:customField"];
            if(!customField){
              flag = false;
            }
          }

        }
        return flag;
        }catch(err){
          gfb.utility.debugConsole("error in checkConditionForCart ", err);
        }
      },
      eventListenerForGfbFrequentBoughtAddToCartButton: function(){
        try{
          const elements = document.querySelectorAll(".gfbFrequentBoughtAddToCartButton");
          elements.forEach(element => {
            element.addEventListener('click', async function (event) {
              event.preventDefault();
              event.stopPropagation();
              event.stopImmediatePropagation();
              
              let clickedElement = event.target.closest(".gfbFrequentBoughtAddToCartButton");
              if (!clickedElement) return; // Exit if not the add to cart button
              
              // Get the offer id from the button
              let offerId = clickedElement.getAttribute("data-offer-id");
              let redirectToCartEnabled_FBT = gfb.settings.app.redirectToCartEnabled_FBT;
              let redirectToCheckoutEnabled_FBT = gfb.settings.app.redirectToCheckoutEnabled_FBT;
              let isExecuteCustomScriptAfterAddToCartEnabled_FBT = gfb.settings.app.isExecuteCustomScriptAfterAddToCartEnabled_FBT;
              let executeDefaultSideCartUpdate_FBT = gfb.settings.app.executeDefaultSideCartUpdate_FBT;
              let redirectBooleans = {
                  redirectToCartEnabled: redirectToCartEnabled_FBT,
                  redirectToCheckoutEnabled: redirectToCheckoutEnabled_FBT,
                  isExecuteCustomScriptAfterAddToCartEnabled: isExecuteCustomScriptAfterAddToCartEnabled_FBT,
                  executeDefaultSideCartUpdate: executeDefaultSideCartUpdate_FBT
              };
              let redirectionScript = gfb.settings.app.executeCustomScriptAfterAddToCart_FBT;
              let currentSelectedVariantsObj = gfb.gfbFrequentBought.state.currentSelectedVariants[offerId];
              
              let filteredOfferData = gfb.settings.frequentBoughtData.filter(
                  (offer) => offer.offerId === offerId || offer.metafieldData.offerId === offerId
              )[0];
              let cartBtnInProgressName = filteredOfferData.configuration.cartBtnInProgress || "Adding to Cart";
              
              // Change the button text to "Adding to Cart"
              let cartBtnName = clickedElement.innerText;
              clickedElement.innerText = cartBtnInProgressName;
              // Add a "gfbDisabled" class to the button
              clickedElement.classList.add("gfbDisabled");
              
              // Now inside this there will be an array of handles and variant ids
              // Get the variant ids from the array and add them to cart
              let currentSelectedVariants = Object.values(currentSelectedVariantsObj);
              let randomKey = gfb.utility.generateRandomAlphanumeric(3);
              let itemsArray = [];
              
              for (let i = 0; i < currentSelectedVariants.length; i++) {
                  const variantId = currentSelectedVariants[i].id;
                  const qty = parseInt(currentSelectedVariants[i].quantity);
                  isSelected = currentSelectedVariants[i].isSelected;
                  customField = currentSelectedVariants[i].customField;
                  if (isSelected && variantId) {
                      itemsArray.push({
                          id: variantId,
                          quantity: qty,
                          properties: {
                              "_flyBundles:OfferId": `${offerId}_${randomKey}`,
                              "_flyBundles:prodQty": parseInt(qty),
                              "_flyBundles:customField": customField,
                          },
                      });
                  }
              }
              itemsArray = gfb.utility.checkForDuplicateAndModifyItemsArray(itemsArray);
              let dataToSend = {
                  items: itemsArray,
                  "section-id": "template--15082866278607__main",
              };
              let checkConditionForCartPassed = gfb.gfbFrequentBought.f.checkConditionForCart(dataToSend, offerId);
              let response;
              if(checkConditionForCartPassed){
                response = await gfb.utility.addToCart(dataToSend);            
              }else{
                // popup that mandatory field missing
                // setInterval of 3 second, then rever back to normal
                let popup = document.querySelector(".gfbPopupForMissingSelection");
                popup.style.display = "block";
                setTimeout(() => {
                  popup.style.display = "none";
                }, 3000);

                gfb.utility.debugConsole("falg triggerer");
                response = false;
                clickedElement.classList.remove("gfbDisabled");
                clickedElement.innerText = cartBtnName;
                // close the code
                return;
              }
              gfb.utility.debugConsole("response", response);
            
              if (response) {
                  gfb.state.isCartUpdatedByUs = true;
                  clickedElement.classList.remove("gfbDisabled");
                  clickedElement.innerText = cartBtnName;
              }
              gfb.gfbFrequentBought.f.postAddToCartDecisionApplicator(response, redirectBooleans, redirectionScript);
            })
          })

          return true;
        }catch(err){

        }
      },
      eventListenerForGfbFrequentBoughtDropdown: function(){
        // is this function even needed??
        try{
          const elements = document.querySelectorAll(".gfbFrequentBoughtDropdown");
          elements.forEach((element) => {
            element.addEventListener("change", function(event) {
              try {
                  event.preventDefault();
                  event.stopPropagation();
                  event.stopImmediatePropagation();
                  let gfbFrequentBoughtDropdown = event.target;
          
                  let selectedVariantId = gfbFrequentBoughtDropdown.value;
          
                  let selectedProductHandle = gfbFrequentBoughtDropdown.closest(".gfbProductContainer").getAttribute("productHandle");
                  let offerId = gfbFrequentBoughtDropdown.closest(".gfbFrequentBoughtWidgetWrapper").getAttribute("data-offer-id");

                  gfb.gfbFrequentBought.state.currentSelectedVariants[offerId][selectedProductHandle]["id"] = selectedVariantId;
              } catch (error) {
                  gfb.utility.debugConsole("error in gfbFrequentBoughtDropdown -> ", error);
              }
          });
          })
        }catch(err){
          gfb.utility.debugConsole("eventListenerForGfbFrequentBoughtDropdown error => ", err)
        }
      },
      eventListenerForGfbFrequentBoughtWidgetProductVariantSelector: function(){
        try{
          const elements = document.querySelectorAll(".gfbFrequentBoughtWidgetProductVariantSelector");
          elements.forEach((element) => {
            element.addEventListener("change", async function(event) {
              try {
                event.preventDefault();
                event.stopPropagation();
                event.stopImmediatePropagation();
        
                // Get the target element
                let targetElement = event.target;
        
                // Check if the target element has the class "gfbFrequentBoughtWidgetProductVariantSelector"
                if (targetElement.classList.contains("gfbFrequentBoughtWidgetProductVariantSelector")) {
                    // Get the selected variant id
                    let selectedVariantId = targetElement.value;
        
                    // Get the selected product handle
                    let selectedProductHandle = targetElement.closest(".gfbFrequentBoughtWidgetProductContainer").getAttribute("data-product-handle");
        
                    // Get the offer id
                    let offerId = targetElement.closest(".gfbFrequentBoughtWidgetOfferContainer").getAttribute("data-offer-id");
        
                    // Get the original price
                    let originalPrice = targetElement.options[targetElement.selectedIndex].getAttribute("data-price");
        
                    // Get the image
                    let image = gfb.gfbFrequentBought.state.frequentBoughtShopifyDataByVariantIds[selectedVariantId].image;
        
                    // Get the variant
                    let variant = gfb.gfbFrequentBought.state.frequentBoughtShopifyDataByVariantIds[selectedVariantId];
        
                    // Get the selected index
                    let selectedIndex = targetElement.selectedIndex;
        
                    // Get the current offer
                    let currentOffer = gfb.gfbFrequentBought.state.frequentBoughtDataByOfferId[offerId];
        
                    // Check if compared price is visible
                    let isComparedPriceVisible = currentOffer?.advancedConfiguration?.isComparedPriceVisible;
        
                    // Update the state with the selected variant details
                    gfb.gfbFrequentBought.state.currentSelectedVariants[offerId][selectedProductHandle]["id"] = selectedVariantId;
                    gfb.gfbFrequentBought.state.currentSelectedVariants[offerId][selectedProductHandle]["originalPrice"] = originalPrice;
                    gfb.gfbFrequentBought.state.currentSelectedVariants[offerId][selectedProductHandle]["selectedIndex"] = selectedIndex;
                    gfb.gfbFrequentBought.state.currentSelectedVariants[offerId][selectedProductHandle]["strikeThroughPrice"] = isComparedPriceVisible ? variant?.strikeThroughPrice : originalPrice;
                    gfb.gfbFrequentBought.state.currentSelectedVariants[offerId][selectedProductHandle]["image"] = image;
        
                    // Prepare content and price banner
                    let content = gfb.gfbFrequentBought.f.gfbFrequentBoughtPrepareContent(currentOffer);
                    let priceBanner = gfb.gfbFrequentBought.f.gfbFrequentBoughtPreparePrice(currentOffer);
        
                    // Replace selected offer container and price banner
                    let selectedOfferContainer = targetElement.closest(`.gfbFrequentBoughtWidgetContentContainer`);
                    let selectedPriceBanner = document.querySelector(`.gfbFrequentBoughtWidgetPriceContainer[gfbFrequentBoughtWidgetPriceContainer-id="${offerId}"]`);
                    if (selectedOfferContainer) {
                      gfb.utility.debugConsole('content => ', content);
                      let contentToBePushed = content.innerHTML;
                      selectedOfferContainer.innerHTML = contentToBePushed;
                    }
                    if (selectedPriceBanner) {
                        let priceContentToBePushed = priceBanner.innerHTML;
                        selectedPriceBanner.innerHTML = priceContentToBePushed;
                    }
                    gfb.gfbFrequentBought.f.setInputsForSelectedVariants(currentOffer);
                    gfb.gfbFrequentBought.f.gfbFrequentBoughtCheckContainerOverflow();
                    gfb.gfbFrequentBought.f.registerEvents();
                }
              } catch (error) {
                  console.error("error in gfbFrequentBoughtWidgetProductVariantSelector -> ", error);
              }
            });
          })

        }catch(err){
          gfb.utility.debugConsole("error in eventListenerForGfbFrequentBoughtWidgetProductVariantSelector => ", err);
        }
      },
      eventListenerForGfbFrequentBoughtWidgetProductCheckbox: function(){
        try{
          const elements = document.querySelectorAll(".gfbFrequentBoughtWidgetProductCheckbox");
          elements.forEach((element) => {
            element.addEventListener("click", function(event) {
              try{
                event.preventDefault();
                event.stopPropagation();
                event.stopImmediatePropagation();

                let gfbFrequentBoughtWidgetProductCheckbox = event.target;
                let selectedProductHandle = gfbFrequentBoughtWidgetProductCheckbox.getAttribute("data-product-handle");
                let offerContainer = gfbFrequentBoughtWidgetProductCheckbox.closest(".gfbFrequentBoughtWidgetOfferContainer");
                let offerId = offerContainer.getAttribute("data-offer-id");
                let isChecked = gfbFrequentBoughtWidgetProductCheckbox.checked;
                gfb.gfbFrequentBought.state.currentSelectedVariants[offerId][selectedProductHandle]["isSelected"] = isChecked;

                let currentOffer = gfb.gfbFrequentBought.state.frequentBoughtDataByOfferId[offerId];

                let content = gfb.gfbFrequentBought.f.gfbFrequentBoughtPrepareContent(currentOffer);
                let selectedOfferContainer = document.querySelector(`.gfbFrequentBoughtWidgetContentContainer[gfbfrequentboughtwidgetcontentcontainer-id=${offerId}]`);

                selectedOfferContainer.innerHTML = content.innerHTML;

                let priceBanner = gfb.gfbFrequentBought.f.gfbFrequentBoughtPreparePrice(currentOffer);
                let selectedPriceBannerr = document.querySelector(`.gfbFrequentBoughtWidgetPriceContainer[gfbFrequentBoughtWidgetPriceContainer-id=${offerId}]`);
                selectedPriceBannerr.innerHTML = priceBanner.innerHTML;

                // replace add to cart button
                let addToCartBtn = gfb.gfbFrequentBought.f.gfbFrequentBoughtPrepareAddToCart(currentOffer);
                let selectedAddToCartBtn = document.querySelector(`.gfbFrequentBoughtAddToCartButton[data-offer-id=${offerId}]`);
                let classListsFromCreatedButton = addToCartBtn.classList;
                selectedAddToCartBtn.innerHTML = addToCartBtn.innerHTML;
                selectedAddToCartBtn.classList = classListsFromCreatedButton;

                gfb.gfbFrequentBought.f.setInputsForSelectedVariants(currentOffer);

                gfb.gfbFrequentBought.f.gfbFrequentBoughtCheckContainerOverflow();
                gfb.gfbFrequentBought.f.registerEvents();
              }catch(err){
                gfb.utility.debugConsole("error in gfbFrequentBoughtWidgetProductCheckbox => ", err);
              }
            })
          })
        }catch(err){
          gfb.utility.debugConsole("error in eventListenerForGfbFrequentBoughtWidgetProductCheckbox => ", err);
        }
      },
      eventListenerForGfbFrequentBoughtSwatchColorUI: function(){
        try{
          const elements = document.querySelectorAll(".gfbFrequentBoughtSwatchColorUI");
          elements.forEach((element) => {
            element.addEventListener('click', function(event){
                try{
                  event.preventDefault();
                  event.stopPropagation();
                  event.stopImmediatePropagation();
                  gfb.utility.debugConsole("clicked swatch");

                  let colorName = element.getAttribute("data-color-name");
                  let productHandle = element.getAttribute("data-product-handle");
                  let optionIndex = element.getAttribute("data-color-index");
                  let offerId = element.getAttribute("data-offer-id");

                  let currentSelectedOptions = gfb.gfbFrequentBought.state.currentSelectedOptions[offerId];
                  let updatedCurrentOption = JSON.parse(JSON.stringify(currentSelectedOptions[productHandle]));

                  updatedCurrentOption.values[optionIndex] = colorName;
                  gfb.gfbFrequentBought.state.currentSelectedOptions[offerId] = {
                      ...currentSelectedOptions,
                      [productHandle]: updatedCurrentOption,
                  };

                  gfb.gfbFrequentBought.f.gfbFindNewVariantForSelectedOption(event, colorName, offerId, productHandle);

                  let currentOffer = gfb.gfbFrequentBought.state.frequentBoughtDataByOfferId[offerId];
                  gfb.gfbFrequentBought.f.setInputsForSelectedVariants(currentOffer);

                  gfb.gfbFrequentBought.f.gfbFrequentBoughtCheckContainerOverflow();
                  gfb.gfbFrequentBought.f.registerEvents();
                  return true;
                }catch(err){
                  gfb.utility.debugConsole("error in eventListenerForGfbFrequentBoughtSwatchColorUI => ", err);
                }
              })
          })
        }catch(err){
          gfb.utility.debugConsole("error in eventListenerForGfbFrequentBoughtSwatchColorUI => ", err);
        }
      },
      eventListenerForGfbFrequentBoughtLabelPillsUI: function(){
        try{
          const elements = document.querySelectorAll(".gfbFrequentBoughtLabelPillsUI");
          elements.forEach((element) => {
            element.addEventListener("click", function(event){
              try {
                event.preventDefault();
                event.stopPropagation();
                event.stopImmediatePropagation();
    
                let labelName = this.dataset.labelName;
                let productHandle = this.dataset.productHandle;
                let labelIndex = this.dataset.labelIndex;
                let offerId = this.dataset.offerId;
    
                let currentSelectedOptions = gfb.gfbFrequentBought.state.currentSelectedOptions[offerId];
                let updatedCurrentOption = JSON.parse(JSON.stringify(currentSelectedOptions[productHandle]));
    
                // stringify labelName to avoid any prodblem
                if (typeof labelName !== "string") {
                  labelName = String(labelName);
                }
    
                updatedCurrentOption.values[labelIndex] = labelName;
                gfb.gfbFrequentBought.state.currentSelectedOptions[offerId] = {
                  ...currentSelectedOptions,
                  [productHandle]: updatedCurrentOption,
                };
    
                gfb.gfbFrequentBought.f.gfbFindNewVariantForSelectedOption(event, labelName, offerId, productHandle);

                let currentOffer = gfb.gfbFrequentBought.state.frequentBoughtDataByOfferId[offerId];
                gfb.gfbFrequentBought.f.setInputsForSelectedVariants(currentOffer);

                gfb.gfbFrequentBought.f.gfbFrequentBoughtCheckContainerOverflow();
                gfb.gfbFrequentBought.f.registerEvents();
              } catch (error) {
                gfb.utility.debugConsole("error in  -> gfbFrequentBoughtLabelPillsUI", error);
              }
            })
          })

        }catch(err){
          
        }
      },
      eventListenerForGfbFrequentBoughtSingleDropdownSelector: function(){
        try{
          const elements = document.querySelectorAll(".gfbFrequentBoughtSingleDropdownSelector");
          elements.forEach((element) => {
            element.addEventListener("change", function(event){
              try{
                event.preventDefault();
                event.stopPropagation();
                event.stopImmediatePropagation();
    
                gfb.utility.debugConsole("clicked dropdown");
                let labelName = event.target.value;
                let selectElement = event.target;
                let selectedIndex = selectElement.selectedIndex;
                let productHandle = selectElement.options[selectedIndex].dataset.productHandle;
                let labelIndex = selectElement.options[selectedIndex].dataset.labelIndex;
                let offerId = selectElement.options[selectedIndex].dataset.offerId;
                let currentSelectedOptions = gfb.gfbFrequentBought.state.currentSelectedOptions[offerId];
                let updatedCurrentOption = JSON.parse(JSON.stringify(currentSelectedOptions[productHandle]));
    
                updatedCurrentOption.values[labelIndex] = labelName;
                gfb.gfbFrequentBought.state.currentSelectedOptions[offerId] = {
                  ...currentSelectedOptions,
                  [productHandle]: updatedCurrentOption,
                };
    
                gfb.gfbFrequentBought.f.gfbFindNewVariantForSelectedOption(event, labelName, offerId, productHandle);

                let currentOffer = gfb.gfbFrequentBought.state.frequentBoughtDataByOfferId[offerId];
                gfb.gfbFrequentBought.f.setInputsForSelectedVariants(currentOffer);

                gfb.gfbFrequentBought.f.gfbFrequentBoughtCheckContainerOverflow();
                gfb.gfbFrequentBought.f.registerEvents();
              }catch(err){
                gfb.utility.debugConsole("error in  -> gfbFrequentBoughtSingleDropdownSelector", error);
              }
            })
          })
        }catch(err){
          gfb.utility.debugConsole("error in  -> gfbFrequentBoughtSingleDropdownSelector", error);
        }
      },
      eventListenerForGfbFrequentBoughtSingleDropdownSelectorNew: function(){
        try{
          const elements = document.querySelectorAll(".gfbFrequentBoughtSingleDropdownSelectorNew");
          elements.forEach((element) => {
            element.addEventListener("click", function(event){
              try{
                event.preventDefault();
                event.stopPropagation();
                event.stopImmediatePropagation();
                gfb.utility.debugConsole("new dropdown clicked");

                
                

              }catch(err){
                gfb.utility.debugConsole("error in  -> gfbFrequentBoughtSingleDropdownSelectorNew", error);
              }
            })
          })
        }catch(err){
          gfb.utility.debugConsole("error in  -> gfbFrequentBoughtSingleDropdownSelectorNew", error);
        }
      },
      eventListenerForGfbFrequentBoughtQuantityBox: function(){
        try{
          const elements = document.querySelectorAll(".gfbFrequentBoughtQuanityBox");
          elements.forEach((element) => {
            element.addEventListener("change", function(event){
              event.preventDefault();
              event.stopPropagation();
              event.stopImmediatePropagation();
              let offerId;
              let quantity = event.target.value;
              let closestWidgetContainer = event.target.closest(".gfbFrequentBoughtWidgetContentContainer");
              if(closestWidgetContainer){
                offerId = closestWidgetContainer.getAttribute("gfbFrequentBoughtWidgetContentContainer-id");
                let productHandle = event.target.getAttribute("product-page-handle");
                let originalQuantity = gfb.gfbFrequentBought.state.currentSelectedVariants[offerId][productHandle].quantity;
                originalQuantity = parseInt(originalQuantity);        
                gfb.gfbFrequentBought.state.currentSelectedVariants[offerId][productHandle].quantity = quantity;
                
                let totalVariantPriceOriginal = gfb.gfbFrequentBought.state.currentSelectedVariants[offerId][productHandle].originalPrice;
                totalVariantPriceOriginal = parseFloat(totalVariantPriceOriginal);

                let totalVariantPricePerUnit = totalVariantPriceOriginal / originalQuantity;
                totalVariantPricePerUnit = parseFloat(totalVariantPricePerUnit);
                quantity = parseInt(quantity);
                  
                let newTotalVariantPrice = totalVariantPricePerUnit * quantity;

                let strikeThroughPriceOriginal = gfb.gfbFrequentBought.state.currentSelectedVariants[offerId][productHandle].strikeThroughPrice;
                strikeThroughPriceOriginal = parseFloat(strikeThroughPriceOriginal);
                let strikeThroughPricePerUnit = strikeThroughPriceOriginal / originalQuantity;
                strikeThroughPricePerUnit = parseFloat(strikeThroughPricePerUnit);
                let newStrikeThroughPrice = strikeThroughPricePerUnit * quantity;

                gfb.gfbFrequentBought.state.currentSelectedVariants[offerId][productHandle].strikeThroughPrice = newStrikeThroughPrice;
                gfb.gfbFrequentBought.state.currentSelectedVariants[offerId][productHandle].originalPrice = newTotalVariantPrice;
              }
              // reload the UI
              let currentOffer = gfb.gfbFrequentBought.state.frequentBoughtDataByOfferId[offerId];
              let content = gfb.gfbFrequentBought.f.gfbFrequentBoughtPrepareContent(currentOffer);
              let priceBanner = gfb.gfbFrequentBought.f.gfbFrequentBoughtPreparePrice(currentOffer);

              let selectedOfferContainer = document.querySelector(`.gfbFrequentBoughtWidgetContentContainer[gfbfrequentboughtwidgetcontentcontainer-id=${offerId}]`);
              selectedOfferContainer.innerHTML = content.innerHTML;

              let selectedPriceBanner = document.querySelector(`.gfbFrequentBoughtWidgetPriceContainer[gfbFrequentBoughtWidgetPriceContainer-id=${offerId}]`);
              selectedPriceBanner.innerHTML = priceBanner.innerHTML;

              gfb.gfbFrequentBought.f.setInputsForSelectedVariants(currentOffer);
              gfb.gfbFrequentBought.f.gfbFrequentBoughtCheckContainerOverflow();
              gfb.gfbFrequentBought.f.registerEvents();
              gfb.gfbFrequentBought.f.checkIfValidQuantitySelected(offerId);
            });
          })
        }catch(err){
          gfb.utility.debugConsole("error in  -> gfbFrequentBoughtQuantityBox", error);
        }
      },
      gfbFrequentBoughtSetupCheckBoxes: function(){
        try{
          let offersWithSelections = gfb.gfbFrequentBought.state.currentSelectedVariants;
            
          let keys = Object.keys(offersWithSelections);
          keys.forEach(function(key) {
            let selectedVariant = offersWithSelections[key];
            let selectedOptions = gfb.gfbFrequentBought.state.currentSelectedVariants[key];
            let offerEle = document.querySelector(`.gfbFrequentBoughtWidgetOfferContainerBundleRegular[data-offer-id="${key}"]`);
            if(offerEle){
              let productHandleArray = Object.keys(selectedVariant);
              productHandleArray.forEach(function(productHandle){
                  let variantEle = offerEle.querySelector(`.gfbFrequentBoughtWidgetProductCheckbox[data-product-handle="${productHandle}"]`);
                  if(variantEle){
                    variantEle.checked = selectedVariant[productHandle].isSelected;
                  }
              }) 
            }
          });

          keys.forEach(function(key) {
            let selectedVariant = offersWithSelections[key];
            let selectedOptions = gfb.gfbFrequentBought.state.currentSelectedVariants[key];
            let offerEle = document.querySelector(`.gfbFrequentBoughtWidgetOfferContainerBundleUpsell[data-offer-id="${key}"]`);
            if(offerEle){
              let productHandleArray = Object.keys(selectedVariant);
              productHandleArray.forEach(function(productHandle){
                  let variantEle = offerEle.querySelector(`.gfbFrequentBoughtWidgetProductCheckbox[data-product-handle="${productHandle}"]`);
                  if(variantEle){
                    variantEle.checked = selectedVariant[productHandle].isSelected;
                  }
              })
            }
            
          });
        }catch(err){
          gfb.utility.debugConsole("error in gfbFrequentBoughtSetupCheckBoxes => ", err);
        }
      },
      eventListenerForGfbFrequentBoughtCustomFields: function(){
        try{
          const elements = document.querySelectorAll(".gfbFrequentBoughtCustomFieldBox");
          elements.forEach((element) => {
            element.addEventListener("change", function(event){
              event.preventDefault();
              event.stopPropagation();
              event.stopImmediatePropagation();
              let offerId = event.target.getAttribute("data-offer-id");
              let productHandle = event.target.getAttribute("data-product-handle");
              let customField = event.target.value;
              // console.log("Offer Id ->", offerId, "Product Handle ->", productHandle, "Custom Field ->", customField);
              // console.log("customField => ", customField);
              gfb.gfbFrequentBought.state.currentSelectedVariants[offerId][productHandle].customField = customField;
            })
          });
        }catch(err){
          gfb.debugConsole("error in eventListenerForGfbFrequentBoughtCustomFields => ", err);
        }
      },
      gfbFrequentBoughtSetupTextBoxes: function(){
        try{
          let offersWithSelections = gfb.gfbFrequentBought.state.currentSelectedVariants;
          let keys = Object.keys(offersWithSelections);

          keys.forEach(function(key) {
            let selectedVariant = offersWithSelections[key];
            let selectedOptions = gfb.gfbFrequentBought.state.currentSelectedVariants[key];
            let offerEle = document.querySelectorAll(`.gfbFrequentBoughtCustomFieldBox[data-offer-id="${key}"]`);
            if(offerEle){
              let productHandleArray = Object.keys(selectedVariant);
              productHandleArray.forEach(function(productHandle){
                let variantEle = document.querySelector(`.gfbFrequentBoughtCustomFieldBox[data-product-handle="${productHandle}"]`);
                if(variantEle){
                  variantEle.value = selectedVariant[productHandle].customField || "";
                }
              })
            }
          });
        
        }catch(err){
          gfb.utility.debugConsole("error in gfbFrequentBoughtSetupTextBoxes => ", err);
        }
      },
      gfbFrequentBoughtCheckContainerOverflow: function(wrapperElementSelector){
        try{
          let isHorizontalDisplayDesign = gfb.gfbFrequentBought.state.horizontalDisplayDesign;

          let gfbFrequentBoughtWidgetPriceContainer = document.querySelector(".gfbFrequentBoughtWidgetPriceContainer");
          let widthOfPriceBox = gfbFrequentBoughtWidgetPriceContainer.offsetWidth;
          let heightOfPriceBox = gfbFrequentBoughtWidgetPriceContainer.offsetHeight;

          let gfbFrequentBoughtAddToCartButton = document.querySelector(".gfbFrequentBoughtAddToCartButton");
          let widthOfAddToCartButton = gfbFrequentBoughtAddToCartButton.offsetWidth;
          let heightOfAddToCartButton = gfbFrequentBoughtAddToCartButton.offsetHeight;

          if(isHorizontalDisplayDesign){
            gfb.utility.debugConsole("container overflow --");
            let isContainerOverFlow = true;
            let container = document.querySelector(".horizontalDisplayDesign .gfbFrequentBoughtReplacableContent");

            let wrapperSelector = wrapperElementSelector || ".gfbBundleUpsellWrapper";
            let wrapper = document.querySelector(`${wrapperSelector}`);
            if(!wrapper){
              wrapperSelector = ".gfbFrequentBoughtWrapper";
            }

            let content = document.querySelector('.gfbFrequentBoughtReplacableContent');

            let wrapperWidth = wrapper.offsetWidth;
            let contentWidth = content.offsetWidth;
            let contentHeight = content.offsetHeight;
            let expectedMaxContentWidth = contentWidth + Math.max(widthOfPriceBox, widthOfAddToCartButton) + 20;

            if(expectedMaxContentWidth <= wrapperWidth){
              isContainerOverFlow = false;
              let hrBlock = document.querySelector(".gfbFrequentBoughtWidgetRuler");
              hrBlock.style.display = "none";
            }

            // container related styling;
            if(container){
              if(isContainerOverFlow){
                let mainContainer = document.querySelector(".gfbFrequentBoughtWidgetContainer");
                mainContainer.style.width = "auto";
                mainContainer.classList.add("gfbFrequentBoughtWidgetContentContainerOverflow");   
              }
            }

            if(!isContainerOverFlow){
              let sideWidthForHorizontal = Math.max(widthOfPriceBox, widthOfAddToCartButton);
              sideWidthForHorizontal = sideWidthForHorizontal + 20;

              content.style.gridTemplateColumns = `auto ${sideWidthForHorizontal}px`;

              let gfbFrequentBoughtAddToCartButtonSection = document.querySelector(".gfbFrequentBoughtAddToCartButtonSection");
              gfbFrequentBoughtAddToCartButtonSection.style.gridTemplateColumns = `auto ${sideWidthForHorizontal}px`;

              gfbFrequentBoughtAddToCartButton.style.position = "absolute";
              gfbFrequentBoughtAddToCartButton.style.left = `${contentWidth - sideWidthForHorizontal}px`;
              gfbFrequentBoughtAddToCartButton.style.bottom = `${contentHeight - heightOfPriceBox - heightOfAddToCartButton}px`
            }
          }

        }catch(err){
          gfb.utility.debugConsole("error in gfbFrequentBoughtCheckContainerOverflow => ", err);
        }
      },
      checkIfValidQuantitySelected: function(offerId){
        try{
          let offersWithSelections = gfb.gfbFrequentBought.state.currentSelectedVariants[offerId];
          let productsFromOfferMap = gfb.gfbFrequentBought.state.frequentBoughtDataByOfferId[offerId].selectedProducts;
          
          productsFromOfferMap.forEach(product => {
            
            let productHandle = product.handle;
            let productFromSelection = offersWithSelections[productHandle];

            let selectedQuantity = productFromSelection.quantity;
            selectedQuantity = parseInt(selectedQuantity);
            let thresholdQuantity = product.quantity;
            thresholdQuantity = parseInt(thresholdQuantity);

            if(selectedQuantity < thresholdQuantity ){
              let widgetContainer = document.querySelector(`.gfbFrequentBoughtWidgetContentContainer[gfbfrequentboughtwidgetcontentcontainer-id="${offerId}"]`);
              let inputBox = widgetContainer.querySelector(`.gfbFrequentBoughtQuanityBox[product-page-handle="${productHandle}"]`);
              inputBox.value = thresholdQuantity;
              inputBox.dispatchEvent(new Event('change'));
            }
            
          });


        }catch(err){
          gfb.utility.debugConsole("error in checkIfValidQuantitySelected => ", err);
        }
      },
      gfbFrequentBoughtAddTickBoxAnimate: function(){
        try{

          let elements = document.querySelectorAll(".gfbFrequentBoughtWidgetProductAddToCart, .gfbFrequentBoughtWidgetProductAddToCartText, .gfbFrequentBoughtWidgetProductAddToCartTick");
          elements.forEach((element) => {
            element.addEventListener("click", function(event){
              try{
                event.preventDefault();
                event.stopPropagation();
                event.stopImmediatePropagation();
                let clickedElement = event.target;
                clickedElement = clickedElement.closest(".gfbFrequentBoughtWidgetProductAddToCart");
                let productHandle = clickedElement.getAttribute("data-product-handle");
                let offerId = clickedElement.getAttribute("data-offer-id");
                // check if clickedElement classList contains 'clicked'
                // if yes then remove the class
                // else add the class
                if(clickedElement.classList.contains("clicked")){
                  clickedElement.classList.remove("clicked");
                  gfb.gfbFrequentBought.state.currentSelectedVariants[offerId][productHandle].isSelected = false;
                }else{
                  clickedElement.classList.add("clicked");
                  gfb.gfbFrequentBought.state.currentSelectedVariants[offerId][productHandle].isSelected = true;
                }
              }catch(err){
                gfb.utility.debugConsole("error in gfbFrequentBoughtAddTickBoxAnimate => ", err);
              }
            })
          })
        }catch(err){
          gfb.utility.debugConsole("error in gfbFrequentBoughtAddTickBoxAnimate => ", err);
        }
      },
      gfbFrequentBoughtSetupBundlesBundleUpsellHorizontalDesignProductSelectCheckbox: function(){
        try{
           const elements = document.querySelectorAll(".gfbBundlesProductSelectCheckbox");
           elements.forEach((element) => {
            element.addEventListener("click", function(event){
              try {
                event.stopPropagation();
                event.stopImmediatePropagation();
                let clickedElement = event.target;
                let productHandle = clickedElement.getAttribute("data-product-handle");
                let offerId = clickedElement.getAttribute("data-offer-id");
                const isChecked = clickedElement.checked;

                let gfbVariantSelctorPopoverRef = document.querySelector(".gfbVariantSelctorPopover");
                gfbVariantSelctorPopoverRef.style.display = "none";
                gfb.gfbFrequentBought.state.currentSelectedVariants[offerId][productHandle].isSelected = isChecked;
                let selectedProductsCount = Object.values(gfb.gfbFrequentBought.state.currentSelectedVariants[offerId]).filter(p => p.isSelected).length;
                if(selectedProductsCount == 0){
                  gfb.gfbFrequentBought.state.currentSelectedVariants[offerId][productHandle].isSelected = !isChecked;
                  clickedElement.checked = !isChecked;
                  selectedProductsCount = 1;
                }

                const gfbFrequentBoughtWidgetPriceContainerRef = document.querySelector(`.gfbFrequentBoughtWidgetPriceContainer[gfbfrequentboughtwidgetpricecontainer-id="${offerId}"]`);
                const offerData = gfb.gfbFrequentBought.state.frequentBoughtDataByOfferId[offerId];
                let gfbFrequentBoughtWidgetPrice = gfb.gfbFrequentBought.f.gfbFrequentBoughtPreparePrice(offerData);
                gfbFrequentBoughtWidgetPriceContainerRef.replaceWith(gfbFrequentBoughtWidgetPrice);

                const isAnyOneBundleProudctSelected = Object.keys(gfb.gfbFrequentBought.state.currentSelectedVariants[offerId] || {}).some((productHandle) => gfb.gfbFrequentBought.state.currentSelectedVariants[offerId][productHandle].isSelected);
                const selectedProducts = offerData.selectedProducts;
                const checkMadatoryProductsIsOutOfStock = selectedProducts.some(product => product.isMandatory && !product.available);

                const gfbFrequentBoughtWidgetHorizontalUpsellAddToCartRef = document.querySelector(`.gfbFrequentBoughtWidgetHorizontalUpsellAddToCart[data-offer-id="${offerId}"]`);
                
                let addToCartBtnText = offerData?.configuration?.cartBtnName_FBT || "Add to Cart";
                addToCartBtnText = addToCartBtnText.replace("{{SELECTED_PRODUCT}}", selectedProductsCount);
                gfbFrequentBoughtWidgetHorizontalUpsellAddToCartRef.innerText = addToCartBtnText;

                if(!isAnyOneBundleProudctSelected || checkMadatoryProductsIsOutOfStock){
                  gfbFrequentBoughtWidgetHorizontalUpsellAddToCartRef.classList.add("gfbDisableHorizontalUpsellAddToCartBtn");
                }else{
                  gfbFrequentBoughtWidgetHorizontalUpsellAddToCartRef.classList.remove("gfbDisableHorizontalUpsellAddToCartBtn");
                }
              } catch (err) {
                gfb.utility.debugConsole("error in checkbox click handler => ", err);
              }
            })
           })
        }catch(err){
          gfb.utility.debugConsole("error in gfbFrequentBoughtSetupBundlesBundleUpsellHorizontalDesignProductSelectCheckbox => ", err);
        }
      },
      gfbFrequentBoughtWidgetTransitionButton: function(){
        try{

          let nextButtons = document.querySelectorAll(".gfbFrequentBoughtWidgetNextButton", ".gfbFrequentBoughtWidgetNextButtonElement");
          nextButtons.forEach((nextButton) => {
            nextButton.addEventListener("click", function(event){
              try{
                event.preventDefault();
                event.stopPropagation();
                event.stopImmediatePropagation();
                const targetElementRef = event.target;
                const offerId = nextButton.getAttribute("data-offer-id");
                const gfbFrequentBoughtWidgetContentContainerRef = document.querySelector(`[gfbfrequentboughtwidgetcontentcontainer-id="${offerId}"]`);
                const contentContainerRefComputedStyle = window.getComputedStyle(gfbFrequentBoughtWidgetContentContainerRef);
                const flexGapWidth = parseFloat(contentContainerRefComputedStyle.getPropertyValue('gap'));
                
                const firstChildOfContentContainer = gfbFrequentBoughtWidgetContentContainerRef.children[0];
                const secondChildOfContentContainer = gfbFrequentBoughtWidgetContentContainerRef.children[1];

                const scrollLeftWidth = gfbFrequentBoughtWidgetContentContainerRef.scrollLeft;
                const firstChildOffsetWidth = firstChildOfContentContainer.offsetWidth;
                const secondChildOffsetWidth = secondChildOfContentContainer.offsetWidth;

                const totalScrollWidth = firstChildOffsetWidth + flexGapWidth;
                gfbFrequentBoughtWidgetContentContainerRef.scrollLeft += totalScrollWidth;

                let gfbVariantSelctorPopoverRef = document.querySelector(".gfbVariantSelctorPopover");
                gfbVariantSelctorPopoverRef.style.display = "none";
                
                // let clickedElement = event.target;
                // let offerId = clickedElement.getAttribute("data-offer-id");
                // let offer = gfb.gfbFrequentBought.state.frequentBoughtDataByOfferId[offerId];
                // let countOfProducts = offer.selectedProducts.length;
                // let currentPointer = gfb.gfbBundleUpsellHorizontalWidget.state.currentCarouselPointer;

                // if(currentPointer < countOfProducts - 1){
                //   currentPointer = currentPointer + 1;
                //   gfb.gfbBundleUpsellHorizontalWidget.state.currentCarouselPointer = currentPointer;
                // }else{
                //   gfb.gfbBundleUpsellHorizontalWidget.state.currentCarouselPointer = 0;
                // }
                // gfb.gfbBundleUpsellHorizontalWidget.f.prepareContent.refresh(offer)

              }catch(err){
                gfb.utility.debugConsole("error in gfbFrequentBoughtWidgetTransitionButton => ", err);
              }
            })
          })

          let prevButtons = document.querySelectorAll(".gfbFrequentBoughtWidgetPrevButton", ".gfbFrequentBoughtWidgetPrevButtonElement");
          prevButtons.forEach((prevButton) => {
            prevButton.addEventListener("click", function(event){
              try{
                event.preventDefault();
                event.stopPropagation();
                event.stopImmediatePropagation();

                const targetElementRef = event.target;
                const offerId = prevButton.getAttribute("data-offer-id");
                const gfbFrequentBoughtWidgetContentContainerRef = document.querySelector(`[gfbfrequentboughtwidgetcontentcontainer-id="${offerId}"]`);
                const contentContainerRefComputedStyle = window.getComputedStyle(gfbFrequentBoughtWidgetContentContainerRef);
                const flexGapWidth = parseFloat(contentContainerRefComputedStyle.getPropertyValue('gap'));
                
                const firstChildOfContentContainer = gfbFrequentBoughtWidgetContentContainerRef.children[0];
                const secondChildOfContentContainer = gfbFrequentBoughtWidgetContentContainerRef.children[1];
                const scrollLeftWidth = gfbFrequentBoughtWidgetContentContainerRef.scrollLeft;
                const firstChildOffsetWidth = firstChildOfContentContainer.offsetWidth;
                const secondChildOffsetWidth = secondChildOfContentContainer.offsetWidth;

                const totalScrollWidth = firstChildOffsetWidth + flexGapWidth;
                gfbFrequentBoughtWidgetContentContainerRef.scrollLeft -= totalScrollWidth;

                let gfbVariantSelctorPopoverRef = document.querySelector(".gfbVariantSelctorPopover");
                gfbVariantSelctorPopoverRef.style.display = "none";

                // let clickedElement = event.target;
                // let offerId = clickedElement.getAttribute("data-offer-id");
                // let offer = gfb.gfbFrequentBought.state.frequentBoughtDataByOfferId[offerId];
                // let countOfProducts = offer.selectedProducts.length;
                // let currentPointer = gfb.gfbBundleUpsellHorizontalWidget.state.currentCarouselPointer;

                // if(currentPointer > 0){
                //   currentPointer = currentPointer - 1;
                //   gfb.gfbBundleUpsellHorizontalWidget.state.currentCarouselPointer = currentPointer;
                // }else{
                //   gfb.gfbBundleUpsellHorizontalWidget.state.currentCarouselPointer = countOfProducts - 1;
                // }
                // gfb.gfbBundleUpsellHorizontalWidget.f.prepareContent.refresh(offer);

              }catch(err){
                gfb.utility.debugConsole("error in gfbFrequentBoughtWidgetTransitionButton => ", err);
              }
            })
          })



        }catch(err){
          gfb.utility.debugConsole("error in gfbFrequentBoughtWidgetTransitionButton => ", err);
        }
      },
      gfbFrequencyBoughtHorizontalWidgetAddToCartButton: async function(){
        try{

          const elements = document.querySelectorAll(".gfbFrequentBoughtWidgetHorizontalUpsellAddToCart");
          elements.forEach((element) => {
            element.addEventListener("click", async function(event){
              try{
                event.preventDefault();
                event.stopPropagation();
                event.stopImmediatePropagation();
              let gfbVariantSelctorPopoverRef = document.querySelector(".gfbVariantSelctorPopover");
              gfbVariantSelctorPopoverRef.style.display = "none";

              let clickedElement = event.target.closest(".gfbFrequentBoughtWidgetHorizontalUpsellAddToCart");
              let offerId = clickedElement.getAttribute("data-offer-id");
              let redirectToCartEnabled_FBT = gfb.settings.app.redirectToCartEnabled_FBT;
              let redirectToCheckoutEnabled_FBT = gfb.settings.app.redirectToCheckoutEnabled_FBT;
              let isExecuteCustomScriptAfterAddToCartEnabled_FBT = gfb.settings.app.isExecuteCustomScriptAfterAddToCartEnabled_FBT;
              let executeDefaultSideCartUpdate_FBT = gfb.settings.app.executeDefaultSideCartUpdate_FBT;
              let redirectBooleans = {
                  redirectToCartEnabled: redirectToCartEnabled_FBT,
                  redirectToCheckoutEnabled: redirectToCheckoutEnabled_FBT,
                  isExecuteCustomScriptAfterAddToCartEnabled: isExecuteCustomScriptAfterAddToCartEnabled_FBT,
                  executeDefaultSideCartUpdate: executeDefaultSideCartUpdate_FBT
              };
              let redirectionScript = gfb.settings.app.executeCustomScriptAfterAddToCart_FBT;
              let currentSelectedVariantsObj = gfb.gfbFrequentBought.state.currentSelectedVariants[offerId];
              
              let filteredOfferData = gfb.settings.frequentBoughtData.filter(
                  (offer) => offer.offerId === offerId || offer.metafieldData.offerId === offerId
              )[0];
              let cartBtnInProgressName = filteredOfferData.configuration.cartBtnInProgress || "Adding to Cart";
              
              // Change the button text to "Adding to Cart"
              let cartBtnName = clickedElement.innerText;
              clickedElement.innerText = cartBtnInProgressName;
              // Add a "gfbDisabled" class to the button
              clickedElement.classList.add("gfbDisabled");
              
              // Now inside this there will be an array of handles and variant ids
              // Get the variant ids from the array and add them to cart
              let currentSelectedVariants = Object.values(currentSelectedVariantsObj);
              let randomKey = gfb.utility.generateRandomAlphanumeric(3);
              let itemsArray = [];
              
              for (let i = 0; i < currentSelectedVariants.length; i++) {
                  const variantId = currentSelectedVariants[i].id;
                  const qty = parseInt(currentSelectedVariants[i].quantity);
                  isSelected = currentSelectedVariants[i].isSelected;
                  customField = currentSelectedVariants[i].customField;
                  if (isSelected && variantId) {
                      itemsArray.push({
                          id: variantId,
                          quantity: qty,
                          properties: {
                              "_flyBundles:OfferId": `${offerId}_${randomKey}`,
                              "_flyBundles:prodQty": parseInt(qty),
                              "_flyBundles:customField": customField,
                          },
                      });
                  }
              }
              itemsArray = gfb.utility.checkForDuplicateAndModifyItemsArray(itemsArray);
              // itemsArray = gfb.gfbBundleUpsellHorizontalWidget.f.modifyItemsArrayForParentProduct(itemsArray, offerId, randomKey);
              let dataToSend = {
                  items: itemsArray,
                  "section-id": "template--15082866278607__main",
              };
              let checkConditionForCartPassed = gfb.gfbFrequentBought.f.checkConditionForCart(dataToSend, offerId);
              let response;
              if(checkConditionForCartPassed){
                response = await gfb.utility.addToCart(dataToSend);
              }else{
                // popup that mandatory field missing
                // setInterval of 3 second, then rever back to normal
                let popup = document.querySelector(".gfbPopupForMissingSelection");
                popup.style.display = "block";
                setTimeout(() => {
                  popup.style.display = "none";
                }, 3000);

                gfb.utility.debugConsole("falg triggerer");
                response = false;
                clickedElement.classList.remove("gfbDisabled");
                clickedElement.innerText = cartBtnName;
                // close the code
                return;
              }
              gfb.utility.debugConsole("response", response);
            
              if (response) {
                  gfb.state.isCartUpdatedByUs = true;
                  clickedElement.classList.remove("gfbDisabled");
                  clickedElement.innerText = cartBtnName;
              }
              gfb.gfbFrequentBought.f.postAddToCartDecisionApplicator(response, redirectBooleans, redirectionScript);
              }catch(err){

              }
            })

            return true;
          })
        }catch(err){
          gfb.utility.debugConsole("error in gfbFrequencyBoughtHorizontalWidgetAddToCartButton => ", err);
        }
      },
      gfbFrequentBoughtHorizontaWidgetProductVariantSelectorBtn: function(){
        try{
          const gfbFrequentBoughtWidgetProductVariantSelectorBtnRef = document.querySelectorAll(".gfbFrequentBoughtWidgetProductVariantSelectorBtn");
          gfbFrequentBoughtWidgetProductVariantSelectorBtnRef?.forEach((btn) => {
            btn.addEventListener("click", function(event){
              try{
                event.preventDefault();
                event.stopPropagation();
                event.stopImmediatePropagation();
                
                let clickedElement = event.target;
                let offerId = clickedElement.getAttribute("data-offer-id");
                let productHandle = clickedElement.getAttribute("data-product-handle");

                let horizontalDisplayDesignForUpsellRef = document.querySelector(`.horizontalDisplayDesignForUpsell[data-offer-id="${offerId}"]`);
                let gfbVariantSelctorPopoverRef = horizontalDisplayDesignForUpsellRef.querySelector(".gfbVariantSelctorPopover");
                let gfbVariantSelctorPopoverRefArr = document.querySelectorAll(".gfbVariantSelctorPopover");
                gfbVariantSelctorPopoverRefArr.forEach((popover) => {
                  if (popover.style.display === "block" && popover.getAttribute("data-offer-id") !== offerId) {
                    popover.style.display = "none";
                  }
                });

                if(gfbVariantSelctorPopoverRef.style.display === "block"){
                  gfbVariantSelctorPopoverRef.style.display = "none";
                  return;
                }

                let product = gfb.gfbFrequentBought.state.frequentBoughtDataByOfferId[offerId].selectedProducts.filter((product) => product.handle == productHandle)[0];
                let currentSelectedVariantsForOffer = gfb.gfbFrequentBought.state.currentSelectedVariants[offerId];
                let currentSelectedVariantsByOptions = gfb.gfbFrequentBought.state.currentSelectedOptions[offerId];
                let gfbFrequentBoughtWidgetProductContainerRef = document.querySelector(".gfbFrequentBoughtWidgetProductContainer");

                let gfbFrequentBoughtPrepareUIForVariantsArgs = {product , offerId , currentSelectedVariantsForOffer, gfbFrequentBoughtWidgetProductContainerRef , currentSelectedVariantsByOptions};
                let gfbFrequentBoughtWidgetProductVariantSelector = gfb.gfbFrequentBought.f.gfbFrequentBoughtPrepareUIForVariants(gfbFrequentBoughtPrepareUIForVariantsArgs);

                gfbVariantSelctorPopoverRef.innerHTML = "";
                gfbVariantSelctorPopoverRef.appendChild(gfbFrequentBoughtWidgetProductVariantSelector);

                const width = clickedElement.offsetWidth;
                const gfbFrequentBoughtWidgetContainerRef = document.querySelector(`[data-offer-id="${offerId}"]`);
                const clickedElementLeftDistance = clickedElement.getBoundingClientRect().left;
                const clickedElementBottomDistance = clickedElement.getBoundingClientRect().bottom;
                const gfbFrequentBoughtWidgetContainerBottomDistance = gfbFrequentBoughtWidgetContainerRef.getBoundingClientRect().top;
                const topDistance = clickedElementBottomDistance - gfbFrequentBoughtWidgetContainerBottomDistance;
                const gfbFrequentBoughtWidgetContainerLeftDistance = gfbFrequentBoughtWidgetContainerRef.getBoundingClientRect().left;
                const leftDistance = clickedElementLeftDistance - gfbFrequentBoughtWidgetContainerLeftDistance;
                
                gfbVariantSelctorPopoverRef.style.left = `${leftDistance}px`;
                gfbVariantSelctorPopoverRef.style.top = `${topDistance + 4}px`;
                gfbVariantSelctorPopoverRef.style.display = "block";
                gfbVariantSelctorPopoverRef.style.minWidth = `${width}px`;
                gfb.gfbFrequentBought.f.eventListenerForGfbFrequentBoughtSwatchColorUI();
                gfb.gfbFrequentBought.f.eventListenerForGfbFrequentBoughtLabelPillsUI();
                gfb.gfbFrequentBought.f.eventListenerForGfbFrequentBoughtSingleDropdownSelector();
                gfb.gfbFrequentBought.f.eventListenerForGfbFrequentBoughtSingleDropdownSelectorNew();
              }catch(err){
                gfb.utility.debugConsole("error in gfbFrequentBoughtHorizontaWidgetProductVariantSelectorBtn => ", err);
              }
            })
          })

          // Use a single event listener for document clicks
          if (!document.gfbClickListenerAdded) {
            document.addEventListener("click", function(event) {
              try {
                const targetRef = event.target;
                let gfbVariantSelctorPopoverRef = targetRef.closest(".gfbVariantSelctorPopover");
                if (!gfbVariantSelctorPopoverRef) {
                  const popover = document.querySelectorAll(".gfbVariantSelctorPopover");
                  if (popover) popover.forEach((popover) => popover.style.display = "none");
                }
              } catch (err) {
                gfb.utility.debugConsole("error in document click handler => ", err);
              }
            });
            document.gfbClickListenerAdded = true;
          }
        }catch(err){
          gfb.utility.debugConsole("error in gfbFrequentBoughtHorizontaWidgetProductVariantSelectorBtn => ", err);
        }
      },
      registerEvents: function () {
        // Register the event on the document level
        // try{
          gfb.gfbFrequentBought.f.eventListenerForGfbFrequentBoughtAddToCartButton();
        //   gfb.gfbFrequentBought.f.eventListenerForGfbFrequentBoughtDropdown();
          gfb.gfbFrequentBought.f.eventListenerForGfbFrequentBoughtWidgetProductVariantSelector();
          gfb.gfbFrequentBought.f.eventListenerForGfbFrequentBoughtWidgetProductCheckbox();
          gfb.gfbFrequentBought.f.eventListenerForGfbFrequentBoughtSwatchColorUI();
          gfb.gfbFrequentBought.f.eventListenerForGfbFrequentBoughtLabelPillsUI();
          gfb.gfbFrequentBought.f.eventListenerForGfbFrequentBoughtSingleDropdownSelector();
          gfb.gfbFrequentBought.f.eventListenerForGfbFrequentBoughtSingleDropdownSelectorNew();
          gfb.gfbFrequentBought.f.eventListenerForGfbFrequentBoughtQuantityBox();
          gfb.gfbFrequentBought.f.eventListenerForGfbFrequentBoughtCustomFields();
          gfb.gfbFrequentBought.f.gfbFrequentBoughtSetupCheckBoxes();
          gfb.gfbFrequentBought.f.gfbFrequentBoughtSetupTextBoxes();
          gfb.gfbFrequentBought.f.gfbFrequentBoughtSetupBundlesBundleUpsellHorizontalDesignProductSelectCheckbox();
          gfb.gfbFrequentBought.f.gfbFrequentBoughtWidgetTransitionButton();
          gfb.gfbFrequentBought.f.gfbFrequencyBoughtHorizontalWidgetAddToCartButton();
          gfb.gfbFrequentBought.f.gfbFrequentBoughtHorizontaWidgetProductVariantSelectorBtn();
      },
    },
    actions: {},
  },
  gfbVolumeDiscount: {
    state: {
      volumeBundleShopifyData: [],
      currentSelectedTiers: {},
      volumeBundleShopifyDataByVariantIds: [],
      volumeBundleShopifyDataByHandles: [],
      currentSelectedVariantsForTiers: {},
      currentSelectedOptionsForTiers: {},
      currentSelectedProductCount: {},
      optionImageMap: {},
      isCartUpdatedByUs: false,
      tiersToBeOpenedByOfferId: {},
      activeOffer: [],
    },
    init: async function (settings, parent) {
      gfb.utility.debugConsole("benchmark for gfbVolumeDiscount");

      let productPageHandle = gfb.state.productPageHandle;

      if (!productPageHandle) {
        productPageHandle = gfb.f.getProductPageHandle();
        gfb.state.productPageHandle = productPageHandle;
      }
      await gfb.gfbVolumeDiscount.initialize(settings, parent);
      gfb.utility.debugConsole("finally running frequently bought feature");
      gfb.gfbVolumeDiscount.f.registerEvents();
      gfb.gfbVolumeDiscount.f.defaultAutomaticSelection();
      gfb.utility.debugConsole("benchmark for gfbVolumeDiscount");
    },
    initialize: async function (settings, parent) {
      try {
        // let formattedSettings = gfb.gfbVolumeDiscount.f.reformattingSettingsData(settings);
        gfb.gfbVolumeDiscount.f.deriveWidgetDataForVol(settings, parent);
        gfb.utility.debugConsole("benchmark for gfbVolumeDiscount prefetchData");
        await gfb.gfbVolumeDiscount.f.prefetchDataForVol();
        gfb.utility.debugConsole("benchmark for gfbVolumeDiscount prefetchData");
        gfb.gfbVolumeDiscount.f.gfbVariantDisplayAsPerScreen();
        gfb.gfbVolumeDiscount.f.gfbVolumeDiscountCreateOfferDesignObject();
        gfb.gfbVolumeDiscount.f.gfbVolumeDiscountFormatDiscountLabels();
        gfb.gfbVolumeDiscount.f.gfbVolumeDiscountSetInitialProductCount();
        gfb.gfbVolumeDiscount.f.optiomImageMap();
        gfb.gfbVolumeDiscount.f.handleTiersToBeOpened(settings);

        // if the current offer is relevant to the current page then render the UI
        // filterOnlyRelevantProductFromOffer
        let gfbFrequentBoughtWidgetsHTML = gfb.gfbVolumeDiscount.f.prepareWidgets();

        if (parent == "PRODUCT_PAGE") {
          gfb.gfbVolumeDiscount.f.customWrapperPreparationVB(settings);
          gfb.gfbVolumeDiscount.f.insertIntoPageWrapper(gfbFrequentBoughtWidgetsHTML, parent);
          gfb.utility.debugConsole("render on product page");
        }
        
        await gfb.utility.updateBundeViews("VOLUME_BUNDLES");
        gfb.f.addPoweredByBlock();
      } catch (error) {
        gfb.utility.debugConsole("error inside gfbVolumeDiscount initialize", error);
      }
    },
    f: {
      gfbVolumeDiscountSetInitialProductCount: function () {
        try {
        } catch (err) {
          gfb.utility.debugConsole(" error in gfbVolumeDiscountSetInitialProductCount => ", err);
        }
      },
      gfbVariantDisplayAsPerScreen: function(){
        try{
          let settings = JSON.parse(JSON.stringify(gfb.settings));
          let volOffers = settings.volumeDiscountData;
          for(let i=0; i<volOffers.length; i++){
            let isMobileView = gfb.utility.isMobileView();
            let variantDisplayDesign = volOffers[i].variantDisplayDesign;
            let advancedConfig = volOffers[i].advancedConfiguration;
            let isCustomMobileDesignActive = advancedConfig.showVariantDisplayDesign_Mobile || false;
            let selectedProducts = volOffers[i].selectedProducts;
            for (let j = 0; j < selectedProducts.length; j++) {
              let product = selectedProducts[j];
              let options = product.options;
              for (let k = 0; k < options.length; k++) {
                  let currOption = options[k];
                  if(variantDisplayDesign.isManualVariantDesign){
                    if(isMobileView){
                      currOption.selectedDesign = isCustomMobileDesignActive ? currOption.selectedDesign_mobile : currOption.selectedDesign_desktop;
                      variantDisplayDesign.manualVariantDesign = isCustomMobileDesignActive ? variantDisplayDesign.manualVariantDesign_Mobile : variantDisplayDesign.manualVariantDesign_Desktop;
                    }else{
                      currOption.selectedDesign = currOption.selectedDesign_desktop || currOption.selectedDesign;
                      variantDisplayDesign.manualVariantDesign = variantDisplayDesign.manualVariantDesign_Desktop || variantDisplayDesign.manualVariantDesign || variantDisplayDesign.manualVariantDesign_Mobile;
                    }
                  }
              }
            }
          }
          gfb.settings = settings;
        }catch(err){
          gfb.utility.debugConsole("error in gfbVariantDisplayAsPerScreen => ", err);
        }
      },
      gfbVolumeDiscountCreateOfferDesignObject: function () {
        try {
          let volumeOffers = gfb.settings.volumeDiscountData;
          for (let i = 0; i < volumeOffers.length; i++) {
            let offer = volumeOffers[i];
            let selectedProduct = offer?.selectedProduct?.products[0] || offer.selectedProducts[0];
            let variantDisplay = offer.variantDisplayDesign;
            let isAutomatic = variantDisplay.isAutomaticVariantDesign;
            let isManual = variantDisplay.isManualVariantDesign;

            let selectedProductOptions = selectedProduct.options;

            let designObjectArr = [];
            if (isAutomatic) {
              for (let j = 0; j < selectedProductOptions.length; j++) {
                let currSelectedProductOption = selectedProductOptions[j];
                let currOptionName = currSelectedProductOption.name.toLowerCase();
                let optionsValues = currSelectedProductOption.values.filter((value) => value.isSelected);
                let productId = selectedProduct.productId;
                let optionObj = {};
                if (currOptionName == "color") {
                  optionObj.design = "SWATCH";
                  optionObj.name = currOptionName;
                  optionObj.productId = productId;
                  optionObj.values = optionsValues;
                } else if (currSelectedProductOption.values.length < 5) {
                  optionObj.design = "LABEL";
                  optionObj.name = currOptionName;
                  optionObj.productId = productId;
                  optionObj.values = optionsValues;
                } else {
                  optionObj.design = "DROPDOWN";
                  optionObj.name = currOptionName;
                  optionObj.productId = productId;
                  optionObj.values = optionsValues;
                }

                designObjectArr.push(optionObj);
              }
            } else if (isManual) {
              for (let j = 0; j < selectedProductOptions.length; j++) {
                let currSelectedProductOption = selectedProductOptions[j];
                let currOptionName = currSelectedProductOption.name.toLowerCase().trim();
                let currOptionId = currSelectedProductOption.id
                let optionsValues = currSelectedProductOption.values.filter((value) => value.isSelected);
                let variantDesignArray = variantDisplay.manualVariantDesign
                let optionDesign;
                let productId = selectedProduct.productId;
                for (let k = 0; k < variantDesignArray.length; k++) {
                  if (variantDesignArray[k].productId == productId && variantDesignArray[k].optionId == currOptionId) {
                      optionDesign = variantDesignArray[k]?.selectedDesign || "DROPDOWN";
                  }
                }


                let optionObj = {};

                optionObj.design = optionDesign;
                optionObj.name = currOptionName;
                optionObj.productId = productId;
                optionObj.values = optionsValues;

                if(optionObj.design == "SWATCH"){
                  optionObj.customizeSwatchType = currSelectedProductOption?.customizeSwatchType || "IMAGES"
                }

                designObjectArr.push(optionObj);
              }
            }

            offer.designObject = designObjectArr;
          }
        } catch (error) {
          gfb.utility.debugConsole(" error in gfbVolumeDiscountCreateOfferDesignObject => ", err);
        }
      },
      gfbVolumeDiscountAddTemplateSpecificCss: function (currentOffer) {
        try{
          let customCss = currentOffer?.templateDesignCss || "";
          const styleElement = document.createElement("style");
          styleElement.textContent = customCss;
          document.head.appendChild(styleElement);
        }catch(err){
          gfb.utility.debugConsole("error in gfbVolumeDiscountAddTemplateSpecificCss => ", err);
        }
      },
      gfbVolumeDiscountAddOfferSpecificCss: function (currentOffer) {
        try {
          if (currentOffer.customCss) {
            let customCss = currentOffer.customCss;
            const styleElement = document.createElement("style");
            styleElement.textContent = customCss;
            document.head.appendChild(styleElement);
          }
        } catch (err) {
          gfb.utility.debugConsole("error in gfbFrequesntBoughtAddOfferSpecificCSS => ", err);
        }
      },
      reformattingSettingsData: function (reformattingSettingsData) {
        try {
          let dataForWidget = reformattingSettingsData?.volumeDiscountData || [];
          for (let i = 0; i < dataForWidget.length; i++) {
            let offerData = dataForWidget[i];
            if (!offerData.selectedProduct) {
              let temp = offerData.selectedProducts;

              let selectedProduct = {
                products: temp,
                type: "SELECTED_PRODUCTS",
              };
              offerData.selectedProduct = selectedProduct;
            }
          }
          gfb.settings.volumeDiscountData = reformattingSettingsData.volumeDiscountData;
          return reformattingSettingsData;
        } catch (err) {
          gfb.utility.debugConsole("error in reformattingSettingsData => ", err);
        }
      },
      deriveWidgetDataForVol: function (settings, parent) {
        try {

          let productPageHandle = gfb.state.productPageHandle;
          if (!productPageHandle) {
            productPageHandle = gfb.f.getProductPageHandle();
            gfb.state.productPageHandle = productPageHandle;
          }
         
          let dataForWidget = JSON.parse(JSON.stringify(settings?.volumeDiscountData)) || [];
          for (let i = 0; i < dataForWidget.length; i++) {
            let offer = dataForWidget[i];
            let widgetInfo = offer.widgetDisplayOptions;
            let isShowOnComponentPages = widgetInfo?.componentProductPages || false;
            let isShowOnAllPages = widgetInfo?.allProductPages || false;
            let isShowOnSpecificPages = widgetInfo?.specificProductPages || false;
            let isParentProduct = widgetInfo?.parentProduct || false;

            
            let tempProductsArray = [];

            if (isShowOnAllPages) {
              offer.relevantToCurrentPage = true;
            }

            if (isShowOnComponentPages) {
              tempProductsArray=  offer.selectedProducts.filter(product => {
                  // Check if the product's ID is included in currentProductIds
                  if (gfb.state.currentProductData && product.productId == gfb.state.currentProductData.id){
                      return true;
                  } else {
                      return false;
                  }
              });
              widgetInfo.specificProductPages = true;
              offer.widgetDisplayOptions.specificProductPages = true;
              offer.widgetDisplayOptions.specificProducts.push(...tempProductsArray);
            }

            if (widgetInfo.specificProductPages) {
              let specificProducts = widgetInfo.specificProducts;
              for (let j = 0; j < specificProducts.length; j++) {
                let handle = specificProducts[j].handle;
                if (handle == productPageHandle) {
                  offer.relevantToCurrentPage = true;
                }
              }
            }
          }
          gfb.settings.volumeDiscountData = dataForWidget;
        } catch (err) {
          gfb.utility.debugConsole("error in derived settings -> ", err);
        }
      },
      defaultAutomaticSelection: function () {
        try{
          let defaultSelectionDummy = {
            selectedTier: 1,
            selectedOptions: {
                0: {
                  options: ['M', 'red']
                },
                1: {
                  options: ['M', 'red']
                },
                2: {
                  options: ['M', 'red']
                },
                3: {
                  options: ['M', 'red']
                },
            },
            isDefaultSelection: false,
          }
          let deaultSelectionState = gfb.settings.volumeDiscountData[0]?.defaultSelection || defaultSelectionDummy;
          if(deaultSelectionState?.isDefaultSelection){
            let selectedTier = deaultSelectionState?.selectedTier;
            let tierCount = selectedTier - 1;

            let label = document.querySelectorAll('.gfbVolumeDiscountLabelContainer');
            let selectedLabel = label[tierCount];

            if(selectedLabel){
              selectedLabel.click();
            }
          }

        }catch(err){
          gfb.utility.debugConsole("error in defaultAutomaticSelection => ", err);
        }
      },
      handleTiersToBeOpened: function(settings){
        try{
          const tiersToBeOpenedByOfferId = gfb.gfbVolumeDiscount.state.tiersToBeOpenedByOfferId;
          
          const volumeDiscountData = settings.volumeDiscountData;
          for(const volOffer of volumeDiscountData){
            const offerId = volOffer.offerId;
            const rules = volOffer.rules;
            const tiersToBeOpenedArray = new Array(rules.length).fill(false);
            const featureTag = volOffer.featureTag;
            const selectedTierText = featureTag.selectedTierText;

            for(let i=0; i<selectedTierText.length; i++){
              const currTierText = selectedTierText[i];
              if(currTierText){
                tiersToBeOpenedArray[i] = true;
                break;
              }
            }
            if(!tiersToBeOpenedByOfferId[offerId]){
              tiersToBeOpenedByOfferId[offerId] = { tiersToBeOpened : tiersToBeOpenedArray };
            }
          }

          gfb.gfbVolumeDiscount.state.tiersToBeOpenedByOfferId = tiersToBeOpenedByOfferId;
        }catch(err){
          gfb.utility.debugConsole("error in handleTiersToBeOpened => ", err);
        }
      },
      optiomImageMap: function () {
        try {
          let products = gfb.gfbVolumeDiscount.state.volumeBundleShopifyData;
          let optiomImageMapByOffer = {};
          let imageArray = [];
          for(let i=0; i<products.length; i++){
            let productData = products[i];
            let variantsData = productData.variants;
  
            if (variantsData) {
              for (let i = 0; i < variantsData.length; i++) {
                let variant = variantsData[i];
                let public_title = variant.options.join("/");
                let imageLink = variant.image || variant.featured_image?.src || productData.featured_image;
                let isAvailable = variant.available;
                optiomImageMapByOffer = { ...optiomImageMapByOffer, [public_title]: { imageLink, isAvailable } };
                imageArray.push(imageLink);
              }
            }
          }

          gfb.utility.preLoadImages(imageArray);
          gfb.gfbVolumeDiscount.state.optionImageMap = optiomImageMapByOffer;
        } catch (error) {
          gfb.utility.debugConsole(" error in optiomImageMap => ", error);
        }
      },
      customWrapperPreparationVB: function (settings) {
        try{

          let volumeDiscountData = settings.volumeDiscountData;
          for(let i=0; i<volumeDiscountData.length; i++){
            let currentOffer = volumeDiscountData[i];
            let advancedConfig = currentOffer.advancedConfiguration;
            let offerType = currentOffer.type;
            let isMobileView = gfb.utility.isMobileView();
            let isCustomSelectorActive = false;
            let customSelector;
            let customSelectorRelativePostion;

            if(!advancedConfig.offerLevelSelectorEnabled){
              continue;
            }

            if(isMobileView){
              let offerLevelSelector = advancedConfig?.offerLevelSelector_Mobile || {};
              customSelector = offerLevelSelector?.selector || "";
              customSelectorRelativePostion = offerLevelSelector?.position || "";
  
              if(customSelector != "" || customSelectorRelativePostion != ""){
                isCustomSelectorActive = true;
              }
            }else{
              let offerLevelSelector = advancedConfig?.offerLevelSelector_Desktop || {};
              customSelector = offerLevelSelector?.selector || "";
              customSelectorRelativePostion = offerLevelSelector?.position || "";
              
              if(customSelector != "" || customSelectorRelativePostion != ""){
                isCustomSelectorActive = true;
              }
            }

            if(isCustomSelectorActive){
                gfb.productPage.f.removeVolumeDiscountWrapperFromPage();
                gfb.productPage.f.insertCustomVolumeDiscountWrapperIntoPage(customSelector, customSelectorRelativePostion);
            }

          }

        }catch(err){
          gfb.utility.debugConsole("error in customWrapperPreparationVB => ", err);
        }
      },
      insertIntoPageWrapper: function (gfbMsgHtml, parent) {
        try {
          if (parent == "PRODUCT_PAGE") {

            const gfbVolumeBundleWrapperProductEle = document.querySelectorAll(".gfbVolumeBundleWrapper");

            const gfbVolumeBundleWrapperProductEleClone = gfbMsgHtml.cloneNode(true);
            
            gfbVolumeBundleWrapperProductEle.forEach(function(element) {
                element.innerHTML = gfbVolumeBundleWrapperProductEleClone.outerHTML;

                let tierSelectedElement = element.querySelector('.gfbTierSelected');

                // Find the radio button within the selected element
                if(tierSelectedElement){
                  let radioButton = tierSelectedElement.querySelector('input[type="radio"]');

                  // Turn on the radio button
                  if (radioButton) {
                      radioButton.checked = true;
                  }
                }

            });
            

          } else if (parent == "CART_PAGE") {
            // currently not doing anything on cart page for frequently bought
          }
        } catch (error) {
          gfb.utility.debugConsole(error);
        }
      },
      prepareWidgets: function () {
        try {
          let htmlContentDivs = [];
          let gfbWidgets = document.createElement("div");
          gfbWidgets.classList.add("gfbWidgets");
          let offers = gfb.settings.volumeDiscountData.length > 0 ? gfb.settings.volumeDiscountData : [];
          for (let i = 0; i < offers.length; i++) {
            // for each offer we need to create saperte widget
            // parent function to create an offer widget, then that having subsequennt sections for title, each poduct, add to cart buttons

            let offer = offers[i];

            if (!offer.isActive) {
              continue;
            }

            let isOfferRelevantToCurrentPage = offer.relevantToCurrentPage;
            if (isOfferRelevantToCurrentPage) {
              let offerId = offer.offerId;
              gfb.gfbVolumeDiscount.state.activeOffer.push(offerId);
              htmlContentDivs.push(gfb.gfbVolumeDiscount.f.gfbVolumeDiscountPrepareUI(offer));
            }
          }
          htmlContentDivs.forEach(function(element) {
            gfbWidgets.appendChild(element);
          });
          return gfbWidgets;
        } catch (err) {
          gfb.utility.debugConsole(err);
        }
      },
      initializingVariantSelectionState: function () {
        try {
          let dummy_DefaultSelectedData = {
            selectedTier: 1,
            selectedOptions: {
                0: {
                  options: ['M', 'red']
                },
                1: {
                  options: ['M', 'red']
                },
                2: {
                  options: ['M', 'red']
                },
                3: {
                  options: ['M', 'red']
                },
            },
            isDefaultSelection: false,
          }
          let currVariantSelectors = {};
          let currOfferSelectors = {};
          let currProductSelectedCount = {};
          let volumeOffers = gfb.settings.volumeDiscountData;
          for (let i = 0; i < volumeOffers.length; i++) {
            let offer = volumeOffers[i];
            let offerId = offer.offerId;
            let offerSelectorsForVariants = {};
            let offerSelectorsForOptions = {};
            let offerSelectorsForProductCount = {};
            let defaultSelectionData = offer?.defaultSelection || dummy_DefaultSelectedData
            for (let j = 0; j < offer.rules.length; j++) {
              let rule = offer.rules[j];
              let tierCount = j + 1;
              let conditionValue = parseInt(rule.conditionValue);
              let discountValue = parseInt(rule.discountValue);
              let tierConditionsForVariants = {};
              let tierConditionsForOffers = {};

              for (let k = 0; k < conditionValue; k++) {
                let productHandle = offer.selectedProducts[0].handle;
                let prodData = gfb.gfbVolumeDiscount.state.volumeBundleShopifyDataByHandles[productHandle];
                if(prodData){
                  let variants = prodData.variants;
                  let isVariantAvailable = false;
                  for (let l = 0; l < variants.length; l++) {
                    let variant = variants[l];
                    if (variant.available) {
                      let availableVariantId = variant.id;
                      let optionsArr = variant.options;
                      let variantPerIndex = {
                        variantId: availableVariantId,
                        price: parseFloat(variant.price) / 100,
                        strikeThroughPrice : parseFloat(variant.strikeThroughPrice),
                        discountValue,
                        qty: 1,
                      };
  
                      let optionPerIndex = {
                        options: [...optionsArr],
                      };
                      tierConditionsForOffers[k] = optionPerIndex;
                      tierConditionsForVariants[k] = variantPerIndex;
                      isVariantAvailable = true;
                      break;
                    }
                  }
  
                  if (!isVariantAvailable) {
                    let variant = gfb.gfbVolumeDiscount.state.volumeBundleShopifyDataByHandles[productHandle].variants[0];
                    let availableVariantId = variant.id;
                    let optionsArr = variant.options;
                    let variantPerIndex = {
                      variantId: availableVariantId,
                      price: parseFloat(variant.price) / 100,
                      discountValue,
                      qty: 1,
                    };
  
                    let optionPerIndex = {
                      options: [...optionsArr],
                    };
                    tierConditionsForOffers[k] = optionPerIndex;
                    tierConditionsForVariants[k] = variantPerIndex;
                    isVariantAvailable = true;
                  }
                }
              }
              let tierName = `tier-${tierCount}`;
              offerSelectorsForVariants[tierName] = tierConditionsForVariants;
              offerSelectorsForOptions[tierName] = tierConditionsForOffers;
              offerSelectorsForProductCount[tierName] = 0;
            }

            currVariantSelectors[offerId] = offerSelectorsForVariants;
            currOfferSelectors[offerId] = offerSelectorsForOptions;
            currProductSelectedCount[offerId] = offerSelectorsForProductCount;
            if(defaultSelectionData.isDefaultSelection){
              let selectedTier = defaultSelectionData.selectedTier;
              currOfferSelectors[offerId][`tier-${selectedTier}`] = defaultSelectionData.selectedOptions;
            }
          }

          gfb.gfbVolumeDiscount.state.currentSelectedVariantsForTiers = currVariantSelectors;
          gfb.gfbVolumeDiscount.state.currentSelectedOptionsForTiers = currOfferSelectors;
          gfb.gfbVolumeDiscount.state.currentSelectedProductCount = currProductSelectedCount;
        } catch (error) {
          gfb.utility.debugConsole(" error in initializingVariantSeletionState -> ", error);
        }
      },
      prefetchDataForVol: async function () {
        try {
          if (gfb.gfbVolumeDiscount.state.volumeBundleShopifyData.length > 0) {
            return;
          }
          gfb.utility.debugConsole("prefetching data for gfbVolumeDiscount");
          let productHandleArray = [];
          let volSettings = gfb.settings.volumeDiscountData;
          for (let i = 0; i < volSettings.length; i++) {
            let offer = volSettings[i];
            let product = offer.selectedProducts[0];

            // only push handle if offer is active

            productHandleArray.push(product.handle);
            // let productData = await gfb.utility.getProductDataV2(productId);
            // gfb.gfbVolumeDiscount.state.volumeBundleShopifyData.push(productData);
          }

          // get current page handle
          const promises = productHandleArray.map(async (handle, index) => {
            const productData = gfb.utility.getProductDataV2(handle);
            return productData;
          });

          // removing out of stock product
          // let productData = gfb.gfbVolumeDiscount.f.gfbVolumeDiscountFilterForVariants(productData);
          let productDataArray = await Promise.all(promises);

          
          // remove values with false
          productDataArray = productDataArray.filter((productData) => productData);

          productDataArray.forEach((productData, index) => {
            productData = gfb.gfbVolumeDiscount.f.gfbVolumeDiscountFilterForVariants(productData);
            if(productData && productData.available){
              productData = gfb.gfbVolumeDiscount.f.gfbVolumeDiscountUpdateProductVariantData(productData);
              productData = gfb.gfbVolumeDiscount.f.gfbVolumeDiscountFilterUnselectedVariants(productData);
              gfb.gfbVolumeDiscount.state.volumeBundleShopifyData.push(productData);
              productDataArray[index] = productData;
            }
          })

          // remove values with false
          productDataArray = productDataArray.filter((productData) => productData);

          if(productDataArray && productDataArray.length > 0){
            let productDataByHandle = gfb.utility.convertArrayToObject(productDataArray, "handle");
            let productDataByVariantIds = gfb.utility.createMapForVariantId(productDataByHandle);
            gfb.gfbVolumeDiscount.state.volumeBundleShopifyDataByHandles = productDataByHandle;
            gfb.gfbVolumeDiscount.state.volumeBundleShopifyDataByVariantIds = productDataByVariantIds;
            gfb.gfbVolumeDiscount.f.initializingVariantSelectionState();
          }
        } catch (error) {
          gfb.utility.debugConsole("error from prefetchDataForVol gfbVoumeBundle -> ", error);
        }
      },
      gfbVolumeDiscountFilterUnselectedVariants: function (productData) {
        try{
          let _productData = JSON.parse(JSON.stringify(productData));
          let variantsData = _productData.variants;
          let filteredOffer = gfb.settings.volumeDiscountData.filter(
            (currOffer) => currOffer.selectedProducts[0].productId == productData.id
          )[0];
          if(filteredOffer){
            let selectedProducts = filteredOffer.selectedProducts;
            selectedProducts.forEach((selectedProduct) => {

              let vairants = selectedProduct.variants;
              let newVariants = [];
              // search for variant variantsData[i].id is same as a data in variants[j].variantId
              for (let i = 0; i < variantsData.length; i++) {
                let variantData = variantsData[i];
                let isAvailable = true;
                for (let j = 0; j < vairants.length; j++) {
                  let variant = vairants[j];
                  if (variant.variantId == variantData.id) {
                    if(variant.isSelected == true){
                      newVariants.push(variantData)
                      gfb.utility.debugConsole('var found -->');
                    }
                    break;
                  }
                }
              }
              _productData.variants = newVariants;
            });

            return _productData;
          }
        }catch(err){
          gfb.utility.debugConsole("error in gfbVolumeDiscountFilterUnselectedVariants => ", err);
        }
      },
      gfbVolumeDiscountUpdateProductVariantData: function (productData) {
        try {
          let _productData = JSON.parse(JSON.stringify(productData));
          let filteredOffer = gfb.settings.volumeDiscountData.filter(
            (currOffer) => currOffer.selectedProducts[0].productId == productData.id
          )[0];
          if(filteredOffer){
            let qty = filteredOffer.selectedProducts[0].quantity;
            let productDataVariants = _productData.variants;
            for (let i = 0; i < productDataVariants.length; i++) {
              let variantData = productDataVariants[i];
              let price = qty * (variantData.price / 100);
              let strikeThroughPrice;
              if (variantData.compare_at_price) {
                strikeThroughPrice = qty * (variantData.compare_at_price / 100);
              } else {
                strikeThroughPrice = qty * (variantData.price / 100);
              }
              variantData.totalVariantPrice = price.toFixed(2);
              variantData.strikeThroughPrice = strikeThroughPrice.toFixed(2);
            }

            return _productData;
          }
        } catch (error) {
          gfb.utility.debugConsole("error from  gfbVolumeDiscountUpdateProductVariantData -> ", error);
        }
      },
      gfbVolumeDiscountFormatDiscountLabels: function () {
        try {
          let offers = gfb.settings.volumeDiscountData;
          for (let i = 0; i < offers.length; i++) {
            let offer = offers[i];

            let tiersConfiguration = gfb.settings.volumeDiscountData[i].configuration.tiers;
            let rules = gfb.settings.volumeDiscountData[i].rules;
            let discountType = offer.discountType;
            let currencySymbol = gfb.utility.getCurrencySymbol();
            for (let j = 0; j < tiersConfiguration.length; j++) {
              let tier = tiersConfiguration[j];
              let rule = rules[j];

              // Replace {{CONDITION}} with conditionValue
              tier.label = tier.label.replace("{{CONDITION}}", rule.conditionValue);
              // You can also replace {{DISCOUNT}} if needed
              if(discountType == "FIXED_AMOUNT_OFF"){
                let newPrice = gfb.utility.convertFromStoreCurrencyToCustomer(rule.discountValue);
                tier.label = tier.label.replace("{{DISCOUNT}}",currencySymbol + newPrice);
              }else{
                tier.label = tier.label.replace("{{DISCOUNT}}", rule.discountValue + "%");
              }
              // You can also replace {{CURRENCY}} if needed
              // tier.label = tier.label.replace("{{CURRENCY}}", rule.discountValue + currencySymbol);              

            }
            gfb.settings.volumeDiscountData[i].configuration.tiers = tiersConfiguration;
          }
        } catch (error) {
          gfb.utility.debugConsole("error in gfbVolumeDiscountFormatDiscountLabels ", error);
        }
      },
      gfbVolumeDiscountFilterForVariants: function (productData) {
        try {
          let originalData = JSON.parse(JSON.stringify(productData));
          if (originalData.available == false) {
            return (originalData = {variants : []});
          }
          let variants = originalData.variants;
          let verifiedVariants = [];
          for (let i = 0; i < variants.length; i++) {
            let currVariant = variants[i];
            if (currVariant.available == true) {
              verifiedVariants.push(currVariant);
            }
          }
          originalData.variants = verifiedVariants;

          return originalData;
        } catch (error) {
          gfb.utility.debugConsole("error in variant filter gfbVolumeDiscount ", error);
        }
      },
      gfbVolumeDiscountPrepareUI: function (currentOffer) {
        try {
          let configs = currentOffer.configuration;
          let colorConfigs = configs.colors;
          let gfbVolumeDiscountWidgetWrapper = document.createElement("div");
          gfbVolumeDiscountWidgetWrapper.classList.add("gfbVolumeDiscountWidgetWrapper");
          gfbVolumeDiscountWidgetWrapper.setAttribute("data-offer-id", currentOffer.offerId);

          let productHandle = currentOffer.selectedProducts[0].handle;
          let productData = gfb.gfbVolumeDiscount.state.volumeBundleShopifyDataByHandles[productHandle];
          if(!productData.available){
            return gfbVolumeDiscountWidgetWrapper;
            // gfbVolumeDiscountWidgetWrapper.style.display = "none";
          }


          let gfbVolumeDiscountWidgetOfferContainer = document.createElement("div");
          gfbVolumeDiscountWidgetOfferContainer.classList.add("gfbVolumeDiscountWidgetOfferContainer");
          gfbVolumeDiscountWidgetOfferContainer.setAttribute("data-offer-id", currentOffer.offerId);
          gfbVolumeDiscountWidgetOfferContainer.style.borderColor = colorConfigs.border;

          let gfbVolumeDiscountWidgetOfferTitleContainer = document.createElement("div");
          gfbVolumeDiscountWidgetOfferTitleContainer.classList.add("gfbVolumeDiscountWidgetOfferTitleContainer");

          let gfbVolumeDiscountWidgetOfferTitle = document.createElement("div");
          gfbVolumeDiscountWidgetOfferTitle.classList.add("gfbVolumeDiscountWidgetOfferTitle");
          let gfbVolumeDiscountWidgetOfferSubTitle = document.createElement("div");
          gfbVolumeDiscountWidgetOfferSubTitle.classList.add("gfbVolumeDiscountWidgetOfferSubTitle");

          // Set HTML content
          gfbVolumeDiscountWidgetOfferTitle.innerHTML = currentOffer.title;
          gfbVolumeDiscountWidgetOfferSubTitle.innerHTML = currentOffer.subTitle;
          gfbVolumeDiscountWidgetOfferTitle.style.color = colorConfigs.text;
          gfbVolumeDiscountWidgetOfferTitleContainer.appendChild(gfbVolumeDiscountWidgetOfferTitle);
          gfbVolumeDiscountWidgetOfferTitleContainer.appendChild(gfbVolumeDiscountWidgetOfferSubTitle);
          gfbVolumeDiscountWidgetOfferContainer.appendChild(gfbVolumeDiscountWidgetOfferTitleContainer);

          // discount tiers
          let discountTiers = currentOffer.rules;
          for (let i = 0; i < discountTiers.length; i++) {
            let tier = discountTiers[i];
            let qtyLabel = tier.conditionValue;
            let qtyCount = parseInt(qtyLabel);
            let tierCount = i + 1;
            let featureTagConfiguration = currentOffer.featureTag;
            let gfbVolumeDiscountPrepareDiscountTiersUIArgs = {
              currentOffer,
              ruleIndex: i,
              tier,
              qtyLabel,
              qtyCount,
              tierCount,
            };
            let gfbVolumeDiscountGeneratedDiscountTiersUI = gfb.gfbVolumeDiscount.f.gfbVolumeDiscountPrepareDiscountTiersUI(
              gfbVolumeDiscountPrepareDiscountTiersUIArgs
            );


            gfbVolumeDiscountWidgetOfferContainer.append(gfbVolumeDiscountGeneratedDiscountTiersUI);

            let tierSelectedElement = gfbVolumeDiscountWidgetOfferContainer.querySelector('.gfbTierSelected');

            // Find the radio button within the selected element
            // if(tierSelectedElement){
            //   let radioButton = tierSelectedElement.querySelector('input[type="radio"]');

            //   // Turn on the radio button
            //   if (radioButton) {
            //       radioButton.checked = true;
            //   }
            // }

          }

          // note section
          let gfbVolDiscountNoteContainer = document.createElement("div");
          gfbVolDiscountNoteContainer.classList.add("gfbVolDiscountNoteContainer");
          
          // Header for notes section
          let gfbVolDiscountNoteHeaderContainer = document.createElement("div");
          gfbVolDiscountNoteHeaderContainer.classList.add("gfbVolDiscountNoteHeaderContainer");
          let notesHeaderText = "Note to Customers :-";
          let gfbVolDiscountNoteHeaderText = document.createElement("div");
          gfbVolDiscountNoteHeaderText.classList.add("gfbVolDiscountNoteHeaderText");
          gfbVolDiscountNoteHeaderText.innerHTML = notesHeaderText;
          gfbVolDiscountNoteHeaderContainer.append(gfbVolDiscountNoteHeaderText);
          
          let gfbVolDiscountNoteContentContainer = document.createElement("div");
          gfbVolDiscountNoteContentContainer.classList.add("gfbVolDiscountNoteContentContainer");
          let notes = configs.note;
          let gfbVolDiscountNoteContentText = document.createElement("div");
          gfbVolDiscountNoteContentText.classList.add("gfbVolDiscountNoteContentText");
          gfbVolDiscountNoteContentText.innerHTML = notes;
          gfbVolDiscountNoteContentContainer.append(gfbVolDiscountNoteContentText);

          if (notes.length > 1) {
            gfbVolDiscountNoteContainer.append(gfbVolDiscountNoteHeaderContainer);
            gfbVolDiscountNoteContainer.append(gfbVolDiscountNoteContentContainer);
          }

          // add to cart
          let configuration = currentOffer.configuration;
          let cartBtnName = configuration.cartBtnName_VOLB || "Add to Cart";
          // Create elements
          let gfbVolumeDiscountWidgetOfferAddToCartContainer = document.createElement("div");
          gfbVolumeDiscountWidgetOfferAddToCartContainer.classList.add("gfbVolumeDiscountWidgetOfferAddToCartContainer");

          let gfbVolumeDiscountWidgetOfferAddToCartButton = document.createElement("div");
          gfbVolumeDiscountWidgetOfferAddToCartButton.classList.add("gfbVolumeDiscountWidgetOfferAddToCartButton");
          gfbVolumeDiscountWidgetOfferAddToCartButton.innerHTML = cartBtnName;

          // Set CSS styles
          let addToCartBtnBGColor = configuration.cartBtnBgColor || "#000000";
          let addToCartBtnTextColor = configuration.cartBtnTextColor || "#FFFFFF";
          gfbVolumeDiscountWidgetOfferAddToCartButton.style.color = addToCartBtnTextColor;
          gfbVolumeDiscountWidgetOfferAddToCartButton.style.backgroundColor = addToCartBtnBGColor;

          // Set attributes
          gfbVolumeDiscountWidgetOfferAddToCartButton.setAttribute("data-offer-id", currentOffer.offerId);
          
          // Append elements
          gfbVolumeDiscountWidgetOfferAddToCartContainer.append(gfbVolumeDiscountWidgetOfferAddToCartButton);

          
          // popup for conditions failing;
          let gfbVolumeDiscountWidgetOfferAddToCartPopupContainer = document.createElement("div");
          gfbVolumeDiscountWidgetOfferAddToCartPopupContainer.classList.add("gfbVolumeDiscountWidgetOfferAddToCartPopupContainer");
          gfbVolumeDiscountWidgetOfferAddToCartPopupContainer.setAttribute("data-offer-id", currentOffer.offerId);

          let gfbVolumeDiscountWidgetOfferAddToCartPopup = document.createElement("div");
          gfbVolumeDiscountWidgetOfferAddToCartPopup.classList.add("gfbVolumeDiscountWidgetOfferAddToCartPopup");
          gfbVolumeDiscountWidgetOfferAddToCartPopup.setAttribute("data-offer-id", currentOffer.offerId);
          gfbVolumeDiscountWidgetOfferAddToCartPopup.innerHTML = "Please fill the mandatory fileds";
          gfbVolumeDiscountWidgetOfferAddToCartPopupContainer.append(gfbVolumeDiscountWidgetOfferAddToCartPopup);

          gfbVolumeDiscountWidgetOfferContainer.append(gfbVolDiscountNoteContainer);

          gfbVolumeDiscountWidgetOfferContainer.append(gfbVolumeDiscountWidgetOfferAddToCartContainer);
          gfbVolumeDiscountWidgetOfferContainer.append(gfbVolumeDiscountWidgetOfferAddToCartPopupContainer);

          gfbVolumeDiscountWidgetWrapper.append(gfbVolumeDiscountWidgetOfferContainer);

          // appending css offer specific here
          gfb.gfbVolumeDiscount.f.gfbVolumeDiscountAddTemplateSpecificCss(currentOffer);
          gfb.gfbVolumeDiscount.f.gfbVolumeDiscountAddOfferSpecificCss(currentOffer);

          return gfbVolumeDiscountWidgetWrapper;
        } catch (error) {
          gfb.utility.debugConsole("error in gfbVolumeDiscountPrepareUI -> ", error);
        }
      },
      gfbVolumeDiscountPrepareDiscountTiersUI: function (args) {
        try {
          const { currentOffer, ruleIndex, tier, qtyLabel, qtyCount, tierCount } = args;

          let configs = currentOffer.configuration;
          let colorConfigs = configs.colors;
          let featureTagConfiguration = currentOffer.featureTag;
          let advancedConfiguration = currentOffer.advancedConfiguration;
          let selectedTier = -1;
          let keepTierClosed = false;
          let tiersToBeOpenedByOfferId = gfb.gfbVolumeDiscount.state.tiersToBeOpenedByOfferId[currentOffer.offerId]["tiersToBeOpened"];
          if(tiersToBeOpenedByOfferId[ruleIndex]){
            keepTierClosed = advancedConfiguration?.keepTierClosed || false;
            selectedTier = ruleIndex + 1;
          }
          // productPageHandle
          // productpageHandle should come from args;
          let productPageHandle = currentOffer.selectedProducts[0].handle;

          // discount tiers
          let discountTiers = currentOffer.rules;
          let discountType = currentOffer.discountType;

          // text configuration
          let configuration = currentOffer?.configuration || {};

          if (discountType == "PERCENTAGE") {
            priceLabel = tier.discountValue + "% OFF";
          }

          let discountTierContainer = document.createElement("div");
          discountTierContainer.classList.add(`gfbVolumeDiscountWidgetOfferDiscountTierContainer`, `gfbVolumeDiscountWidgetOfferDiscountTierContainerByOffer-${currentOffer.offerId}`);
          discountTierContainer.setAttribute("tier-count", ruleIndex + 1);
          discountTierContainer.style.backgroundColor = colorConfigs.background;
          discountTierContainer.style.color = colorConfigs.text;

          let radioSelectionDiv = document.createElement("div");
          radioSelectionDiv.classList.add("gfbVolumeDiscountWidgetOfferDiscountTierRadioSelection");
          radioSelectionDiv.setAttribute("tier-count", ruleIndex + 1);

          let radioButton = document.createElement("input");
          radioButton.classList.add("gfbVolumeDiscountWidgetOfferDiscountTierRadio");
          radioButton.setAttribute("type", "radio");
          radioButton.setAttribute("name", `gfbVolumeDiscountWidgetOfferDiscountTierRadio-${currentOffer.offerId}`);
          radioButton.setAttribute("tier-count", ruleIndex + 1);
          radioButton.value = qtyLabel;

          let gfbVolumeDiscountRadioLabelWrapper = document.createElement("div");
          gfbVolumeDiscountRadioLabelWrapper.classList.add("gfbVolumeDiscountRadioLabelWrapper");

          let gfbRadioSelectionDiv = document.createElement("div");
          gfbRadioSelectionDiv.classList.add("gfbRadioSelectionDiv");
          gfbRadioSelectionDiv.innerHTML = "";

          radioSelectionDiv.append(radioButton);
          radioSelectionDiv.append(gfbRadioSelectionDiv);


          let gfbVolumeDiscountLabelText = document.createElement("div");
          gfbVolumeDiscountLabelText.classList.add("gfbVolumeDiscountLabelText");
          let labelText = configuration.tiers[ruleIndex].label;
          
          gfbVolumeDiscountLabelText.innerHTML = labelText;

          let gfbVolumeDiscountGeneratedPriceUI = gfb.gfbVolumeDiscount.f.gfbVolumeDiscountPrepareTierPrice(currentOffer, tierCount);

          let gfbVolumeDiscountLabelContainerUI = document.createElement("div");
          gfbVolumeDiscountLabelContainerUI.classList.add("gfbVolumeDiscountLabelContainer");
          gfbVolumeDiscountLabelContainerUI.setAttribute("data-tier-count", ruleIndex + 1);
          gfbVolumeDiscountLabelContainerUI.setAttribute("data-offer-id", currentOffer.offerId);

          let selectedTemplateDesignId = currentOffer?.selectedTemplateDesignId || null;

          gfbVolumeDiscountRadioLabelWrapper.append(radioSelectionDiv);

          gfbVolumeDiscountRadioLabelWrapper.append(gfbVolumeDiscountLabelText);
          gfbVolumeDiscountLabelContainerUI.append(gfbVolumeDiscountRadioLabelWrapper);
          gfbVolumeDiscountLabelContainerUI.append(gfbVolumeDiscountGeneratedPriceUI);

          discountTierContainer.append(gfbVolumeDiscountLabelContainerUI);

          // variant selection
          let variants = gfb.gfbVolumeDiscount.state.volumeBundleShopifyDataByHandles[productPageHandle].variants;

          let gfbVolumeDiscountVariantSelectionContainerBox =
            variants.length > 1
              ? gfb.gfbVolumeDiscount.f.prepareVariantSelectionContainerUI(currentOffer, qtyCount, productPageHandle, tierCount)
              : "";
          discountTierContainer.append(gfbVolumeDiscountVariantSelectionContainerBox);

          let selectedTierText = featureTagConfiguration.selectedTierText[ruleIndex];
          // featureTag ui 
          if (selectedTierText != "") {
              let featureTag = gfb.gfbVolumeDiscount.f.prepareUIForMostPopularTag(featureTagConfiguration , ruleIndex);
              discountTierContainer.prepend(featureTag);
            }

          //if only one discount tiers is there then show the tier selected and disable radio button selection
          if (discountTiers.length == 1) {
            let offerId = currentOffer.offerId;
            gfbVolumeDiscountLabelContainerUI.style.pointerEvents = "none";
            radioButton.style.display = "none";
            gfb.gfbVolumeDiscount.f.gfbVolumeDiscountActivatingTier(discountTierContainer, tierCount, offerId, radioButton);
          } else {
            //if first index == 0 and firstTierDefaultSelected value is true and show first tiers selected by default
            if (ruleIndex + 1 == selectedTier && !keepTierClosed) {
                let offerId = currentOffer.offerId;
                gfb.gfbVolumeDiscount.f.gfbVolumeDiscountActivatingTier(discountTierContainer, tierCount, offerId, radioButton);
              
            }else if(ruleIndex == 0){
              if (currentOffer?.advancedConfiguration?.firstTierDefaultSelected && !keepTierClosed) {
                let offerId = currentOffer.offerId;
                gfb.gfbVolumeDiscount.f.gfbVolumeDiscountActivatingTier(discountTierContainer, tierCount, offerId, radioButton);
              }
            }
          }

          return discountTierContainer;
        } catch (error) {
          gfb.utility.debugConsole("error in gfbVolumeDiscountPrepareUI -> ", error);
        }
      },
      prepareUIForMostPopularTag: function(mostPopularSelectedTierData , ruleIndex){
        try {
                    
          const mostPopularTagContainer = document.createElement("div");
          mostPopularTagContainer.classList.add("gfbMostPopularTagContainer");

          // prepare UI for simple ribbon badge(Template no 1)
          if(true){

            const simpleRibbonBadge = document.createElement("div");
            simpleRibbonBadge.classList.add("gfbSimpleRibbonBadge");
            simpleRibbonBadge.innerHTML = mostPopularSelectedTierData?.selectedTierText[ruleIndex];

            // Add class to mostPopularTagContainer
            mostPopularTagContainer.classList.add("gfbTemplateSimpleRibbonBadge");

            // Set inline CSS for simpleRibbonBadge
            simpleRibbonBadge.style.backgroundColor = mostPopularSelectedTierData?.selectedTierBackgroundColor || "#ff0000";
            simpleRibbonBadge.style.color = mostPopularSelectedTierData?.selectedTierTextColor || "#ffffff";
            mostPopularTagContainer.append(simpleRibbonBadge);
            }
            return mostPopularTagContainer;
          } catch (error) {
            gfb.utility.debugConsole("error inside prepareUIForMostPopularTag", error);  
          }
      },
      prepareVariantSelectionContainerUI: function (currentOffer, qtyCount, productPageHandle, tierCount) {
        try {
          // Create elements
          let gfbVolumeDiscountVariantSelectionContainerBox = document.createElement("div");
          gfbVolumeDiscountVariantSelectionContainerBox.classList.add(`gfbVolumeDiscountVariantSelectionContainerBox`, `gfbVolumeDiscountVariantSelectionContainerBoxToggle-${tierCount}_offerId-${currentOffer.offerId}`);
          gfbVolumeDiscountVariantSelectionContainerBox.style.display = "none";

          let gfbVolumeDiscountVariantSelectionContainer = document.createElement("div");
          gfbVolumeDiscountVariantSelectionContainer.classList.add("gfbVolumeDiscountVariantSelectionContainer");
          gfbVolumeDiscountVariantSelectionContainer.setAttribute("data-offer-id", currentOffer.offerId);


          let gfbVolumeDiscountPrepareTiersProductsUIArgs = {
            currentOffer,
            productPageHandle,
            qtyCount,
            tierCount,
            gfbVolumeDiscountVariantSelectionContainerBox,
            gfbVolumeDiscountVariantSelectionContainer,
          };
          let gfbVolumeDiscountGeneratedUI = gfb.gfbVolumeDiscount.f.gfbVolumeDiscountPrepareTiersProductsUI(
            gfbVolumeDiscountPrepareTiersProductsUIArgs
          );

          return gfbVolumeDiscountGeneratedUI;
        } catch (err) {
          gfb.utility.debugConsole("error from prepareVariantSelectionContainerUI ", err);
        }
      },
      
      gfbVolumeDiscountPrepareTiersProductsUI: function (args) {
        try {
          let {
            currentOffer,
            productPageHandle,
            qtyCount,
            tierCount,
            gfbVolumeDiscountVariantSelectionContainerBox,
            gfbVolumeDiscountVariantSelectionContainer,
          } = args;

          let prodCount = qtyCount;
          let startIndexForLoop = 0;
          let volumeBundleTemplate = currentOffer.template || "VOLUME_BUNDLE_TEMPLATE";
          if(volumeBundleTemplate == "NEW_VOLUME_BUNDLE_TEMPLATE"){
            qtyCount = gfb.gfbVolumeDiscount.state.currentSelectedProductCount[currentOffer.offerId][`tier-${tierCount}`] +1;
            startIndexForLoop = qtyCount - 1;
            gfbVolumeDiscountVariantSelectionContainerBox.classList.add("gfbVolumeDiscountNewTemplate");
          }

          for (let j = startIndexForLoop; j < qtyCount; j++) {
            let productData = gfb.gfbVolumeDiscount.state.volumeBundleShopifyDataByHandles[productPageHandle];
            let selectedProduct = currentOffer.selectedProducts[0];
            // selectedProduct.customFieldOptions = {
            //   isAllowed: true,
            //   isMandatory: true
            // }

            if(!selectedProduct.customFieldOptions){
              selectedProduct.customFieldOptions = {
                isAllowed: false,
                isMandatory: false
              }
            }

            let gfbVolumeDiscountTierContainer = document.createElement("div");
            gfbVolumeDiscountTierContainer.classList.add("gfbVolumeDiscountTierContainer");
            gfbVolumeDiscountTierContainer.setAttribute("data-offer-id", currentOffer.offerId);
            gfbVolumeDiscountTierContainer.setAttribute("data-product-variant-index", j);

            // product counter
            let gfbVolumeDiscountProductCounterContainer = document.createElement("div");
            gfbVolumeDiscountProductCounterContainer.classList.add("gfbVolumeDiscountProductCounterContainer");

            let gfbVolumeDiscountProductCounter = document.createElement("div");
            gfbVolumeDiscountProductCounter.classList.add("gfbVolumeDiscountProductCounter");
            gfbVolumeDiscountProductCounter.innerHTML = `${qtyCount} of ${prodCount}`;
            gfbVolumeDiscountProductCounterContainer.append(gfbVolumeDiscountProductCounter);

            // image
            let gfbVolumeDiscountVariantImageContainer = document.createElement("div");
            gfbVolumeDiscountVariantImageContainer.classList.add("gfbVolumeDiscountVariantImageContainer");
            gfbVolumeDiscountVariantImageContainer.setAttribute("data-offer-id", currentOffer.offerId);
            gfbVolumeDiscountVariantImageContainer.setAttribute("data-product-variant-index", j);

            let gfbVolumeDiscountVariantImage = document.createElement("img");
            gfbVolumeDiscountVariantImage.classList.add("gfbVolumeDiscountVariantImage");
            // image selection
            // from tier count, get selected tier, create public title from selected tier
            // get image using public title
            let selectedOptions = gfb.gfbVolumeDiscount.state.currentSelectedOptionsForTiers[currentOffer.offerId][`tier-${tierCount}`][j];
            let selectedPublicTitle = selectedOptions.options.join("/");
            let imageLink = gfb.gfbVolumeDiscount.state.optionImageMap[selectedPublicTitle]?.imageLink || productData.featured_image;
            gfbVolumeDiscountVariantImage.src = imageLink;

            gfbVolumeDiscountVariantImageContainer.append(gfbVolumeDiscountVariantImage);

            let gfbVolumeDiscountVariantSelectionDiv = document.createElement("div");
            gfbVolumeDiscountVariantSelectionDiv.classList.add("gfbVolumeDiscountVariantSelectionDiv");
            gfbVolumeDiscountVariantSelectionDiv.setAttribute("data-offer-id", currentOffer.offerId);
            gfbVolumeDiscountVariantSelectionDiv.setAttribute("data-product-variant-index", j);


            let variants = productData.variants;
            let generatedUI;
            if (variants.length > 1) {
              generatedUI = gfb.gfbVolumeDiscount.f.gfbVolumeDiscountPrepareProductOptionsUI(variants, j, currentOffer, tierCount);
            }

            let gfbVolumeDiscountQuantityInputWrapper = document.createElement("div");
            gfbVolumeDiscountQuantityInputWrapper.classList.add("gfbVolumeDiscountQuantityInputWrapper");
            let gfbVolumeDiscountQuantityLabel = document.createElement("div");
            gfbVolumeDiscountQuantityLabel.classList.add("gfbVolumeDiscountQuantityLabel");
            gfbVolumeDiscountQuantityLabel.innerHTML = "Quantity";
            let gfbVolumeDiscountQuantityInput = document.createElement("input");
            gfbVolumeDiscountQuantityInput.classList.add("gfbVolumeDiscountQuantityInput");
            let selectedVariant = gfb.gfbVolumeDiscount.state.currentSelectedVariantsForTiers[currentOffer.offerId][`tier-${tierCount}`][j];
            let gfbVolumeDiscountProcuctHorizontalLine = document.createElement("hr");
            gfbVolumeDiscountProcuctHorizontalLine.classList.add("gfbVolumeDiscountProcuctHorizontalLine");

            gfbVolumeDiscountQuantityInput.setAttribute("type", "number");
            gfbVolumeDiscountQuantityInput.setAttribute("value", selectedVariant.qty);
            gfbVolumeDiscountQuantityInput.setAttribute("data-product-variant-index", j);
            gfbVolumeDiscountQuantityInput.setAttribute("data-offer-id", currentOffer.offerId);
            gfbVolumeDiscountQuantityInput.setAttribute("data-tier-count", tierCount);
            gfbVolumeDiscountQuantityInput.setAttribute("placeholder", "Quantity");

            gfbVolumeDiscountQuantityInputWrapper.append(gfbVolumeDiscountQuantityLabel);
            gfbVolumeDiscountQuantityInputWrapper.append(gfbVolumeDiscountQuantityInput);

            gfbVolumeDiscountVariantSelectionDiv.append(generatedUI);
            gfbVolumeDiscountVariantSelectionDiv.append(gfbVolumeDiscountQuantityInputWrapper);

            // custom Field
            let gfbVolumeDiscountCustomFieldContainer = document.createElement("div");
            gfbVolumeDiscountCustomFieldContainer.classList.add("gfbVolumeDiscountCustomFieldContainer");

            let gfbVolumeDiscountCustomFieldLabel = document.createElement("div");
            gfbVolumeDiscountCustomFieldLabel.classList.add("gfbVolumeDiscountCustomFieldLabel");

            // add a star if customFieldOptions.isMandatory is true
            let personalizationText = selectedProduct?.customFieldOptions?.personalizationText || "Personalized Text";
            gfbVolumeDiscountCustomFieldLabel.innerHTML = personalizationText + (selectedProduct?.customFieldOptions?.isMandatory ? "*" : "");

            let gfbVolumeDiscountCustomFieldInput = document.createElement("input");
            gfbVolumeDiscountCustomFieldInput.classList.add("gfbVolumeDiscountCustomFieldInput");
            gfbVolumeDiscountCustomFieldInput.setAttribute("type", "text");
            gfbVolumeDiscountCustomFieldInput.setAttribute("data-product-variant-index", j);
            gfbVolumeDiscountCustomFieldInput.setAttribute("data-offer-id", currentOffer.offerId);
            gfbVolumeDiscountCustomFieldInput.setAttribute("data-tier-count", tierCount);
            gfbVolumeDiscountCustomFieldInput.setAttribute("placeholder", "Personalized Text");
            gfbVolumeDiscountCustomFieldInput.innerHTML = gfb.gfbVolumeDiscount.state.currentSelectedVariantsForTiers[currentOffer.offerId][`tier-${tierCount}`][j].customField || "";
            
            gfbVolumeDiscountCustomFieldContainer.appendChild(gfbVolumeDiscountCustomFieldLabel);
            gfbVolumeDiscountCustomFieldContainer.appendChild(gfbVolumeDiscountCustomFieldInput);

            if(currentOffer.selectedTemplateDesignId == "VOLUME_BUNDLE_ELEGANT_DESIGN"){
              gfbVolumeDiscountTierContainer.classList.add("gfbElegantDesignGrid");
              gfbVolumeDiscountTierContainer.append(gfbVolumeDiscountVariantImageContainer);
            }
            gfbVolumeDiscountTierContainer.append(gfbVolumeDiscountVariantSelectionDiv);

            if(selectedProduct?.customFieldOptions?.isAllowed){
              gfbVolumeDiscountTierContainer.append(gfbVolumeDiscountCustomFieldContainer);
              gfbVolumeDiscountTierContainer.classList.add("gfbVolumeDiscountTierContainerWithTextField");
            }

            if(volumeBundleTemplate == "NEW_VOLUME_BUNDLE_TEMPLATE"){
              gfbVolumeDiscountVariantSelectionContainer.append(gfbVolumeDiscountProductCounterContainer);
            }

            gfbVolumeDiscountVariantSelectionContainer.append(gfbVolumeDiscountTierContainer);
            if (j < qtyCount - 1) {
              gfbVolumeDiscountVariantSelectionContainer.append(gfbVolumeDiscountProcuctHorizontalLine);
            }

            if(volumeBundleTemplate == "NEW_VOLUME_BUNDLE_TEMPLATE" && prodCount > 1){
              let productNavigator = gfb.gfbVolumeDiscount.f.prepareVolumeBundleNavigationUI(tierCount, prodCount, currentOffer, qtyCount);
              gfbVolumeDiscountVariantSelectionContainer.append(productNavigator);
            }

          }

          gfbVolumeDiscountVariantSelectionContainerBox.append(gfbVolumeDiscountVariantSelectionContainer);
          return gfbVolumeDiscountVariantSelectionContainerBox;
        } catch (error) {
          gfb.utility.debugConsole("error from gfbVolumeDiscountPrepareTiersProductsUI ", error);
        }
      },
      prepareVolumeBundleNavigationUI: function(tierCount, prodCount, currentOffer, qtyCount){
        try{

          let gfbVolumeProductNavigatorContainer = document.createElement("div");
          gfbVolumeProductNavigatorContainer.classList.add("gfbVolumeProductNavigatorContainer");
          let gfbVolumeProductNavigator = document.createElement("div");
          gfbVolumeProductNavigator.classList.add("gfbVolumeProductNavigator");
          gfbVolumeProductNavigator.setAttribute("data-offer-id", currentOffer.offerId);
          gfbVolumeProductNavigator.setAttribute("data-tier-count", tierCount);
          gfbVolumeProductNavigator.setAttribute("data-product-count", prodCount);
          gfbVolumeProductNavigator.setAttribute("data-qty-count", qtyCount);

          // add two divs inside it, prevButton, nextButton
          let gfbVolumeProductPrevButton = document.createElement("div");
          gfbVolumeProductPrevButton.classList.add("gfbVolumeProductPrevButton");
          gfbVolumeProductPrevButton.innerHTML = "Back";

          let gfbVolumeNavigationExtraSpace = document.createElement("div");
          gfbVolumeNavigationExtraSpace.classList.add("gfbVolumeNavigationExtraSpace");
          gfbVolumeNavigationExtraSpace.innerHTML = " ";

          let gfbVolumeProductNextButton = document.createElement("div");
          gfbVolumeProductNextButton.classList.add("gfbVolumeProductNextButton");
          gfbVolumeProductNextButton.innerHTML = "Next";

          gfbVolumeProductNavigator.append(gfbVolumeProductPrevButton);
          gfbVolumeProductNavigator.append(gfbVolumeNavigationExtraSpace);
          gfbVolumeProductNavigator.append(gfbVolumeProductNextButton);

          gfbVolumeProductNavigatorContainer.append(gfbVolumeProductNavigator);
          return gfbVolumeProductNavigatorContainer;

        }catch(err){
          gfb.utility.debugConsole("err in prepareVolumeBundleNavigationUI is ", err);
        }
      },
      gfbVolumeDiscountPrepareProductOptionsUI: function (variants, productVariantIndex, currentOffer, tierCount) {
        try {
          let checkRenderMasterDropdown = currentOffer.variantDisplayDesign.isAllVariantMasterDropdownDesign;

          let gfbVolumeDiscountVariantUIParentContainer = document.createElement("div");
          gfbVolumeDiscountVariantUIParentContainer.classList.add("gfbVolumeDiscountVariantUIParentContainer");

          let offerId = currentOffer.offerId || currentOffer.metafieldData.offerId;
          let designObjectArr = currentOffer.designObject;

          if (checkRenderMasterDropdown) {
            let generatedUI = gfb.gfbVolumeDiscount.f.gfbVolumeDiscountPrepareUIForMasterDropdown(
              variants,
              productVariantIndex,
              currentOffer,
              tierCount
            );
            return generatedUI;
          }

          // Create element
          let gfbVolumeDiscountSingleDropdownUIParentContainer = document.createElement("div");
          gfbVolumeDiscountSingleDropdownUIParentContainer.classList.add("gfbVolumeDiscountSingleDropdownUIParentContainer");

          for (let i = 0; i < designObjectArr.length; i++) {
            let optionIndex = i;
            let options = designObjectArr[i];
            let args = {
              offerId,
              optionIndex,
              tierCount,
              options,
              productVariantIndex,
            };

            if (designObjectArr[i].design == "LABEL") {
              let generatedUI = gfb.gfbVolumeDiscount.f.gfbVolumeDiscountPrepareUIForLabels(args);
              gfbVolumeDiscountVariantUIParentContainer.append(generatedUI);
            } else if (designObjectArr[i].design == "SWATCH") {
              let generatedUI = gfb.gfbVolumeDiscount.f.gfbVolumeDiscountPrepareUIForSwatches(args);
              gfbVolumeDiscountVariantUIParentContainer.append(generatedUI);
            } else {
              let generatedUI = gfb.gfbVolumeDiscount.f.gfbVolumeDiscountPrepareUIForSingleDropdown(args);
              gfbVolumeDiscountSingleDropdownUIParentContainer.append(generatedUI);
            }

            if (gfbVolumeDiscountSingleDropdownUIParentContainer.children.length > 0) {
              gfbVolumeDiscountVariantUIParentContainer.append(gfbVolumeDiscountSingleDropdownUIParentContainer);
            }
          }

          return gfbVolumeDiscountVariantUIParentContainer;
        } catch (error) {
          gfb.utility.debugConsole("error from gfbVolumeDiscountPrepareProductOptionsUI ", error);
        }
      },
      gfbVolumeDiscountPrepareUIForMasterDropdown: function (variants, productVariantIndex, currentOffer, tierCount) {
        try {
          // Create element
          let gfbVolumeDiscountVariantSelection = document.createElement("select");
          gfbVolumeDiscountVariantSelection.classList.add("gfbVolumeDiscountVariantSelection");
          gfbVolumeDiscountVariantSelection.setAttribute("data-offer-id", currentOffer.offerId);

          for (let k = 0; k < variants.length; k++) {
            let variant = variants[k];
            let variantId = variant.id;
            let variantTitle = variant.public_title;
            let gfbVolumeDiscountVariantSelectionOption = document.createElement("option");
            gfbVolumeDiscountVariantSelectionOption.classList.add("gfbVolumeDiscountVariantSelectionOption");
            gfbVolumeDiscountVariantSelectionOption.innerHTML = variantTitle;
            if (variant && variant.available) {
              gfbVolumeDiscountVariantSelectionOption.setAttribute("data-offer-id", currentOffer.offerId);
              gfbVolumeDiscountVariantSelectionOption.setAttribute("data-product-handle", currentOffer.selectedProducts[0].handle);
              gfbVolumeDiscountVariantSelectionOption.setAttribute("data-product-variant-index", productVariantIndex);
              gfbVolumeDiscountVariantSelectionOption.setAttribute("data-variant-id", variantId);
              gfbVolumeDiscountVariantSelectionOption.setAttribute("tier-count", tierCount);
              gfbVolumeDiscountVariantSelection.append(gfbVolumeDiscountVariantSelectionOption);
            }
          }

          return gfbVolumeDiscountVariantSelection;
        } catch (error) {
          gfb.utility.debugConsole("error from gfbVolumeDiscountPrepareUIForMasterDropdown ", error);
        }
      },
      gfbVolumeDiscountPrepareUIForLabels: function (args) {
        try {
          let { offerId, optionIndex, tierCount, options, productVariantIndex } = args;

          let variantData = gfb.gfbVolumeDiscount.state.currentSelectedOptionsForTiers[offerId][`tier-${tierCount}`][productVariantIndex];
          let activeIndex = gfb.gfbVolumeDiscount.f.gfbVolumeDiscountFindActiveIndexOfVariant(optionIndex, options.values, variantData);

          let gfbVolumeDiscountLabelContainerUI = document.createElement("div");
          gfbVolumeDiscountLabelContainerUI.classList.add("gfbVolumeDiscountLabelContainerUI");
          
          let gfbVolumeDiscountLabelHeading = document.createElement("div");
          gfbVolumeDiscountLabelHeading.classList.add("gfbVolumeDiscountLabelHeading");
          gfbVolumeDiscountLabelHeading.innerHTML = options.name;
          
          let filteredOptionValue = options.values; // Assuming this is already defined elsewhere
          
          let gfbVolumeDiscountLabelParentContainer = document.createElement("div");
          gfbVolumeDiscountLabelParentContainer.classList.add("gfbVolumeDiscountLabelParentContainer");

          for (let i = 0; i < filteredOptionValue.length; i++) {
            let filterValue = filteredOptionValue[i];
            let currentSelectedVariant = [...variantData.options];
            currentSelectedVariant[optionIndex] = filterValue.label;
            let public_title = currentSelectedVariant.join("/");
            let optionData = gfb.gfbVolumeDiscount.state.optionImageMap[public_title];
            if(!optionData){
              continue;
            }
            let gfbVolumeDiscountLabelPillsUI = document.createElement("div");
            gfbVolumeDiscountLabelPillsUI.classList.add("gfbVolumeDiscountLabelPillsUI");
            gfbVolumeDiscountLabelPillsUI.innerHTML = filterValue.label;

            if (i == activeIndex) {
                gfbVolumeDiscountLabelPillsUI.classList.add("gfbVolumeDiscountLabelPillsUISelected");
            }
            if (!optionData.isAvailable) {
                gfbVolumeDiscountLabelPillsUI.classList.add("gfbVolumeDiscountLabelPillsUISelectedUIOutOfStock");
            }

            gfbVolumeDiscountLabelPillsUI.setAttribute("data-label-name", filterValue.label);
            gfbVolumeDiscountLabelPillsUI.setAttribute("data-product-variant-index", productVariantIndex);
            gfbVolumeDiscountLabelPillsUI.setAttribute("data-tier-count", `tier-${tierCount}`);
            gfbVolumeDiscountLabelPillsUI.setAttribute("data-offer-id", offerId);
            gfbVolumeDiscountLabelPillsUI.setAttribute("data-label-index", optionIndex);

            gfbVolumeDiscountLabelParentContainer.append(gfbVolumeDiscountLabelPillsUI);
          }

          gfbVolumeDiscountLabelContainerUI.append(gfbVolumeDiscountLabelHeading);
          gfbVolumeDiscountLabelContainerUI.append(gfbVolumeDiscountLabelParentContainer);

          return gfbVolumeDiscountLabelContainerUI;
        } catch (error) {
          gfb.utility.debugConsole("error from gfbVolumeDiscountPrepareUIForLabels ", error);
        }
      },
      gfbVolumeDiscountPrepareUIForSwatches: function (args) {
        try {
          let { offerId, optionIndex, tierCount, options, productVariantIndex } = args;

          let variantData = gfb.gfbVolumeDiscount.state.currentSelectedOptionsForTiers[offerId][`tier-${tierCount}`][productVariantIndex];
          let activeIndex = gfb.gfbVolumeDiscount.f.gfbVolumeDiscountFindActiveIndexOfVariant(optionIndex, options.values, variantData);
          let currentSelectedSwatch = variantData.options[optionIndex];
          // Create elements
          let gfbVolumeDiscountSwatchContainer = document.createElement("div");
          gfbVolumeDiscountSwatchContainer.classList.add("gfbVolumeDiscountSwatchContainer");

          let gfbVolumeDiscountSwatchHeading = document.createElement("div");
          gfbVolumeDiscountSwatchHeading.classList.add("gfbVolumeDiscountSwatchHeading");
          gfbVolumeDiscountSwatchHeading.innerHTML = `${options.name} (${currentSelectedSwatch})`;

          let filteredOptionValue = options.values; // Assuming this is already defined elsewhere

          const reqOffer = gfb.settings.volumeDiscountData.find((item) => item.offerId == offerId);
          let advancedConfig = reqOffer?.advancedConfiguration || {};

          let gfbVolumeDiscountSwatchParentContainer = document.createElement("div");
          gfbVolumeDiscountSwatchParentContainer.classList.add("gfbVolumeDiscountSwatchParentContainer");


          for (let i = 0; i < filteredOptionValue.length; i++) {
            let filterValue = filteredOptionValue[i];
            let currentSelectedVariant = [...variantData.options];
            currentSelectedVariant[optionIndex] = filterValue.label;
            let public_title = currentSelectedVariant.join("/");
            let optionData = gfb.gfbVolumeDiscount.state.optionImageMap[public_title];
            if(!optionData){
              continue;
            }
            let gfbVolumeDiscountSwatchColorUI = document.createElement("div");
            gfbVolumeDiscountSwatchColorUI.classList.add("gfbVolumeDiscountSwatchColorUI");

            let gfbVolumeDiscountSwatchImage = document.createElement("img");
            gfbVolumeDiscountSwatchImage.classList.add("gfbVolumeDiscountSwatchImg");
            let optionsInVariantData = JSON.parse(JSON.stringify(variantData.options));
            optionsInVariantData[optionIndex] = filterValue.label;

            if (i == activeIndex) {
              gfbVolumeDiscountSwatchColorUI.classList.add("gfbVolumeDiscountSwatchColorUISelected");
            }
            if (!optionData.isAvailable) {
              gfbVolumeDiscountSwatchColorUI.classList.add("gfbVolumeDiscountSwatchColorUIOutOfStock");
            }

            /**
             * now we have identity of other two options
             * use them to find variant in combination with each selected option here,
             * now by replacing current option on swatchOption index in the options array
             * use that variant's image as swatch image
             */
            let imageUrl = optionData.imageLink;
            if (advancedConfig?.addCustomImagesForSwatches) {
              if (filterValue.image) {
                imageUrl = filterValue.image;
              }
            }

            gfbVolumeDiscountSwatchImage.setAttribute("src", imageUrl);
            gfbVolumeDiscountSwatchImage.setAttribute("alt", "color-imag");

            let swatchDesignType = options.customizeSwatchType;
            if(swatchDesignType == "HEXCODE"){
              gfbVolumeDiscountSwatchImage.style.display = "none";
              gfbVolumeDiscountSwatchColorUI.style.backgroundColor = filterValue.hexCode;
            }


            gfbVolumeDiscountSwatchColorUI.setAttribute("data-color-name", filterValue.label);
            gfbVolumeDiscountSwatchColorUI.setAttribute("data-product-variant-index", productVariantIndex);
            gfbVolumeDiscountSwatchColorUI.setAttribute("data-tier-count", `tier-${tierCount}`);
            gfbVolumeDiscountSwatchColorUI.setAttribute("data-offer-id", offerId);
            gfbVolumeDiscountSwatchColorUI.setAttribute("data-color-index", optionIndex);

            gfbVolumeDiscountSwatchColorUI.append(gfbVolumeDiscountSwatchImage);
            gfbVolumeDiscountSwatchParentContainer.append(gfbVolumeDiscountSwatchColorUI);
          }

          gfbVolumeDiscountSwatchContainer.append(gfbVolumeDiscountSwatchHeading);
          gfbVolumeDiscountSwatchContainer.append(gfbVolumeDiscountSwatchParentContainer);

          return gfbVolumeDiscountSwatchContainer;
        } catch (error) {}
      },
      gfbVolumeDiscountPrepareUIForSingleDropdown: function (args) {
        try {
          let { offerId, optionIndex, tierCount, options, productVariantIndex } = args;

          let variantData = gfb.gfbVolumeDiscount.state.currentSelectedOptionsForTiers[offerId][`tier-${tierCount}`][productVariantIndex];
          let activeIndex = gfb.gfbVolumeDiscount.f.gfbVolumeDiscountFindActiveIndexOfVariant(optionIndex, options.values, variantData);

          let gfbVolumeDiscountSingleDropdownContainer = document.createElement("div");
          gfbVolumeDiscountSingleDropdownContainer.classList.add("gfbVolumeDiscountSingleDropdownContainer");

          let gfbVolumeDiscountSingleDropdownHeading = document.createElement("div");
          gfbVolumeDiscountSingleDropdownHeading.classList.add("gfbVolumeDiscountSingleDropdownHeading");
          gfbVolumeDiscountSingleDropdownHeading.innerHTML = options.name;

          let filteredOptionValue = options.values; // Assuming this is already defined elsewhere

          let gfbVolumeDiscountSingleDropdownSelector = document.createElement("select");
          gfbVolumeDiscountSingleDropdownSelector.classList.add("gfbVolumeDiscountSingleDropdownSelector");

          for (let i = 0; i < filteredOptionValue.length; i++) {
            let filterValue = filteredOptionValue[i];
            let currentSelectedVariant = [...variantData.options];
            currentSelectedVariant[optionIndex] = filterValue.label;
            let public_title = currentSelectedVariant.join("/");
            let optionData = gfb.gfbVolumeDiscount.state.optionImageMap[public_title];
            if(!optionData){
              continue;
            }
            let gfbVolumeDiscountSingleDropdownOption = document.createElement("option");
            gfbVolumeDiscountSingleDropdownOption.classList.add("gfbSingleDropdownOption");
            gfbVolumeDiscountSingleDropdownOption.innerHTML = filterValue.label;
            gfbVolumeDiscountSingleDropdownOption.setAttribute("value", filterValue.label);
            gfbVolumeDiscountSingleDropdownOption.setAttribute("data-label", filterValue.label);
            gfbVolumeDiscountSingleDropdownOption.setAttribute("data-product-variant-index", productVariantIndex);
            gfbVolumeDiscountSingleDropdownOption.setAttribute("data-tier-count", `tier-${tierCount}`);
            gfbVolumeDiscountSingleDropdownOption.setAttribute("data-offer-id", offerId);
            gfbVolumeDiscountSingleDropdownOption.setAttribute("data-label-index", optionIndex);
            if (i == activeIndex) {
              // make this option selected option in dropDown
              gfbVolumeDiscountSingleDropdownOption.setAttribute("selected", "selected");
            }
            if (optionData.isAvailable) {
              gfbVolumeDiscountSingleDropdownSelector.append(gfbVolumeDiscountSingleDropdownOption);
            }
          }

          gfbVolumeDiscountSingleDropdownContainer.append(gfbVolumeDiscountSingleDropdownHeading);
          gfbVolumeDiscountSingleDropdownContainer.append(gfbVolumeDiscountSingleDropdownSelector);

          return gfbVolumeDiscountSingleDropdownContainer;
        } catch (error) {
          gfb.utility.debugConsole("error from gfbVolumeDiscountPrepareUIForSingleDropdown ", error);
        }
      },
      gfbVolumeDiscountFindNewVariantForSelectedOption: function (event, labelName, offerId, productVariantIndex, tier) {
        try {
          let currentOffer = gfb.settings.volumeDiscountData.filter(
            (volumeDiscount) => volumeDiscount.offerId == offerId || volumeDiscount.metafieldData.offerId == offerId
          )[0];
          let productId = currentOffer.selectedProducts[0].productId;
          // productData contains data of product with productid as id
          let allProductData = gfb.gfbVolumeDiscount.state.volumeBundleShopifyData;
          let productData;
          allProductData.forEach((product) => {
            if (product.id == productId) {
              productData = product;
            }
          })
          let variantsArr = productData.variants;
          let optionsArr = gfb.gfbVolumeDiscount.state.currentSelectedOptionsForTiers[offerId][tier][productVariantIndex].options;
          let tierCount = Number(tier.split("-")[1]);
          let discountValue = parseFloat(currentOffer.rules[tierCount - 1].discountValue);
          let public_title = optionsArr.join("/");
          let isVariantFound = false;
          let newSelectedVariant = {};
          let newSelectedOptions = {};
          for (let i = 0; i < variantsArr.length; i++) {
            let variant = variantsArr[i];
            let variant_public_title = variant.options.join("/");
            if (variant_public_title == public_title && variant.available) {
              let variantId = variant.variant_id || variant.id;
              isVariantFound = true;
              newSelectedVariant = { 
                variantId,
                price: parseFloat(variant.totalVariantPrice), 
                strikeThroughPrice : parseFloat(variant.strikeThroughPrice), 
                discountValue, 
                qty: 1,
                customField: gfb.gfbVolumeDiscount.state.currentSelectedVariantsForTiers[offerId][tier][productVariantIndex].customField || "",
              };
              break;
            }
          }

          if (!isVariantFound) {
            for (let i = 0; i < variantsArr.length; i++) {
              let variant = variantsArr[i];
              let variantOptions = variant.options;
              for (let j = 0; j < variantOptions.length; j++) {
                let currentOption = variantOptions[j];
                if (currentOption == labelName && variant.available) {
                  let variantId = variant.variant_id;
                  newSelectedVariant = { 
                    variantId, 
                    price: variant.totalVariantPrice,
                    strikeThroughPrice : variant.strikeThroughPrice, 
                    discountValue, 
                    qty: 1,
                    customField: ""
                  };
                  newSelectedOptions = { options: [...variantOptions] };
                  break;
                }
              }
            }
          }

          if (isVariantFound) {
            gfb.gfbVolumeDiscount.state.currentSelectedVariantsForTiers[offerId][tier][productVariantIndex] = newSelectedVariant;
          } else {
            gfb.gfbVolumeDiscount.state.currentSelectedVariantsForTiers[offerId][tier][productVariantIndex] = newSelectedVariant;
            gfb.gfbVolumeDiscount.state.currentSelectedOptionsForTiers[offerId][tier][productVariantIndex] = newSelectedOptions;
          }

          let gfbVolumeDiscountVariantSelectionContainerBox = document.createElement("div");
          gfbVolumeDiscountVariantSelectionContainerBox.classList.add(`gfbVolumeDiscountVariantSelectionContainerBox`, `gfbVolumeDiscountVariantSelectionContainerBoxToggle-${tierCount}_offerId-${offerId}`);

          // Adding inline CSS for volume discount animation
          gfbVolumeDiscountVariantSelectionContainerBox.style.display = "block";

          let gfbVolumeDiscountVariantSelectionContainer = document.createElement("div");
          gfbVolumeDiscountVariantSelectionContainer.classList.add("gfbVolumeDiscountVariantSelectionContainer");
          gfbVolumeDiscountVariantSelectionContainer.setAttribute("data-offer-id", currentOffer.offerId);

          let qtyCount = gfb.gfbVolumeDiscount.state.currentSelectedTiers[`${offerId}`].qtyLabel;
          qtyCount = parseInt(qtyCount);

          let gfbVolumeDiscountPrepareTiersProductsUIArgs = {
            currentOffer,
            productPageHandle: productData.handle,
            qtyCount,
            tierCount,
            gfbVolumeDiscountVariantSelectionContainerBox,
            gfbVolumeDiscountVariantSelectionContainer,
          };

          let gfbVolumeDiscountTierPriceGeneratedUI = gfb.gfbVolumeDiscount.f.gfbVolumeDiscountPrepareTierPrice(currentOffer, tierCount);
          let gfbVolumeDiscountGeneratedUI = gfb.gfbVolumeDiscount.f.gfbVolumeDiscountPrepareTiersProductsUI(
            gfbVolumeDiscountPrepareTiersProductsUIArgs
          );

          let gfbVolumeDiscountPriceSelectedContainer = document.querySelector(`.gfbVolumeDiscountPriceContainerByTier-${tierCount}_offerId-${currentOffer.offerId}`);
          let gfbVolumeDiscountSelectedContainer = document.querySelector(`.gfbVolumeDiscountVariantSelectionContainerBoxToggle-${tierCount}_offerId-${offerId}`);

          gfbVolumeDiscountPriceSelectedContainer.innerHTML = gfbVolumeDiscountTierPriceGeneratedUI.innerHTML;
          gfbVolumeDiscountSelectedContainer.innerHTML = gfbVolumeDiscountGeneratedUI.innerHTML;
        } catch (error) {
          gfb.utility.debugConsole("error from gfbVolumeDiscountFindNewVariantForSelectedOption ", error);
        }
      },
      gfbVolumeDiscountPrepareTierPrice: function (currentOffer, tierCount) {
        try {
          let currentSelectedVariantsForTiers =
            gfb.gfbVolumeDiscount.state.currentSelectedVariantsForTiers[currentOffer.offerId][`tier-${tierCount}`];
          let discountValue = parseFloat(currentOffer.rules[tierCount - 1].discountValue);
          let originalPrice = 0;
          let discountPrice = 0;
          let currencySymbol = gfb.utility.getCurrencySymbol();
          let discountType = currentOffer.discountType;
          let isComparedPriceVisible = currentOffer?.advancedConfiguration?.isComparedPriceVisible;
          if (discountType == "PERCENTAGE") {
            for (let i = 0; i < Object.keys(currentSelectedVariantsForTiers).length; i++) {
              originalPrice += isComparedPriceVisible ? parseFloat(currentSelectedVariantsForTiers[i].strikeThroughPrice) : parseFloat(currentSelectedVariantsForTiers[i].price);
            }

            for (let i = 0; i < Object.keys(currentSelectedVariantsForTiers).length; i++) {
              let discount = isComparedPriceVisible ? parseFloat((currentSelectedVariantsForTiers[i].strikeThroughPrice * discountValue) / 100) : parseFloat((currentSelectedVariantsForTiers[i].price * discountValue) / 100);
              discountPrice += isComparedPriceVisible ? parseFloat(currentSelectedVariantsForTiers[i].strikeThroughPrice - discount) : parseFloat(currentSelectedVariantsForTiers[i].price - discount);
            }

            originalPrice = originalPrice.toFixed(2);
            discountPrice = discountPrice.toFixed(2);
          }
          if(discountType == "FIXED_AMOUNT_OFF"){
            for (let i = 0; i < Object.keys(currentSelectedVariantsForTiers).length; i++) {
              originalPrice += isComparedPriceVisible ? parseFloat(currentSelectedVariantsForTiers[i].strikeThroughPrice) : parseFloat(currentSelectedVariantsForTiers[i].price);
            }
            discountValue = gfb.utility.convertFromStoreCurrencyToCustomer(discountValue);
            discountPrice = parseFloat(originalPrice - discountValue);

            originalPrice = originalPrice.toFixed(2);
            discountPrice = discountPrice.toFixed(2);
          }

          let gfbVolumeDiscountPriceContainer = document.createElement("div");
          gfbVolumeDiscountPriceContainer.classList.add(`gfbVolumeDiscountPriceContainer`, `gfbVolumeDiscountPriceContainerByTier-${tierCount}_offerId-${currentOffer.offerId}`);

          let gfbVolumeDiscountDiscountPrice = document.createElement("div");
          gfbVolumeDiscountDiscountPrice.classList.add("gfbVolumeDiscountDiscountPrice");
          gfbVolumeDiscountDiscountPrice.innerHTML = `${currencySymbol}${discountPrice}`;

          let gfbVolumeDiscountOriginalPrice = document.createElement("div");
          gfbVolumeDiscountOriginalPrice.classList.add("gfbVolumeDiscountOriginalPrice");
          gfbVolumeDiscountOriginalPrice.innerHTML = `${currencySymbol}${originalPrice}`;

          // Append elements
          gfbVolumeDiscountPriceContainer.append(gfbVolumeDiscountDiscountPrice);
          gfbVolumeDiscountPriceContainer.append(gfbVolumeDiscountOriginalPrice);

          return gfbVolumeDiscountPriceContainer;
        } catch (error) {
          gfb.utility.debugConsole("error from gfbVolumeDiscountPrepareTierPrice ", error);
        }
      },
      gfbVolumeDiscountFindActiveIndexOfVariant: function (optionIndex, values, variantData) {
        try {
          let index = -1;
          for (let i = 0; i < values.length; i++) {
            if (variantData.options[optionIndex] == values[i].label) {
              index = i;
              break;
            }
          }
          return index;
        } catch (error) {
          gfb.utility.debugConsole("error from gfbVolumeDiscountFindActiveIndexOfVariant ", error);
        }
      },
      gfbVolumeDiscountActivatingTier: function (discountTierContainer, tierCount, offerId, radioButton) {
        try {
          gfb.utility.debugConsole("gfbVolumeDiscountActivatingTier =>   ");
          let filteredVolumeDiscount = gfb.settings.volumeDiscountData.filter(
            (value) => value.offerId == offerId || value.metafieldData.offerId == offerId
          )[0];
          let ruleLength = filteredVolumeDiscount.rules.length;
            
          for (let i = 1; i <= ruleLength; i++) {
            let target = document.querySelector(`.gfbVolumeDiscountVariantSelectionContainerBoxToggle-${i}_offerId-${offerId}`) ||  discountTierContainer.querySelector(`.gfbVolumeDiscountVariantSelectionContainerBoxToggle-${i}_offerId-${offerId}`);
            if(target){
              if (i == tierCount) {
                target.classList.remove("gfbVolumeAnimationCloser");
                target.classList.add("gfbVolumeAnimationOpener");
              } else {
                target.classList.remove("gfbVolumeAnimationOpener");
                target.classList.add("gfbVolumeAnimationCloser");
              }
            }
          }

          if (discountTierContainer.classList.contains("gfbTierSelected")) {
            discountTierContainer.classList.remove("gfbTierSelected");
            radioButton.checked = false;
            gfb.gfbVolumeDiscount.state.reset = true;
            let currentSelectedTiers = { ...gfb.gfbVolumeDiscount.state.currentSelectedTiers };
            delete currentSelectedTiers[`${offerId}`];
            gfb.gfbVolumeDiscount.state.currentSelectedTiers = { ...currentSelectedTiers };
          } else {
            // select all the .gfbVolumeDiscountWidgetOfferDiscountTierContainer in document and remove class gfbTierSelected
            let elements = document.querySelectorAll(`.gfbVolumeDiscountWidgetOfferDiscountTierContainerByOffer-${offerId}`) || discountTierContainer.querySelectorAll(`.gfbVolumeDiscountWidgetOfferDiscountTierContainerByOffer-${offerId}`);
            elements.forEach(element => {
                element.classList.remove("gfbTierSelected");
            });
            discountTierContainer.classList.add("gfbTierSelected");
            radioButton.checked = true;

            gfb.gfbVolumeDiscount.state.reset = false;
            let currentSelectedTiers = { ...gfb.gfbVolumeDiscount.state.currentSelectedTiers };
            gfb.gfbVolumeDiscount.state.currentSelectedTiers = {
                ...currentSelectedTiers,
                [offerId]: { qtyLabel: radioButton.value, tierCount: radioButton.getAttribute("tier-count") },
            };
          }
        } catch (error) {
          gfb.utility.debugConsole("error from gfbVolumeDiscountActivatingTier ", error);
        }
      },
      checkConditionForCart: function (dataToSend, offerId) {
        try{
          let flag = true;
          let items = dataToSend.items;
          let currentOffer;
          gfb.settings.volumeDiscountData.forEach((offer) => {
            if (offer.offerId == offerId) {
              currentOffer = offer;
            }
          })

          let product = currentOffer.selectedProducts[0];
          let customFieldOptions = product?.customFieldOptions || {
            isAllowed: false,
            isMandatory: false,
          };

          let isCustomFieldMandatory = customFieldOptions.isMandatory;
          if(isCustomFieldMandatory){
            items.forEach((item) => {
              let customField = item.properties["_flyBundles:customField"];
              if(!customField){
                flag = false;
              }
            })
          }


          return flag;
        }catch(err){
          gfb.utility.debugConsole("error in checkConditionForCart => ", err);
        }
      },
      eventListenerForGfbVolumeDiscountWidgetOfferAddToCartButton: function(){
        const elements = document.querySelectorAll(".gfbVolumeDiscountWidgetOfferAddToCartButton");
        elements.forEach((element) => {
          element.addEventListener("click", async function(event){
            try{
              event.preventDefault();
              event.stopPropagation();
              event.stopImmediatePropagation();
  
              let offerId = event.target.getAttribute("data-offer-id");
              let filteredOfferData = gfb.settings.volumeDiscountData.filter(
                (offer) => offer.offerId === offerId || offer.metafieldData.offerId === offerId
              )[0];
              let cartBtnInProgressName = filteredOfferData.configuration.cartBtnInProgress || "Adding to Cart";
              let isComparedPriceVisible = filteredOfferData?.advancedConfiguration?.isComparedPriceVisible;
              let cartBtn = this;
              let cartBtnName = cartBtn.innerHTML;
              cartBtn.textContent = cartBtnInProgressName;
  
              cartBtn.classList.add("gfbDisabled");
  
              let qtyToPurchase = 1;
              let bundleQty = gfb.gfbVolumeDiscount.state.currentSelectedTiers[`${offerId}`].qtyLabel;
              let activeTier = gfb.gfbVolumeDiscount.state.currentSelectedTiers[`${offerId}`].tierCount;
              let activeTierName = `tier-${activeTier}`;
              let activeTierData = gfb.gfbVolumeDiscount.state.currentSelectedVariantsForTiers[offerId][activeTierName];
              
              let redirectToCartEnabled_volumeBundle = gfb.settings.app.redirectToCartEnabled_volumeBundle;
              let redirectToCheckoutEnabled_volumeBundle = gfb.settings.app.redirectToCheckoutEnabled_volumeBundle;
              let isExecuteCustomScriptAfterAddToCartEnabled_volumeBundle = gfb.settings.app.isExecuteCustomScriptAfterAddToCartEnabled_volumeBundle;
              let executeCustomScriptAfterAddToCart_volumeBundle = gfb.settings.app.executeCustomScriptAfterAddToCart_volumeBundle;
              let executeDefaultSideCartUpdate_volumeBundle = gfb.settings.app.executeDefaultSideCartUpdate_volumeBundle;
              let redirectBooleans = {
                redirectToCartEnabled: redirectToCartEnabled_volumeBundle,
                redirectToCheckoutEnabled: redirectToCheckoutEnabled_volumeBundle,
                isExecuteCustomScriptAfterAddToCartEnabled: isExecuteCustomScriptAfterAddToCartEnabled_volumeBundle,
                executeDefaultSideCartUpdate: executeDefaultSideCartUpdate_volumeBundle,
              }
              let redirectionScript = executeCustomScriptAfterAddToCart_volumeBundle;
              
              let listOfVariantsToBuy = [];
              let customFieldsArray = [];
              for (let i = 0; i < bundleQty; i++) {
                let varId = activeTierData[i].variantId;
                let customField = activeTierData[i].customField;
                listOfVariantsToBuy.push(varId);
                customFieldsArray.push(customField);
              }
  
              let randomKey = gfb.utility.generateRandomAlphanumeric(3);
              gfb.utility.debugConsole("add to cart button clicked", qtyToPurchase);
  

              let itemsArray = [];
              for (let i = 0; i < listOfVariantsToBuy.length; i++) {
                let object = {
                  id: listOfVariantsToBuy[i],
                  quantity: qtyToPurchase,
                  properties: {
                    "_flyBundles:OfferId": `${offerId}_${randomKey}`,
                    "_flyBundles:prodQty": parseInt(bundleQty),
                    "_flyBundles:customField": customFieldsArray[i],
                  },
                };
  
                itemsArray.push(object);
              }

              // itemsArray = gfb.utility.checkForDuplicateAndModifyItemsArray(itemsArray);
  
              let dataToSend = {
                items: itemsArray,
                // sections: ["cart-template"],
                "section-id": "template--15082866278607__main",
              };
              let isCartValid = gfb.gfbVolumeDiscount.f.checkConditionForCart(dataToSend, offerId);
              let response;

              if(isCartValid){
                response = await gfb.utility.addToCart(dataToSend);
                cartBtn.textContent = cartBtnName;
                cartBtn.classList.remove("gfbDisabled");
                gfb.utility.debugConsole("response", response);
              }else{
                // popup for 3 second

                let gfbVolumeDiscountWidgetOfferAddToCartPopup = document.querySelector(`.gfbVolumeDiscountWidgetOfferAddToCartPopup[data-offer-id="${offerId}"]`);
                gfbVolumeDiscountWidgetOfferAddToCartPopup.style.display = "block";
                setTimeout(() => {
                  gfbVolumeDiscountWidgetOfferAddToCartPopup.style.display = "none";
                }, 3000);

                cartBtn.textContent = cartBtnName;
                cartBtn.classList.remove("gfbDisabled");
                return;

              }
              
  
              if (response) {
                gfb.state.isCartUpdatedByUs = true;
              }
              
  
              gfb.gfbFrequentBought.f.postAddToCartDecisionApplicator(response, redirectBooleans, redirectionScript);
            }catch(err){
              gfb.utility.debugConsole("error in eventListenerForGfbVolumeDiscountWidgetOfferAddToCartButton => ", err);
            }
          })
        })
      },
      eventListenerForGfbVolumeDiscountLabelContainer: function(){
        const elements = document.querySelectorAll(".gfbVolumeDiscountLabelContainer");
        elements.forEach((element) => {
          element.addEventListener("click", function(event){
            try{
              event.preventDefault();
              event.stopPropagation();
              event.stopImmediatePropagation();
  
              // console.log('button clicked' , gfb.gfbVolumeDiscount.state)
              let element = this;
              let offerId = element.getAttribute("data-offer-id");
              let discountTierContainer = element.closest(`.gfbVolumeDiscountWidgetOfferDiscountTierContainerByOffer-${offerId}`);
  
              let tierCount = element.getAttribute("data-tier-count");
              let filteredVolumeDiscount = gfb.settings.volumeDiscountData.filter(
                (value) => value.offerId == offerId || value.metafieldData.offerId == offerId
              )[0];
              let ruleLength = filteredVolumeDiscount.rules.length;
              let radioButton = discountTierContainer.querySelector(".gfbVolumeDiscountWidgetOfferDiscountTierRadio");
  
              gfb.gfbVolumeDiscount.f.gfbVolumeDiscountActivatingTier(discountTierContainer, tierCount, offerId, radioButton);
              gfb.gfbVolumeDiscount.f.registerEvents();
            }catch(err){
              gfb.utility.debugConsole("error in gfbVolumeDiscountWidgetOfferDiscountTierRadio -> ", error);
            }
          })
        })
      },
      eventListenerForGfbVolumeDiscountVariantSelection: function(){
        const elements = document.querySelectorAll(".gfbVolumeDiscountVariantSelection");
        elements.forEach((element) => {
          element.addEventListener("change", async function(event){
            try{
              event.preventDefault();
              event.stopPropagation();
              event.stopImmediatePropagation();

              let variantSelector = event.target;
              let selectedIndex = variantSelector.selectedIndex;
              let optionsSelector = variantSelector.options[selectedIndex];
              let variantId = optionsSelector.getAttribute("data-variant-id");
              let tierCount = optionsSelector.getAttribute("tier-count");
              let variantIndex = optionsSelector.getAttribute("data-product-variant-index");
              let variant = gfb.gfbVolumeDiscount.state.volumeBundleShopifyDataByVariantIds[variantId];
              let productId = variant.product_id
              let offerId = optionsSelector.getAttribute("data-offer-id");
              let tierName = `tier-${tierCount}`;
              let currentOffer = gfb.settings.volumeDiscountData.filter((volumeDiscount) => volumeDiscount.offerId == offerId || volumeDiscount.metafieldData.offerId == offerId)[0];
              let discountValue = currentOffer.rules[tierCount - 1].discountValue;
              gfb.gfbVolumeDiscount.state.currentSelectedVariantsForTiers[offerId][tierName][variantIndex].variantId = variantId;
              gfb.gfbVolumeDiscount.state.currentSelectedVariantsForTiers[offerId][tierName][variantIndex].price = parseFloat(variant.totalVariantPrice);
              gfb.gfbVolumeDiscount.state.currentSelectedVariantsForTiers[offerId][tierName][variantIndex].totalVariantPrice = parseFloat(variant.totalVariantPrice);
              gfb.gfbVolumeDiscount.state.currentSelectedVariantsForTiers[offerId][tierName][variantIndex].strikeThroughPrice = parseFloat(variant.strikeThroughPrice);
              gfb.gfbVolumeDiscount.state.currentSelectedVariantsForTiers[offerId][tierName][variantIndex].qty = 1;
              gfb.gfbVolumeDiscount.state.currentSelectedVariantsForTiers[offerId][tierName][variantIndex].discountValue = discountValue;

              // let balancedTierCount = parseInt(tierCount) - 1;
              // gfb.gfbVolumeDiscount.state.currentSelectedOptionsForTiers[offerId][tierName][balancedTierCount].options = [...variant.options];
              // let qtyCount = gfb.gfbVolumeDiscount.state.currentSelectedTiers[`${offerId}`].qtyLabel;
              
              // let gfbVolumeDiscountContainerBox = event.target.closest(`.gfbVolumeDiscountVariantSelectionContainerBox`);

              // let gfbVolumeDiscountVariantSelectionContainerBox = document.createElement("div");
              // gfbVolumeDiscountVariantSelectionContainerBox.classList.add(`gfbVolumeDiscountVariantSelectionContainerBox`, `gfbVolumeDiscountVariantSelectionContainerBoxToggle-${tierCount}_offerId-${currentOffer.offerId}`);
              // gfbVolumeDiscountVariantSelectionContainerBox.style.display = "none";

              // let gfbVolumeDiscountVariantSelectionContainer = document.createElement("div");
              // gfbVolumeDiscountVariantSelectionContainer.classList.add("gfbVolumeDiscountVariantSelectionContainer");
              // gfbVolumeDiscountVariantSelectionContainer.setAttribute("data-offer-id", currentOffer.offerId);

              // let productsArray = gfb.gfbVolumeDiscount.state.volumeBundleShopifyData;
              // let selectedProduct;
              // productsArray.forEach((product) => {
              //   if (product.id == productId) {
              //     selectedProduct = product;
              //   }
              // })

              // let args = {
              //   currentOffer,
              //   productPageHandle: selectedProduct.handle,
              //   qtyCount,
              //   tierCount,
              //   gfbVolumeDiscountVariantSelectionContainerBox,
              //   gfbVolumeDiscountVariantSelectionContainer
              // }
              // let gfbVolumeGenerateUIForContent = gfb.gfbVolumeDiscount.f.gfbVolumeDiscountPrepareTiersProductsUI(args);
              // gfbVolumeDiscountContainerBox = gfbVolumeGenerateUIForContent.cloneNode(true)

              let gfbVolumeDiscountTierPriceGeneratedUI = gfb.gfbVolumeDiscount.f.gfbVolumeDiscountPrepareTierPrice(currentOffer, tierCount);

              let gfbVolumeDiscountPriceSelectedContainer = document.querySelector(`.gfbVolumeDiscountPriceContainerByTier-${tierCount}_offerId-${offerId}`);
              gfbVolumeDiscountPriceSelectedContainer.innerHTML = gfbVolumeDiscountTierPriceGeneratedUI.innerHTML;
              gfb.gfbVolumeDiscount.f.registerEvents();

            }catch(err){
              gfb.utility.debugConsole("gfbVolumeDiscountVariantSelection click event-> ", err);
            }
          })
        })
      },
      eventListenerForGfbVolumeDiscountSwatchColorUI: function(){
        const elements = document.querySelectorAll(".gfbVolumeDiscountSwatchColorUI");
        elements.forEach((element) => {
          element.addEventListener("click", async function(event){
            try{
              event.preventDefault();
              event.stopPropagation();
              event.stopImmediatePropagation();
  
              gfb.utility.debugConsole("clicked volume discount swatch");
  
              let colorName = this.getAttribute("data-color-name");
              let productVariantIndex = this.getAttribute("data-product-variant-index");
              let tier = this.getAttribute("data-tier-count");
              let optionIndex = this.getAttribute("data-color-index");
              let offerId = this.getAttribute("data-offer-id");
              // stringify labelName to avoid any prodblem
              if (typeof colorName !== "string") {
                colorName = String(colorName);
              }
  
              let allCurrentSelectedOptionsForTiers = gfb.gfbVolumeDiscount.state.currentSelectedOptionsForTiers;
              let currentSelectedOptionsForTiers = allCurrentSelectedOptionsForTiers[offerId];
              let curentSelectedTier = currentSelectedOptionsForTiers[tier];
              let currentTierSelectedTierOptions = curentSelectedTier[productVariantIndex];
  
              let optionsArr = currentTierSelectedTierOptions.options;
              optionsArr[optionIndex] = colorName;
  
              gfb.gfbVolumeDiscount.f.gfbVolumeDiscountFindNewVariantForSelectedOption(event, colorName, offerId, productVariantIndex, tier);
              gfb.gfbVolumeDiscount.f.registerEvents();
            }catch(err){
              gfb.utility.debugConsole("eventListenerForGfbVolumeDiscountSwatchColorUI click event-> ", err);
            }
          })
        })
      },
      eventListenerForGfbVolumeDiscountLabelPillsUI: function(){
        const elements = document.querySelectorAll(".gfbVolumeDiscountLabelPillsUI");
        elements.forEach((element) => {
          element.addEventListener("click", async function(event){
            try{
              event.preventDefault();
              event.stopPropagation();
              event.stopImmediatePropagation();
  
              gfb.utility.debugConsole("clicked volume discount label");
  
              let labelName = this.getAttribute("data-label-name");
              let productVariantIndex = this.getAttribute("data-product-variant-index");
              let tier = this.getAttribute("data-tier-count");
              let optionIndex = this.getAttribute("data-label-index");
              let offerId = this.getAttribute("data-offer-id");
              // stringify labelName to avoid any prodblem
              if (typeof labelName !== "string") {
                labelName = String(labelName);
              }
  
              let allCurrentSelectedOptionsForTiers = gfb.gfbVolumeDiscount.state.currentSelectedOptionsForTiers;
              let currentSelectedOptionsForTiers = allCurrentSelectedOptionsForTiers[offerId];
              let curentSelectedTier = currentSelectedOptionsForTiers[tier];
              let currentTierSelectedTierOptions = curentSelectedTier[productVariantIndex];
  
              let optionsArr = currentTierSelectedTierOptions.options;
              optionsArr[optionIndex] = labelName;
  
              gfb.gfbVolumeDiscount.f.gfbVolumeDiscountFindNewVariantForSelectedOption(event, labelName, offerId, productVariantIndex, tier);
              gfb.gfbVolumeDiscount.f.registerEvents();
            }catch(err){
              gfb.utility.debugConsole("eventListenerForGfbVolumeDiscountLabelPillsUI click event-> ", err);
            }
          })
        })
      },
      eventListenerForGfbVolumeDiscountSingleDropdownSelector: function(){
        const elements = document.querySelectorAll(".gfbVolumeDiscountSingleDropdownSelector");
        elements.forEach((element) => {
          element.addEventListener("change", async function(event){
            try{
              event.preventDefault();
              event.stopPropagation();
              event.stopImmediatePropagation();
  
              gfb.utility.debugConsole("clicked volume discount dropdown");
              let labelName = event.target.value;
              let variantSelector = event.target;
              let selectedIndex = variantSelector.selectedIndex;
              let optionsSelector = variantSelector.options[selectedIndex];
              let productVariantIndex = optionsSelector.getAttribute("data-product-variant-index");
              let tier = optionsSelector.getAttribute("data-tier-count");
              let optionIndex = optionsSelector.getAttribute("data-label-index");
              let offerId = optionsSelector.getAttribute("data-offer-id");
              
              // stringify labelName to avoid any prodblem
              if (typeof labelName !== "string") {
                labelName = String(labelName);
              }
  
              let allCurrentSelectedOptionsForTiers = gfb.gfbVolumeDiscount.state.currentSelectedOptionsForTiers;
              let currentSelectedOptionsForTiers = allCurrentSelectedOptionsForTiers[offerId];
              let curentSelectedTier = currentSelectedOptionsForTiers[tier];
              let currentTierSelectedTierOptions = curentSelectedTier[productVariantIndex];
  
              let optionsArr = currentTierSelectedTierOptions.options;
              optionsArr[optionIndex] = labelName;
  
              gfb.gfbVolumeDiscount.f.gfbVolumeDiscountFindNewVariantForSelectedOption(event, labelName, offerId, productVariantIndex, tier);
              gfb.gfbVolumeDiscount.f.registerEvents();
            }catch(err){
              gfb.utility.debugConsole("eventListenerForGfbVolumeDiscountSingleDropdownSelector click event-> ", err);
            }
          })
        })
      },
      eventListenerForGfbVolumeDiscountQuantityInput: function(){
        const elements = document.querySelectorAll(".gfbVolumeDiscountQuantityInput");
        elements.forEach((element) => {
          element.addEventListener("change", async function(event){
            try{
              gfb.utility.debugConsole("variant quantity change event fired");
              let quantity = this.value;
              let productVariantIndex = this.getAttribute("data-product-variant-index");
              let tier = this.getAttribute("data-tier-count");
              let offerId = this.getAttribute("data-offer-id");
  
              let selectedVariant = gfb.gfbVolumeDiscount.state.currentSelectedVariantsForTiers[offerId][`tier-${tier}`][productVariantIndex];
              selectedVariant.qty = parseInt(quantity);
              gfb.utility.debugConsole({ quantity, productVariantIndex, tier, offerId });
            }catch(err){
              gfb.utility.debugConsole("eventListenerForGfbVolumeDiscountQuantityInput click event-> ", err);
            }
          })
        })
      },
      eventListenerForGfbVolumeDiscountsCustomFieldInput: function(){
        try{
          const elements = document.querySelectorAll(".gfbVolumeDiscountCustomFieldInput");
          elements.forEach((element) => {
            element.addEventListener("change", function(event){
              event.preventDefault();
              event.stopPropagation();
              event.stopPropagation();
              let indexInTier = element.getAttribute("data-product-variant-index");
              let offerId = element.getAttribute("data-offer-id");
              let tierCount = element.getAttribute("data-tier-count");
              let customField = event.target.value;

              gfb.gfbVolumeDiscount.state.currentSelectedVariantsForTiers[offerId][`tier-${tierCount}`][indexInTier].customField = customField;
            });
          });

        }catch(err){
          gfb.utility.debugConsole("eventListenerForGfbVolumeDiscountsCustomFieldInput click event-> ", err);
        }
      },
      setupInputBoxes: function(){
        try{
          let currentSelectedVariantsForTiers = gfb.gfbVolumeDiscount.state.currentSelectedVariantsForTiers;
          let offerIdsPresent = Object.keys(currentSelectedVariantsForTiers);
          for(let i=0; i< offerIdsPresent.length ; i++){
            let offerId = offerIdsPresent[i];
            let tiers = Object.keys(currentSelectedVariantsForTiers[offerId]);
            for(let j=0; j<tiers.length; j++){
              let tier = tiers[j];
              let indexKeys = Object.keys(currentSelectedVariantsForTiers[offerId][tier]);
              for(let k=0; k<indexKeys.length; k++){
                let indexInTier = indexKeys[k];
                let currentSelectedVariant = currentSelectedVariantsForTiers[offerId][tier][indexInTier];
                let customField = currentSelectedVariant?.customField || "";
                let customFieldInput = document.querySelector(`.gfbVolumeDiscountCustomFieldInput[data-product-variant-index="${indexInTier}"][data-offer-id="${offerId}"][data-tier-count="${j+1}"]`);
                if(customFieldInput){
                  customFieldInput.value = customField;
                }
              }
            }
          }

        }catch(err){
          gfb.utility.debugConsole("setupInputBoxes click event-> ", err);
        }
      },
      eventListenerForGfbVolumeNavigationPrevButton: function(){

        async function delay(time) {
          // write a function to delay the code
          return new Promise((resolve) => {
            setTimeout(() => {
              resolve();
            }, time);
          });
        }

        try{
          const elements = document.querySelectorAll(".gfbVolumeProductPrevButton");
          elements.forEach((element) => {
            element.addEventListener("click", async function(event){
              try{
                event.preventDefault();
                event.stopPropagation();
                event.stopImmediatePropagation();

                let selectedContainer = event.target.closest(".gfbVolumeDiscountVariantSelectionContainer");
                
                let counterContiner = selectedContainer.querySelector(".gfbVolumeDiscountProductCounterContainer");
                counterContiner.classList.add("gfbWiggling");
                setTimeout(() => {
                  counterContiner.classList.remove('gfbWiggling');
                }, 700);

                selectedContainer = selectedContainer.querySelector(".gfbVolumeDiscountTierContainer");
                selectedContainer.classList.add("gfb-sliding-toLeft");
                setTimeout(() => {
                  selectedContainer.classList.remove('gfb-sliding-toLeft');
                }, 700);
                
                await delay(500);

                let parentEle = event.target.closest(".gfbVolumeProductNavigator");
                let offerId = parentEle.getAttribute("data-offer-id");
                let tierCount = parentEle.getAttribute("data-tier-count");
                let prodCount = parentEle.getAttribute("data-product-count");
                let selectedProductIndex = gfb.gfbVolumeDiscount.state.currentSelectedProductCount[offerId][`tier-${tierCount}`];
                let currentOffer = gfb.settings.volumeDiscountData.filter((volumeDiscount) => volumeDiscount.offerId == offerId || volumeDiscount.metafieldData.offerId == offerId)[0];
                
                if(selectedProductIndex == 0){
                  selectedProductIndex = prodCount-1;
                }else{
                  selectedProductIndex = selectedProductIndex - 1;
                }

                gfb.gfbVolumeDiscount.state.currentSelectedProductCount[offerId][`tier-${tierCount}`] = selectedProductIndex;

                let gfbVolumeDiscountVariantSelectionContainerBox = document.createElement("div");
                gfbVolumeDiscountVariantSelectionContainerBox.classList.add(`gfbVolumeDiscountVariantSelectionContainerBox`, `gfbVolumeDiscountVariantSelectionContainerBoxToggle-${tierCount}_offerId-${currentOffer.offerId}`);
                gfbVolumeDiscountVariantSelectionContainerBox.style.display = "none";
      
                let gfbVolumeDiscountVariantSelectionContainer = document.createElement("div");
                gfbVolumeDiscountVariantSelectionContainer.classList.add("gfbVolumeDiscountVariantSelectionContainer");
                gfbVolumeDiscountVariantSelectionContainer.setAttribute("data-offer-id", currentOffer.offerId);

                let qtyCount = gfb.gfbVolumeDiscount.state.currentSelectedTiers[`${offerId}`].qtyLabel;
                qtyCount = parseInt(qtyCount);
                let gfbVolumeDiscountPrepareTiersProductsUIArgs = {
                  currentOffer,
                  productPageHandle: currentOffer.selectedProducts[0].handle,
                  qtyCount: prodCount,
                  tierCount,
                  gfbVolumeDiscountVariantSelectionContainerBox,
                  gfbVolumeDiscountVariantSelectionContainer,
                };
      
                let gfbVolumeDiscountTierPriceGeneratedUI = gfb.gfbVolumeDiscount.f.gfbVolumeDiscountPrepareTierPrice(currentOffer, tierCount);
                let gfbVolumeDiscountGeneratedUI = gfb.gfbVolumeDiscount.f.gfbVolumeDiscountPrepareTiersProductsUI(
                  gfbVolumeDiscountPrepareTiersProductsUIArgs
                );
      
                let gfbVolumeDiscountPriceSelectedContainer = document.querySelector(`.gfbVolumeDiscountPriceContainerByTier-${tierCount}_offerId-${currentOffer.offerId}`);
                let gfbVolumeDiscountSelectedContainer = document.querySelector(`.gfbVolumeDiscountVariantSelectionContainerBoxToggle-${tierCount}_offerId-${offerId}`);
      
                gfbVolumeDiscountPriceSelectedContainer.innerHTML = gfbVolumeDiscountTierPriceGeneratedUI.innerHTML;
                gfbVolumeDiscountSelectedContainer.innerHTML = gfbVolumeDiscountGeneratedUI.innerHTML;
                gfb.gfbVolumeDiscount.f.registerEvents();
              }catch(err){
                gfb.utility.debugConsole("eventListenerForGfbVolumeNavigationPrevButton click listener event-> ", err);
              }
            })
          })

        }catch(err){
          gfb.utility.debugConsole("eventListenerForGfbVolumeNavigationPrevButton click event-> ", err);
        }
      },
      eventListenerForGfbVolumeNavigationNextButton: function(){

        async function delay(time) {
          // write a function to delay the code
          return new Promise((resolve) => {
            setTimeout(() => {
              resolve();
            }, time);
          });
        }

        try{
          const elements = document.querySelectorAll(".gfbVolumeProductNextButton");
          elements.forEach((element) => {
            element.addEventListener("click", async function(event){
              try{
                event.preventDefault();
                event.stopPropagation();
                event.stopImmediatePropagation();

                let selectedContainer = event.target.closest(".gfbVolumeDiscountVariantSelectionContainer");
                let counterContiner = selectedContainer.querySelector(".gfbVolumeDiscountProductCounterContainer");
                counterContiner.classList.add("gfbWiggling");
                setTimeout(() => {
                  counterContiner.classList.remove('gfbWiggling');
                }, 700);

                selectedContainer = selectedContainer.querySelector(".gfbVolumeDiscountTierContainer");

                selectedContainer.classList.add("gfb-sliding-toRight");
                setTimeout(() => {
                  selectedContainer.classList.remove('gfb-sliding-toRight');
                }, 700);
                
                await delay(500);

                let parentEle = event.target.closest(".gfbVolumeProductNavigator");
                let offerId = parentEle.getAttribute("data-offer-id");
                let tierCount = parentEle.getAttribute("data-tier-count");
                let prodCount = parentEle.getAttribute("data-product-count");
                let selectedProductIndex = gfb.gfbVolumeDiscount.state.currentSelectedProductCount[offerId][`tier-${tierCount}`];
                let currentOffer = gfb.settings.volumeDiscountData.filter((volumeDiscount) => volumeDiscount.offerId == offerId || volumeDiscount.metafieldData.offerId == offerId)[0];
                
                selectedProductIndex++;
                prodCount = parseInt(prodCount);
                if(selectedProductIndex == prodCount){
                  selectedProductIndex = 0;
                }

                gfb.gfbVolumeDiscount.state.currentSelectedProductCount[offerId][`tier-${tierCount}`] = selectedProductIndex;

                let gfbVolumeDiscountVariantSelectionContainerBox = document.createElement("div");
                gfbVolumeDiscountVariantSelectionContainerBox.classList.add(`gfbVolumeDiscountVariantSelectionContainerBox`, `gfbVolumeDiscountVariantSelectionContainerBoxToggle-${tierCount}_offerId-${currentOffer.offerId}`);
                gfbVolumeDiscountVariantSelectionContainerBox.style.display = "none";
      
                let gfbVolumeDiscountVariantSelectionContainer = document.createElement("div");
                gfbVolumeDiscountVariantSelectionContainer.classList.add("gfbVolumeDiscountVariantSelectionContainer");
                gfbVolumeDiscountVariantSelectionContainer.setAttribute("data-offer-id", currentOffer.offerId);

                let qtyCount = gfb.gfbVolumeDiscount.state.currentSelectedTiers[`${offerId}`].qtyLabel;
                qtyCount = parseInt(qtyCount);
                let gfbVolumeDiscountPrepareTiersProductsUIArgs = {
                  currentOffer,
                  productPageHandle: currentOffer.selectedProducts[0].handle,
                  qtyCount: prodCount,
                  tierCount,
                  gfbVolumeDiscountVariantSelectionContainerBox,
                  gfbVolumeDiscountVariantSelectionContainer,
                };
      
                let gfbVolumeDiscountTierPriceGeneratedUI = gfb.gfbVolumeDiscount.f.gfbVolumeDiscountPrepareTierPrice(currentOffer, tierCount);
                let gfbVolumeDiscountGeneratedUI = gfb.gfbVolumeDiscount.f.gfbVolumeDiscountPrepareTiersProductsUI(
                  gfbVolumeDiscountPrepareTiersProductsUIArgs
                );
      
                let gfbVolumeDiscountPriceSelectedContainer = document.querySelector(`.gfbVolumeDiscountPriceContainerByTier-${tierCount}_offerId-${currentOffer.offerId}`);
                let gfbVolumeDiscountSelectedContainer = document.querySelector(`.gfbVolumeDiscountVariantSelectionContainerBoxToggle-${tierCount}_offerId-${offerId}`);
      
                gfbVolumeDiscountPriceSelectedContainer.innerHTML = gfbVolumeDiscountTierPriceGeneratedUI.innerHTML;
                gfbVolumeDiscountSelectedContainer.innerHTML = gfbVolumeDiscountGeneratedUI.innerHTML;
                gfb.gfbVolumeDiscount.f.registerEvents();
              }catch(err){
                gfb.utility.debugConsole("eventListenerForGfbVolumeNavigationNextButton click listener event-> ", err);
              }
            })
          })

        }catch(err){
          gfb.utility.debugConsole("eventListenerForGfbVolumeNavigationNextButton click event-> ", err);
        }
      },
      registerEvents: function () {
        gfb.utility.debugConsole("registering events for gfbVolumeDiscount");

        gfb.gfbVolumeDiscount.f.eventListenerForGfbVolumeDiscountWidgetOfferAddToCartButton();
        gfb.gfbVolumeDiscount.f.eventListenerForGfbVolumeDiscountLabelContainer();
        gfb.gfbVolumeDiscount.f.eventListenerForGfbVolumeDiscountVariantSelection();
        gfb.gfbVolumeDiscount.f.eventListenerForGfbVolumeDiscountSwatchColorUI();
        gfb.gfbVolumeDiscount.f.eventListenerForGfbVolumeDiscountLabelPillsUI();
        gfb.gfbVolumeDiscount.f.eventListenerForGfbVolumeDiscountSingleDropdownSelector();
        gfb.gfbVolumeDiscount.f.eventListenerForGfbVolumeDiscountQuantityInput();
        gfb.gfbVolumeDiscount.f.eventListenerForGfbVolumeDiscountsCustomFieldInput();
        gfb.gfbVolumeDiscount.f.eventListenerForGfbVolumeNavigationPrevButton();
        gfb.gfbVolumeDiscount.f.eventListenerForGfbVolumeNavigationNextButton();
        gfb.gfbVolumeDiscount.f.setupInputBoxes();
      
        gfb.utility.debugConsole(' ------ ');

      },
    },
  },
  gfbOverWriteBundleDisplayDataInCart: {
    init: function (settings, parent) {
      try {
        gfb.gfbOverWriteBundleDisplayDataInCart.initialize(settings, parent);
      } catch (error) {
        gfb.utility.debugConsole("error in gfbOverWriteBundleDisplayDataInCart init -> ", error);
      }
    },

    initialize: function (settings, parent) {
      try {
        //queryAll the items on the cart page; figure out how many Bundles are there

        // 1;
        let cartPageSelector = gfb.settings.app.cartPageSelector;
        let bundleImageSelector = gfb.settings.app.bundleImageSelector;
        let itemTitleSelector = gfb.settings.app.itemTitleSelector;
        let bundleCartRrepresentationObj = gfb.settings.app.bundleCartRrepresentationObj;
        let bundleStringArray = gfb.gfbOverWriteBundleDisplayDataInCart.f.bundleStringInitialization(bundleCartRrepresentationObj);

        // ------------------------
        // query required data on cart page

        if (bundleCartRrepresentationObj.type == "OVERWRITE_LINE_ITEM") {
          let renderItemProperyObject = bundleCartRrepresentationObj.overwriteLineItemObj;
          if (renderItemProperyObject.renderItemsNameAsProperty == true) {
            let selectors = {
              cartPageSelector,
              bundleImageSelector,
              itemTitleSelector,
            };
            gfb.gfbOverWriteBundleDisplayDataInCart.f.renderItemsNameAsProperty(selectors, bundleStringArray);
            // gfb.gfbOverWriteBundleDisplayDataInCart.f.renderItemsNameAsVirtually(selectors);
          } else if (renderItemProperyObject.renderItemsNameVirtually == true) {
            let selectors = {
              cartPageSelector,
              bundleImageSelector,
              itemTitleSelector,
            };
            gfb.gfbOverWriteBundleDisplayDataInCart.f.renderItemsNameAsVirtually(selectors);
          } else {
            let selectors = {
              cartPageSelector,
              bundleImageSelector,
              itemTitleSelector,
            };
            let mode = "CUSTOMIZED";
            gfb.gfbOverWriteBundleDisplayDataInCart.f.renderItemsNameAsCustomized(selectors, mode);
          }
        } else if (bundleCartRrepresentationObj.type == "NEW_BUNDLE_UI") {
        }

        // });

        // bundleData1= {}, bundleData2 = {}, bundleData3 = {};
        //map bundleNames with their data; [{bundleName: bundleData1}, {bundleName: bundleData2}, {bundleName: bundleData3}]

        // update the UI based on that information
        // update the image.
        // update the title
        // change the html in such a way that it shows
      } catch (error) {
        gfb.utility.debugConsole("error in gfbOverWriteBundleDisplayDataInCart initialize -> ", error);
      }
    },

    state: {},
    f: {
      gfbOverWriteBundleDisplayDataInCartReplaceImageAndTitle: function(currentActiveElement, matchingOffer, selectionOptions){
        try{
          // let imageSrc =
          // matchingOffer?.uploadedImageSrc || "https://echo-fixed-bundle-app9.s3.us-east-2.amazonaws.com/public/bundlefallback.webp";
          // let bundleImage = currentActiveElement.querySelector(selectionOptions.bundleImageSelector);
          // // currentActiveElement.find(selectionOptions.bundleImageSelector).attr("src", imageSrc);
          // if (bundleImage) {
          //   bundleImage.setAttribute('src', imageSrc);
          // }


          let imageSrc = matchingOffer?.uploadedImageSrc || false;
          let bundleImage = currentActiveElement.querySelector(selectionOptions.bundleImageSelector);
          if (imageSrc && bundleImage) {
            bundleImage.setAttribute('src', imageSrc);
          }

          // title for cartItem
          let offerTitle = matchingOffer?.title;
          // currentActiveElement.find(selectionOptions.itemTitleSelector).html(offerTitle);
          let itemTitleElement = currentActiveElement.querySelector(selectionOptions.itemTitleSelector);
          if (itemTitleElement) {
              itemTitleElement.innerHTML = offerTitle;
          }
        }catch(err){
          gfb.utility.debugConsole("error in gfbOverWriteBundleDisplayDataInCartReplaceImageAndTitle => ", err);
        }
      },
      gfbOverWriteBundleDisplayDataInCartWriteBundleName: function (parentOfContents, bundleString, offerId, bundleNameFlag){
        try{
          let inheritedContent;

          let bundleName;
          if (offerId.substring(0, 3) == "FBT"){
            // loop though settings for this id and get offer.title;
            let data = gfb.settings.frequentBoughtData;
            for(let i=0; i<data.length; i++){
              let offer = data[i];
              if(offer.offerId == offerId){
                bundleName = `Bundle: ${offer.title}`;
              }
            }
            
          }else if(offerId.substring(0, 3) == "VOL"){
            let data = gfb.settings.volumeDiscountData;
            for(let i=0; i<data.length; i++){
              let offer = data[i];
              if(offer.offerId == offerId){
                bundleName = `Bundle: ${offer.title}`;
              }
            }
          }
          let headerString = "Items:"
          let cartDataWithItemComponents = window.cartDataWithItemComponents;
          let bufferArray = [];

          // Loop through each item_component
          for (let i = 0; i < cartDataWithItemComponents.length; i++) {
            const item_components = cartDataWithItemComponents[i].item_components;
            if (item_components) {
              // Loop through each item_component's properties
              for (let j = 0; j < item_components.length; j++) {
                const item_component = item_components[j];
                // Check if the item_component has "_flyBundles:OfferId" property and matches offerId
                if (item_component.properties["_flyBundles:OfferId"].includes(offerId)) {
                  // Push the item_component to bufferArray
                  let text = item_component.quantity + ` x ` + item_component.title + `<br/>`;
                  bufferArray.push(text);
                }
              }
            }
          }
          const resultString = bufferArray.join("\n");
          inheritedContent = resultString;
          // let contentSection = parentOfContents || ""
          let content = `
              <br/>
            <div class='gfbCartPageBundleContentsCustomized'>`;

            // if bundleNameFlag is true, then add bundleName to the content
            if(bundleNameFlag){
              content +=`<div class='gfbCartPageBundleContentsBundleName'>${bundleName}<div>
              <br/>`
            }
              

              if(bundleNameFlag){
                content += `<div class='gfbCartPageBundleContentsHeading'>${headerString}<div>
                  <br/>`
                content += `<div class='gfbCartPageBundleContentsContent'>${inheritedContent}</div>
                <div> `;
              }

              

          let gfbContent = document.createElement("div");
          gfbContent.innerHTML = content;

          return gfbContent;

        }catch(err){
          gfb.utility.debugConsole("error in gfbOverWriteBundleDisplayDataInCartWriteBundleName => ", err);
        }
      },
      bundleStringInitialization: function (bundleCartRrepresentationObj) {
        try {
          let bundleStringArray = [];
          let bundleCartType = bundleCartRrepresentationObj.type;
          let overwriteLineItemObj = bundleCartRrepresentationObj.overwriteLineItemObj;

          if (overwriteLineItemObj.renderItemsNameAsProperty == true) {
            let volumeBundles = gfb.settings.volumeDiscountData;
            let frequentBoughtBundles = gfb.settings.frequentBoughtData;
            bundleStringArray.push("Items");
            for (let i = 0; i < volumeBundles.length; i++) {
              let bundle = volumeBundles[i];
              let cartPageSelectionString_VOLB = bundle.cartPageSelectionString_VOLB;

              if (cartPageSelectionString_VOLB) {
                bundleStringArray.push(cartPageSelectionString_VOLB);
              }
            }
            for (let i = 0; i < frequentBoughtBundles.length; i++) {
              let bundle = frequentBoughtBundles[i];
              let cartPageSelectionString_FBT = bundle.cartPageSelectionString_FBT;

              if (cartPageSelectionString_FBT) {
                bundleStringArray.push(cartPageSelectionString_FBT);
              }
            }
          } else if (overwriteLineItemObj.renderItemsNameVirtually == true) {
          }

          return bundleStringArray;
        } catch (err) {
          gfb.utility.debugConsole("error in bundleStringInitialization => ", err);
        }
      },
      prepareUI: function (filteredElements, currentActiveElement, selectionOptions, bundleString, mode) {
        try {
          let bundleCartRepresentationObj = gfb.settings.app.bundleCartRrepresentationObj;
          let parentElement = filteredElements.parentNode;
          let matchingOffer = gfb.gfbOverWriteBundleDisplayDataInCart.f.fetchOfferFromUI(filteredElements);
          if(!matchingOffer){
            return parentElement;
          }
          let offerId = matchingOffer.offerId;
          // change image of bundle;

          if (!matchingOffer.widgetDisplayOptions.parentProduct) {
            gfb.gfbOverWriteBundleDisplayDataInCart.f.gfbOverWriteBundleDisplayDataInCartReplaceImageAndTitle(currentActiveElement, matchingOffer, selectionOptions);
          }

          // let bundleContents = gfb.utility.findElementsContainingText('Items:' , currentActiveElement, '*');
          // // currentActiveElement.querySelectorAll(":contains('Items:')");

          // // Filter the bundleContents to exclude those with child elements
          // let filteredBundleContentElements = Array.from(bundleContents).filter(function(element) {
          //     return !element.querySelector("*");
          // });
          
          // // Get the parent element of the filtered bundle content elements
          // let parentElementForContentSection = filteredBundleContentElements[0]?.parentNode;
          
          // // Get the text content of the parent element
          // let parentOfContents = parentElementForContentSection ? parentElementForContentSection.textContent.trim() : '';

          // console.log("contents => \n", parentOfContents);
          // let bundleNameFlag = false;
          // let bundleNameSection = gfb.gfbOverWriteBundleDisplayDataInCart.f.gfbOverWriteBundleDisplayDataInCartWriteBundleName(
          //   parentOfContents,
          //   selectionOptions.bundleString,
          //   offerId,
          //   bundleNameFlag
          // );

          // let clonedElement = bundleNameSection.cloneNode(true);

          // if (bundleCartRepresentationObj.type === "OVERWRITE_LINE_ITEM") {
          //   let isRenderAsProperty = bundleCartRepresentationObj.overwriteLineItemObj.renderItemsNameAsProperty;
          //   if (isRenderAsProperty) {
          //       // Assuming currentActiveElement is the parent element
          //       let bundleContentArray = gfb.utility.findElementsContainingText('Items:' , currentActiveElement, '*')
          //       let bundleContents = bundleContentArray.forEach(function(element) {
          //           if (!element.querySelector("*")) {
          //               // element.innerHTML = clonedElement.outerHTML;
          //           }
          //       });
          //   }
          // }

          return parentElement;
        } catch (err) {
          gfb.utility.debugConsole(" error in prepareUI of gfbOverwriteBundleDisplayInCart ", err);
        }
      },
      prepareUIForVirtually: function (filteredElements, currentActiveElement, selectionOptions, bundleString, mode) {
        try {
          let cartDataWithItemComponents = window.cartDataWithItemComponents;
          let parentElement = filteredElements.parentNode;
          let matchingOffer = gfb.gfbOverWriteBundleDisplayDataInCart.f.fetchOfferFromUI(filteredElements);
          // change image of bundle;
          gfb.gfbOverWriteBundleDisplayDataInCart.f.gfbOverWriteBundleDisplayDataInCartReplaceImageAndTitle(currentActiveElement, matchingOffer, selectionOptions);

          // currentActiveElement.querySelectorAll(":contains('This Bundle Contains:')");
          

          return parentElement;
        } catch (err) {
          gfb.utility.debugConsole(" error in prepareUI of gfbOverwriteBundleDisplayInCart ", err);
        }
      },
      prepareUIForNewBundleUI: function (dataMap) {
        try {
        } catch (err) {
          gfb.utility.debugConsole("error in prepareUIForNewBundleUI ", err);
        }
      },
      renderItemParentFunction: function(selectors , callback){
        try{

          let { cartPageSelector, bundleImageSelector, itemTitleSelector } = selectors;
          let budleItemsInCart = [];
          let bundleStringArray = ['OfferId'];
          bundleStringArray.forEach(function (bundleString) {

            let matchingElements = gfb.utility.findElementsContainingText(bundleString, document, cartPageSelector);

            let modulatedMatchinElements = gfb.utility.findElementsContainingText(bundleString, document, ".gfbBundlesInCart");

            let isCartOverWritten = matchingElements.length != modulatedMatchinElements.length ? 1 : 0;
            if (matchingElements.length > 0 && isCartOverWritten) {
              gfb.utility.debugConsole("Found element with string: " + bundleString);
              budleItemsInCart.push(matchingElements);
              // get closeset cartpage selector and push it in array;

              let parentElements = [];

              // Iterate over matching elements
              matchingElements.forEach(function (ele) {
                // adding specialClass to identify all bundleCartItems
                ele.classList.add("gfbBundlesInCart");

                // Find elements containing the text "Bundle Name:"
                let bundleNameElements = gfb.utility.findElementsContainingText(bundleString , ele, '*');
                
                let filteredElements = Array.from(bundleNameElements).filter(function(element) {
                    return !element.querySelector("*");
                });
                // Check if any "Bundle Name:" element is found
                if (filteredElements.length > 0) {
                  // Get the parent element of the "Bundle Name:" element
                  let currentActiveElement = ele;
                  let selectionOptions = {
                    bundleImageSelector: bundleImageSelector,
                    itemTitleSelector: itemTitleSelector,
                    bundleString: bundleString,
                  };
                  
                  filteredElements.forEach((ele) => {
                    let parentElement = callback(
                      ele,
                      currentActiveElement,
                      selectionOptions,
                      bundleString,
                      mode=undefined
                    );

                    parentElements.push(parentElement);
                  })

                }
              });
            }
          });
          gfb.utility.debugConsole("budleItemsInCart ", budleItemsInCart);

        }catch(err){
          gfb.utility.debugConsole("error in renderItemParentFunction ", err);
        }
      },
      renderItemsNameAsPropertyUpdated: function (selectors) {
        try{
          let { cartPageSelector, bundleImageSelector, itemTitleSelector } = selectors;

        }catch(err){
          gfb.utility.debugConsole("error in renderItemsNameAsPropertyUpdated ", err);
        }
      },
      renderItemsNameAsProperty: function (selectors) {
        try {
          let { cartPageSelector, bundleImageSelector, itemTitleSelector } = selectors;
          let budleItemsInCart = [];
          let bundleStringArray = ['OfferId'];
          bundleStringArray.forEach(function (bundleString) {

            let matchingElements = gfb.utility.findElementsContainingText(bundleString, document, cartPageSelector);

            let modulatedMatchinElements = gfb.utility.findElementsContainingText(bundleString, document, ".gfbBundlesInCart");

            // Check if any matching elements are found
            let isCartOverWritten = matchingElements.length != modulatedMatchinElements.length ? 1 : 0;
            if (matchingElements.length > 0 && isCartOverWritten) {
              gfb.utility.debugConsole("Found element with string: " + bundleString);
              budleItemsInCart.push(matchingElements);
              // get closeset cartpage selector and push it in array;

              let parentElements = [];

              // Iterate over matching elements
              matchingElements.forEach(function (ele) {
                // adding specialClass to identify all bundleCartItems
                ele.classList.add("gfbBundlesInCart");

                // Find elements containing the text "Bundle Name:"
                let bundleNameElements = gfb.utility.findElementsContainingText(bundleString , ele, '*');
                
                let filteredElements = Array.from(bundleNameElements).filter(function(element) {
                    return !element.querySelector("*");
                });
                // Check if any "Bundle Name:" element is found
                if (filteredElements.length > 0) {
                  // Get the parent element of the "Bundle Name:" element
                  let currentActiveElement = ele;
                  let selectionOptions = {
                    bundleImageSelector: bundleImageSelector,
                    itemTitleSelector: itemTitleSelector,
                    bundleString: bundleString,
                  };
                  
                  filteredElements.forEach((ele) => {
                    let parentElement = gfb.gfbOverWriteBundleDisplayDataInCart.f.prepareUI(
                      ele,
                      currentActiveElement,
                      selectionOptions,
                      bundleString,
                      mode=undefined
                    );

                    parentElements.push(parentElement);
                  })

                }
              });
            }else{
              // there have been some new updates in cart transformation which can use here, without disturbing existing users;

            }
          });
          gfb.utility.debugConsole("budleItemsInCart ", budleItemsInCart);
        } catch (err) {
          gfb.utility.debugConsole("error in renderItemsNameAsProperty ", err);
        }
      },
      renderItemsNameAsVirtually: function (selectors) {
        try {
          let bundleStringArray  = [`OfferId`];
          let { cartPageSelector, bundleImageSelector, itemTitleSelector } = selectors;
          let budleItemsInCart = [];

          bundleStringArray.forEach(function (bundleString) {
            let matchingElements = gfb.utility.findElementsContainingText(bundleString, document, cartPageSelector);
          
            let modulatedMatchinElements = gfb.utility.findElementsContainingText(bundleString, document, '.gfbBundlesInCart');
  
            let isCartOverWritten = matchingElements.length != modulatedMatchinElements.length ? 1 : 0;
            if (matchingElements.length > 0 && isCartOverWritten) {
              gfb.utility.debugConsole("Found element with string: " + bundleString);
              budleItemsInCart.push(matchingElements);
              // get closeset cartpage selector and push it in array;
  
              let parentElements = [];
  
              // Iterate over matching elements
              matchingElements.forEach(function (ele) {
                // adding specialClass to identify all bundleCartItems
                ele.classList.add("gfbBundlesInCart");
  
                let bundleNameElements = gfb.utility.findElementsContainingText(bundleString , ele, '*');
                // this.querySelectorAll(searchString);
  
                // Filter the bundleNameElements to exclude those with child elements
                let filteredElements = Array.from(bundleNameElements).filter(function(element) {
                    return !element.querySelector("*");
                });
  
                if (filteredElements.length > 0) {
                  // Get the parent element of the "Bundle Name:" element
                  let currentActiveElement = ele;
                  let selectionOptions = {
                    bundleImageSelector: bundleImageSelector,
                    itemTitleSelector: itemTitleSelector,
                    bundleString: bundleString,
                  };
                  filteredElements.forEach((ele) => {
                    let parentElement = gfb.gfbOverWriteBundleDisplayDataInCart.f.prepareUIForVirtually(
                      ele,
                      currentActiveElement,
                      selectionOptions,
                      bundleString,
                      mode=undefined
                    );
    
                    parentElements.push(parentElement);
                  })
                }
              });
            }
          })
    
        } catch (err) {
          gfb.utility.debugConsole("error in renderItemsNameAsVirtually ", err);
        }
      },
      renderItemsNameAsCustomized: function (selectors, mode) {
        try {
          let bundleStringArray = [`OfferId`];
          let { cartPageSelector, bundleImageSelector, itemTitleSelector } = selectors;
          let budleItemsInCart = [];

          bundleStringArray.forEach(function (bundleString) {
            let matchingElements =  gfb.utility.findElementsContainingText(bundleString, document, cartPageSelector);
          
            let modulatedMatchinElements =  gfb.utility.findElementsContainingText(bundleString, document, '.gfbBundlesInCart');
          
            let isCartOverWritten = matchingElements.length != modulatedMatchinElements.length ? 1 : 0;
            if (matchingElements.length > 0 && isCartOverWritten) {
              gfb.utility.debugConsole("Found element with string: " + bundleString);
              budleItemsInCart.push(matchingElements);
              // get closeset cartpage selector and push it in array;

              let parentElements = [];

              // Iterate over matching elements
              matchingElements.forEach(function (ele) {
                // adding specialClass to identify all bundleCartItems
                ele.classList.add("gfbBundlesInCart");

                // Find elements containing the text "Bundle Name:"
                let searchString = ":contains('" + bundleString + "')";
                let bundleNameElements =  gfb.utility.findElementsContainingText(bundleString, ele, '*');
                // this.querySelectorAll(searchString);

                // Filter the bundleNameElements to exclude those with child elements
                let filteredElements = Array.from(bundleNameElements).filter(function(element) {
                    return !element.querySelector("*");
                });

                if (filteredElements.length > 0) {
                  // Get the parent element of the "Bundle Name:" element
                  let currentActiveElement = ele;
                  let selectionOptions = {
                    bundleImageSelector: bundleImageSelector,
                    itemTitleSelector: itemTitleSelector,
                    bundleString: bundleString,
                  };
                  filteredElements.forEach((filteredEle) => {
                    let parentElement = gfb.gfbOverWriteBundleDisplayDataInCart.f.prepareUIForCustomized(
                      filteredEle,
                      currentActiveElement,
                      selectionOptions,
                      bundleString,
                      mode
                    );
    
                    parentElements.push(parentElement);
                  })
                }
              });
            }
          })
          
        } catch (error) {
          gfb.utility.debugConsole("error in renderItemsNameAsCustomized => ", error);
        }
      },
      prepareUIForCustomized: function (filteredElements, currentActiveElement, selectionOptions, bundleString, mode) {
        try {
          let bundleCartRepresentationObj = gfb.settings.app.bundleCartRrepresentationObj;
          let contentString = `Items:`;
          let parentElement = filteredElements.parentNode;

          // Get the text content of the parent element and trim any leading/trailing whitespace
          let matchingOffer = gfb.gfbOverWriteBundleDisplayDataInCart.f.fetchOfferFromUI(filteredElements);
          if(!matchingOffer){
            return parentElement;
          }
          // change image of bundle;
          gfb.gfbOverWriteBundleDisplayDataInCart.f.gfbOverWriteBundleDisplayDataInCartReplaceImageAndTitle(currentActiveElement, matchingOffer, selectionOptions);

          // offer id
          let offerId = matchingOffer.offerId;

          let bundleContents =  gfb.utility.findElementsContainingText('This Bundle Contains:', currentActiveElement, '*');
          
          let filteredBundleContentElements = Array.from(bundleContents).filter(function(element) {
              return !element.querySelector("*");
          });

          let parentElementForContentSection = filteredBundleContentElements[0]?.parentNode;

          let parentOfContents = parentElementForContentSection ? parentElementForContentSection.textContent.trim() : '';

          let productList = [];
          let bundleNameFlag = true;
          let bundleNameSection = gfb.gfbOverWriteBundleDisplayDataInCart.f.gfbOverWriteBundleDisplayDataInCartWriteBundleName(
            parentOfContents,
            selectionOptions.bundleString,
            offerId,
            bundleNameFlag
          );

          let clonedElement = bundleNameSection.cloneNode(true);

          if (bundleCartRepresentationObj.type == "OVERWRITE_LINE_ITEM") {
            let isRenderAsCustomized = bundleCartRepresentationObj.overwriteLineItemObj.renderItemNameCustomized;
            if (isRenderAsCustomized) {

              let searchString = ":contains('" + bundleString + "')";

              let elements =  gfb.utility.findElementsContainingText(bundleString, currentActiveElement, '*');

              let filteredElements = Array.from(elements).filter(function(element) {
                  return !element.querySelector("*");
              });

              filteredElements.forEach(function(element) {
                  let parentElement = element.parentNode;
                  parentElement.appendChild(clonedElement.cloneNode(true));
              });
            }
          }


          return parentElement;
        } catch (error) {
          gfb.utility.debugConsole("error in prepareUIForCustomized => ", error);
        }
      },
      renderNewBundleUI: function () {
        try {
          let productList = [];
          let offerIdMapWithContents = {};
          let cartDataWithItemComponents = window.cartDataWithItemComponents;
          // Iterate through cartDataWithItemComponents using for loop
          for (let i = 0; i < cartDataWithItemComponents.length; i++) {
            // Check if the current object has item_components
            let cartItem = cartDataWithItemComponents[i];
            if (cartItem.item_components) {
              // Iterate through item_components and append product_title to the buffer
              if (item_components.length > 1) {
                let tempData = item_components[0];
                let offerId = tempData.properties["_flyBundles:OfferId"];
                offerIdMapWithContents[offerId] = [];

                for (let j = 0; j < cartItem.item_components.length; j++) {
                  let currentItem_component = cartItem.item_components[j];
                  if (currentItem_component.product_title) {
                    let item = currentItem_component;
                    offerIdMapWithContents[offerId].push(item);
                    productList.push(currentItem_component.product_title);
                  }
                }
              }
            }
          }

          // prepareNewBundleUI
          // insertIntoPageWrapper;
        } catch (err) {
          gfb.utility.debugConsole("err in renderNewBundleUI ", err);
        }
      },
      fetchOfferFromUI: function(filteredElements, bundleString){
        try{
          let parentElement = filteredElements.parentNode;
          let parentTextContent = parentElement.textContent.trim();
          let searchString = bundleString || `OfferId` + ':';
          let OfferId = parentTextContent.replace(searchString, '').trim();

          // console.log("text content from parent => ", OfferId);
          // Push the parent element into the array

          // get information from OfferId;
          let volOffers = gfb.settings.volumeDiscountData;
          let matchingOffer = volOffers.find((offer) => offer.offerId == OfferId);
          if (!matchingOffer) {
            let fbtOffers = gfb.settings.frequentBoughtData;
            matchingOffer = fbtOffers.find((offer) => offer.offerId == OfferId);
          }

          if(!matchingOffer){
            matchingOffer = null;
          }

          return matchingOffer;

        }catch(err){
          gfb.utility.debugConsole("error in fetchOfferIdFromUI => ", err);
        }
      }
    },
  },
  gfbCustomHomePageWrapper: {
    init: async function(settings, parent){
      try{
        await gfb.gfbCustomHomePageWrapper.initialize(settings, parent);
      }catch(error){
        gfb.utility.debugConsole("error in gfbCustomHomePageWrapper init -> ", error);
      }

    },
    initialize: async function(settings, parent) {
      try{
        let blockSettings = window?.blockSettings || null;
        let bundleId = blockSettings?.bundle_id || `FBT-108096`;
        // remove all bundles that are not required
        settings = gfb.gfbCustomHomePageWrapper.f.removeUnantedBundles(bundleId)
        gfb.settings = JSON.parse(JSON.stringify(settings));
        let bundleType = gfb.gfbCustomHomePageWrapper.f.getBundleType(bundleId);
        if(bundleType == "VOLUME_DISCOUNT"){
          await gfb.gfbVolumeDiscount.init(settings, parent);
        }else if(bundleType == "FREQUENT_BOUGHT"){
          let bundleDetails = gfb.gfbCustomHomePageWrapper.f.findBundleDetailsFromId(bundleId);
          let activeProductHandle = gfb.gfbCustomHomePageWrapper.f.getProductPageHandleForBundle(bundleDetails);
          await gfb.gfbFrequentBought.init(settings, parent);
        }
        let bundleDetails = gfb.gfbCustomHomePageWrapper.f.findBundleDetailsFromId(bundleId);
        let activeProductHandle = gfb.gfbCustomHomePageWrapper.f.getProductPageHandleForBundle(bundleDetails);

        if(activeProductHandle){
          let bundleUI;
          if(bundleType == "VOLUME_DISCOUNT"){
            bundleUI = gfb.gfbVolumeDiscount.f.gfbVolumeDiscountPrepareUI(bundleDetails);
            gfb.gfbCustomHomePageWrapper.f.insertIntoPageWrapper(bundleUI, parent);
            gfb.gfbVolumeDiscount.f.registerEvents();
            gfb.gfbVolumeDiscount.f.defaultAutomaticSelection();
          }
          if(bundleType == "FREQUENT_BOUGHT"){
            bundleUI = gfb.gfbFrequentBought.f.gfbFrequentBoughtPrepareUIV2(bundleDetails);
            gfb.gfbCustomHomePageWrapper.f.insertIntoPageWrapper(bundleUI, parent);
            gfb.gfbFrequentBought.f.gfbFrequentBoughtCheckContainerOverflow();
            gfb.gfbFrequentBought.f.registerEvents();
          }
          

        }

      }catch(err){
        gfb.utility.debugConsole("error in gfbCustomHomePageWrapper initialize -> ", err);
      }
    },
    state: {
      bundleId: null
    },
    f: {
      findBundleDetailsFromId: function(bundleId){
        try{
          let volOffers = gfb.settings.volumeDiscountData;
          let matchingOffer = volOffers.find((offer) => offer.offerId == bundleId);
          if (!matchingOffer) {
            let fbtOffers = gfb.settings.frequentBoughtData;
            matchingOffer = fbtOffers.find((offer) => offer.offerId == bundleId);
          }

          return matchingOffer;

        }catch(err){
          gfb.utility.debugConsole("error in findBundleDetailsFromId => ", err);
        }
      },
      getProductPageHandleForBundle: function(bundleDetails){
        try{

          let productHandle = bundleDetails.selectedProducts[0].handle;
          let widgetDisplayOptions = bundleDetails.widgetDisplayOptions;
          
          let isShowOnComponentPages = widgetDisplayOptions.componentProductPages
          let isSpeicificProductPages = widgetDisplayOptions.specificProductPages;

          if(isShowOnComponentPages){
            let productData = bundleDetails.selectedProducts[0];
            gfb.state.productPageHandle = productHandle;
            gfb.state.currentProductData = productData;
            gfb.state.productId = parseInt(productData.productId);

            return productHandle;
          }
          
          if(isSpeicificProductPages){
            productHandle = widgetDisplayOptions.specificProducts[0].handle;
            let productData = widgetDisplayOptions.specificProducts[0];

            gfb.state.productPageHandle = productHandle;
            gfb.state.currentProductData = productData;
            gfb.state.productId = productData.id
          }

          return productHandle

        }catch(err){
          gfb.utility.debugConsole("error in getProductPageHandleForBundle => ", err);
        }
      },
      insertIntoPageWrapper: function (gfbMsgHtml, parent){
        try {
          
          if(parent === "HOME"){
            let homePageWrappers = document.querySelectorAll(".gfbHomePageBundleWrapper");
            let gfbHomePageBundleClone = gfbMsgHtml.cloneNode(true);

            homePageWrappers.forEach((wrapper) => {
              wrapper.appendChild(gfbHomePageBundleClone);
            });

          }

        } catch (err) {
          gfb.utility.debugConsole("error in insertIntoPageWrapper ", err);
        }
      },
      getBundleType: function (bundleId) {
        try{
          // get first 3 letters of bundleId
          let bundleType = bundleId.substring(0, 3);
          if(bundleType == "VOL"){
            return "VOLUME_DISCOUNT";
          }

          return "FREQUENT_BOUGHT";

        }catch(err){
          gfb.utility.debugConsole("error in getBundleType => ", err);
        }
      },
      removeUnantedBundles: function(bundleId){
        try{
          let volOffers = gfb.settings.volumeDiscountData;
          let frequentBoughtOffers = gfb.settings.frequentBoughtData;

          let matchingOffer = volOffers.find((offer) => offer.offerId == bundleId);
          if(matchingOffer){
            let settings = gfb.settings;
            settings.volumeDiscountData = [matchingOffer];
            settings.frequentBoughtData = [];

            return settings;
          }else{
          
            matchingOffer = frequentBoughtOffers.find((offer) => offer.offerId == bundleId);
            if(matchingOffer){
              let settings = gfb.settings;
              settings.volumeDiscountData = [];
              settings.frequentBoughtData = [matchingOffer];

              return settings;
            }else{
              // exit code
            }
          }

        }catch(err){
          gfb.utility.debugConsole("error in removeUnantedBundles => ", err);
        }
      },
    }
  },
  gfbBundleUpsellHorizontalWidget: {
    state: {
      currentCarouselPointer: 0,
      currentCarouselSize: 2,
    },
    f: {
      prepareUI: {
        render: function(gfbFrequentBoughtWidgetContainer, currentOffer){
          try{

            // set state for all currentSelectedVariants for all the products to false;
            let offerSelectedVariants = gfb.gfbFrequentBought.state.currentSelectedVariants[currentOffer.offerId];
            // iterate over this object
            // for (const key in offerSelectedVariants) {
            //   if (Object.hasOwnProperty.call(offerSelectedVariants, key)) {
            //     offerSelectedVariants[key].isSelected = true;
            //   }
            // }

            let gfbFrequentBoughtWidgetTitle = gfb.gfbFrequentBought.f.gfbFrequentBoughtPrepareTitle(currentOffer);

            gfbFrequentBoughtWidgetContainer.appendChild(gfbFrequentBoughtWidgetTitle);

            const gfbFrequentBoughtReplacableContent = document.createElement("div");
            gfbFrequentBoughtReplacableContent.classList.add("gfbFrequentBoughtReplacableContent");

            const gfbFrequentBoughtWidgetContent = gfb.gfbBundleUpsellHorizontalWidget.f.prepareContent.render(currentOffer);
            
            const buttonContainer = gfb.gfbBundleUpsellHorizontalWidget.f.prepareCarouselButtons.render(currentOffer);
            gfbFrequentBoughtReplacableContent.appendChild(buttonContainer);
            
            gfbFrequentBoughtReplacableContent.appendChild(gfbFrequentBoughtWidgetContent);
            
            gfbFrequentBoughtWidgetContainer.appendChild(gfbFrequentBoughtReplacableContent);
            return gfbFrequentBoughtWidgetContainer;

          }catch(err){
            gfb.utility.debugConsole("error in prepareUI render => ", err);
          }
        },
        refresh: function(currentOffer){
          try{
            
            let gfbFrequentBoughtWidgetContainerSelected = document.querySelector(`.gfbFrequentBoughtWidgetContainer[data-offer-id="${currentOffer.offerId}"]`);

            let gfbFrequentBoughtWidgetContainer = document.createElement("div");
            gfbFrequentBoughtWidgetContainer.classList.add("gfbFrequentBoughtWidgetContainer");
            gfbFrequentBoughtWidgetContainer.setAttribute("data-offer-id", currentOffer.offerId);
            let gfbFrequentBoughtWidgetContainerNew = gfb.gfbBundleUpsellHorizontalWidget.f.prepareUI.render(gfbFrequentBoughtWidgetContainer, currentOffer);
            
            gfbFrequentBoughtWidgetContainerSelected.replaceWith(gfbFrequentBoughtWidgetContainerNew);
            gfb.gfbFrequentBought.f.registerEvents();

          }catch(err){
            gfb.utility.debugConsole("error in prepareUI refresh => ", err);
          }
        }
      },
      prepareContent: {
        render: function(currentOffer){
          try{
            let offerId = currentOffer.offerId;
            let currentSelectedVariantsForOffer = gfb.gfbFrequentBought.state.currentSelectedVariants[currentOffer.offerId];
            let currentSelectedVariantsByOptions = gfb.gfbFrequentBought.state.currentSelectedOptions[currentOffer.offerId];
            let selectedProducts = currentOffer.selectedProducts;
            
            let parentProduct = window.shopifyLiquidValuesApp9Ext.product;
            // pop the product with id as parentProduct.productId from selectedProducts
            // selectedProducts = selectedProducts.filter((product) => product.id != parentProduct.productId);

            let countOfSelectedProducts = selectedProducts.length;
            let isParentProduct = currentOffer.widgetDisplayOptions?.parentProduct || false;
            let isQuantitySelectionBoxAllowed = currentOffer.advancedConfiguration?.quantitySelectorEnabled || false;
            let isProductDescirptionEnabled = currentOffer.advancedConfiguration?.addCustomProductDescription || false;
            const gfbFrequentBoughtWidgetContentContainer = document.createElement("div");


            // this is to be a carousel;
            gfbFrequentBoughtWidgetContentContainer.classList.add("gfbFrequentBoughtWidgetContentContainer");
            gfbFrequentBoughtWidgetContentContainer.setAttribute("gfbFrequentBoughtWidgetContentContainer-id", currentOffer.offerId);
        
            // tiles of carousel are products
            for (let i = 0; i < selectedProducts.length ; i++) {
              let product = selectedProducts[i];
              let gfbFrequentBoughtWidgetProductContainer = document.createElement("div");
              gfbFrequentBoughtWidgetProductContainer.classList.add("gfbFrequentBoughtWidgetProductContainer");

              let gfbFrequentBoughtIsSelectedVariantOutOfStock = gfb.gfbFrequentBought.f.gfbFrequentBoughtIsSelectedVariantOutOfStock(
                product.variants
              );
              if (product.available == false || gfbFrequentBoughtIsSelectedVariantOutOfStock) {
                gfbFrequentBoughtWidgetProductContainer.classList.add("gfbFrequentBoughtWidgetProductContainerDisabled");
                gfbFrequentBoughtWidgetProductContainer.classList.add("gfbFrequentBoughtWidgetProductContainerOutOfStock");
                gfb.gfbFrequentBought.state.isAnyProductOutOfStock = true;
              }
              gfbFrequentBoughtWidgetProductContainer.setAttribute("data-product-handle", product.handle);

              // image and details container;
              let gfbFrequentBoughtWidgetProductImageTitleContainer = document.createElement("div");
              gfbFrequentBoughtWidgetProductImageTitleContainer.classList.add("gfbFrequentBoughtWidgetProductImageTitleContainer");

              let gfbFrequentBoughtWidgetProductImageContainer = document.createElement("div");
              gfbFrequentBoughtWidgetProductImageContainer.classList.add("gfbFrequentBoughtWidgetProductImageContainer");

              let gfbFrequentBoughtWidgetProductImage = document.createElement("img");
              gfbFrequentBoughtWidgetProductImage.classList.add("gfbFrequentBoughtWidgetProductImage");
              let imageSource = currentSelectedVariantsForOffer[product.handle]?.image || product?.variants[0]?.image || product?.featured_image;
              gfbFrequentBoughtWidgetProductImage.setAttribute("src", imageSource);
              gfbFrequentBoughtWidgetProductImageContainer.appendChild(gfbFrequentBoughtWidgetProductImage);

              // title + price + description
              let gfbFrequentBoughtWidgetProductDetails = document.createElement("div");
              gfbFrequentBoughtWidgetProductDetails.classList.add("gfbFrequentBoughtWidgetProductDetails");

              // title
              let gfbFrequentBoughtWidgetProductTitle = document.createElement("div");
              gfbFrequentBoughtWidgetProductTitle.classList.add("gfbFrequentBoughtWidgetProductTitle");
              let productQty = gfb.gfbFrequentBought.state.currentSelectedVariants[offerId][product.handle]?.quantity || product.quantity || 1;
              productQty = parseInt(productQty) || 1;
              let titleText = product.title;
              let qtyText = '';
              if(productQty > 1){
                qtyText = ` x${productQty}`;
              }
              
              let hyperLinkedTitle = titleText;
              if(currentOffer.advancedConfiguration?.enableLinkingToProductPage){
                hyperLinkedTitle = `<a href="/products/${product.handle}" target="_blank">${product.title}</a>`;
              }
              gfbFrequentBoughtWidgetProductTitle.innerHTML = hyperLinkedTitle + qtyText;

              // price
              let gfbFrequentBoughtWidgetProductPriceContainer = gfb.gfbFrequentBought.f.gfbFrequentBoughtPrepareContentPriceContainer(currentOffer, product , gfbFrequentBoughtWidgetProductContainer);

              // desc
              const gfbFrequentBoughtWidgetProductDescription = document.createElement("div");
              gfbFrequentBoughtWidgetProductDescription.classList.add("gfbFrequentBoughtWidgetProductDescription");
              gfbFrequentBoughtWidgetProductDescription.innerHTML = product.customDescription || "";
              
              if(isProductDescirptionEnabled){
                gfbFrequentBoughtWidgetProductDescription.style.display = "grid";
              }
              if(!product.customDescription || product.customDescription == ""){
                gfbFrequentBoughtWidgetProductDescription.style.display = "none";
  
              }


              let gfbFrequentBoughtWidgetProductContentDetails = document.createElement("div");
              gfbFrequentBoughtWidgetProductContentDetails.classList.add("gfbFrequentBoughtWidgetProductContentDetails");

              gfbFrequentBoughtWidgetProductContainer.appendChild(gfbFrequentBoughtWidgetProductImageContainer);

              gfbFrequentBoughtWidgetProductContainer.appendChild(gfbFrequentBoughtWidgetProductTitle);
              gfbFrequentBoughtWidgetProductContainer.appendChild(gfbFrequentBoughtWidgetProductPriceContainer);
              gfbFrequentBoughtWidgetProductContainer.appendChild(gfbFrequentBoughtWidgetProductDetails);

              // gfbFrequentBoughtWidgetProductContainer.appendChild(gfbFrequentBoughtWidgetProductImageTitleContainer);
              gfbFrequentBoughtWidgetProductContainer.appendChild(gfbFrequentBoughtWidgetProductDescription);

              // custom field
              let customField = gfb.gfbFrequentBought.state.currentSelectedVariants[offerId][product.handle]?.customField || "";

              let gfbFrequentBoughtCustomFieldBoxTitle = document.createElement("div");
              gfbFrequentBoughtCustomFieldBoxTitle.classList.add("gfbFrequentBoughtCustomFieldBoxTitle");
              let personalizationText = product?.customFieldOptions?.personalizationText || "Personalization Text";
              gfbFrequentBoughtCustomFieldBoxTitle.innerHTML = personalizationText + (product?.customFieldOptions?.isMandatory ? "*" : "");

              let gfbFrequentBoughtCustomFieldBox = document.createElement("input");
              gfbFrequentBoughtCustomFieldBox.classList.add("gfbFrequentBoughtCustomFieldBox");
              // add data attribute of offerId and product.handle to gfbFrequentBoughtCustomFieldBox
              gfbFrequentBoughtCustomFieldBox.setAttribute("data-offer-id", offerId);
              gfbFrequentBoughtCustomFieldBox.setAttribute("data-product-handle", product.handle);
              if(product?.customFieldOptions?.isMandatory || false){
                gfbFrequentBoughtCustomFieldBox.setAttribute("required", "");
              }

              gfbFrequentBoughtCustomFieldBox.innerHTML = customField;

              let customFieldWrapper = document.createElement("div");
              customFieldWrapper.classList.add("customFieldWrapper");

              customFieldWrapper.appendChild(gfbFrequentBoughtCustomFieldBoxTitle);
              customFieldWrapper.appendChild(gfbFrequentBoughtCustomFieldBox);

              //Variant Selector
              const gfbFrequentBoughtWidgetProductVariantSelectorBtn = document.createElement("div");
              gfbFrequentBoughtWidgetProductVariantSelectorBtn.classList.add("gfbFrequentBoughtWidgetProductVariantSelectorBtn");
              gfbFrequentBoughtWidgetProductVariantSelectorBtn.setAttribute("data-product-handle", product.handle);
              gfbFrequentBoughtWidgetProductVariantSelectorBtn.setAttribute("data-offer-id", offerId);
              gfbFrequentBoughtWidgetProductVariantSelectorBtn.innerText = currentSelectedVariantsByOptions[product.handle].values.join("/");
              const gfbDropdownIconWrapper = document.createElement("div");
              gfbDropdownIconWrapper.classList.add("gfbDropdownIconWrapper");
              gfbDropdownIconWrapper.innerHTML = DOWN_ARROW_ICON_APP9;
              gfbFrequentBoughtWidgetProductVariantSelectorBtn.appendChild(gfbDropdownIconWrapper);

                   
              if(!product?.customFieldOptions?.isAllowed){
                gfbFrequentBoughtWidgetProductContainer.appendChild(customFieldWrapper);
                customFieldWrapper.innerHTML = "";
              }
              // gfbFrequentBoughtWidgetProductContentDetails.appendChild(customFieldWrapper);
              if(product?.variants?.length == 1){
                const currVariants = currentSelectedVariantsByOptions[product.handle].values.join("/");
                gfbFrequentBoughtWidgetProductVariantSelectorBtn.innerHTML = "";
                gfbFrequentBoughtWidgetProductVariantSelectorBtn.style.border = "none";
                gfbFrequentBoughtWidgetProductVariantSelectorBtn.style.pointerEvents = "none";
                gfbFrequentBoughtWidgetProductVariantSelectorBtn.style.display = "block";
                gfbFrequentBoughtWidgetProductVariantSelectorBtn.innerHTML = currVariants.includes("Default title") ? "" : currVariants;
              }
              
              gfbFrequentBoughtWidgetProductContainer.appendChild(gfbFrequentBoughtWidgetProductVariantSelectorBtn);
              let isSelected = gfb.gfbFrequentBought.state.currentSelectedVariants[offerId][product.handle].isSelected;
              
              //bundles's product select checkbox
              let gfbBundlesProductSelectCheckbox = document.createElement("input");
              gfbBundlesProductSelectCheckbox.classList.add("gfbBundlesProductSelectCheckbox");
              gfbBundlesProductSelectCheckbox.setAttribute("type", "checkbox");
              gfbBundlesProductSelectCheckbox.setAttribute("data-product-handle", product.handle);
              gfbBundlesProductSelectCheckbox.setAttribute("data-offer-id", offerId);
              
              gfbBundlesProductSelectCheckbox.checked = isSelected ? true : false;

              if(!product?.isMandatory){
                gfbFrequentBoughtWidgetProductContainer.appendChild(gfbBundlesProductSelectCheckbox);
              }
              
              // gfbFrequentBoughtWidgetProductContainer.appendChild(gfbFrequentBoughtWidgetProductContentDetails);
              gfbFrequentBoughtWidgetContentContainer.appendChild(gfbFrequentBoughtWidgetProductContainer);
              
              let gfbHorizontalPlusImageBarContainer = document.createElement("div");
              gfbHorizontalPlusImageBarContainer.classList.add("gfbHorizontalPlusImageBarContainer");
              let gfbHorizontalPlusImageBar = document.createElement("div");
              gfbHorizontalPlusImageBar.classList.add("gfbHorizontalPlusImageBar");
              // gfbHorizontalPlusImageBar.src = `https://d2h7u1ujy865aj.cloudfront.net/public/plusImageIcon.svg`
              // https://echo-fixed-bundle-app9.s3.us-east-2.amazonaws.com/public/plusImageIcon.svg
              gfbHorizontalPlusImageBar.innerHTML = PLUS_SVG_ICON_APP9;
              gfbHorizontalPlusImageBarContainer.appendChild(gfbHorizontalPlusImageBar);

  
              // appendChild tile in container
              gfbFrequentBoughtWidgetContentContainer.appendChild(gfbFrequentBoughtWidgetProductContainer);
              if((i != (selectedProducts.length - 1))){
                // gfbFrequentBoughtWidgetContentContainer.appendChild(gfbHorizontalPlusImageBarContainer);
              }
            }
            

            let newTempOffer = JSON.parse(JSON.stringify(currentOffer));
            newTempOffer.widgetDisplayOptions.parentProduct = true;
            
            gfb.gfbFrequentBought.f.gfbFrequentBoughtAddOfferSpecificCss(newTempOffer);
            
            return gfbFrequentBoughtWidgetContentContainer;

          }catch(err){
            gfb.utility.debugConsole("error in prepareContent render => ", err);
          }
        },
        refresh: function(currentOffer){
          try{
            let content = gfb.gfbBundleUpsellHorizontalWidget.f.prepareContent.render(currentOffer);
            let offerId = currentOffer.offerId;

            let selectedOfferContainer = document.querySelector(`.gfbFrequentBoughtWidgetContentContainer[gfbfrequentboughtwidgetcontentcontainer-id=${offerId}]`);
            selectedOfferContainer.innerHTML = content.innerHTML;
            gfb.gfbFrequentBought.f.registerEvents();

          }catch(err){
            gfb.utility.debugConsole("error in prepareContent refresh => ", err);
          }
        },
        maxHeightOfNodes: function(currentOffer){
          let parsedOffer = JSON.parse(JSON.stringify(currentOffer));
          let newELe = gfb.gfbFrequentBought.f.gfbFrequentBoughtPrepareContent(currentOffer);
          newELe.style.visibility = 'hidden';
          newELe.classList.add("gfbNewEleToBeRemoved")
          document.body.appendChild(newELe);
          let allVariants = document.querySelectorAll('.gfbFrequentBoughtVariantUIParentContainer');
          
          function getMaxHeight(nodeList) {
            let maxHeight = 0;
            nodeList.forEach(node => {
              const height = node.offsetHeight; // Get the height of the node
                maxHeight = Math.max(maxHeight, height); // Update maxHeight if current height is greater
            });

            return maxHeight;
          }

          const maxHeight = getMaxHeight(allVariants);

          let toBeRemoved = document.querySelector(".gfbNewEleToBeRemoved");
          document.body.removeChild(toBeRemoved);
          
          return maxHeight;
        }
      },
      prepareCarouselButtons: {
        render: function(currentOffer){
          try{

            let currentCarouselPointer = gfb.gfbBundleUpsellHorizontalWidget.state.currentCarouselPointer;

            let offerId = currentOffer.offerId;

            let buttonContainer = document.createElement("div");
            buttonContainer.classList.add("gfbFrequentBoughtWidgetButtonContainer");

            let prevButton = document.createElement("div");
            prevButton.classList.add("gfbFrequentBoughtWidgetPrevButton");
            prevButton.setAttribute("data-offer-id", offerId);
            let prevButtonElement = document.createElement("div");
            prevButtonElement.classList.add("gfbFrequentBoughtWidgetPrevButtonElement")
            // prevButtonElement.src = "https://echo-fixed-bundle-app9.s3.us-east-2.amazonaws.com/public/prevCursor.svg";
            prevButtonElement.innerHTML = SLIDER_ARROW_SVG_APP9;
            prevButtonElement.setAttribute("data-offer-id", offerId);
            prevButton.append(prevButtonElement)

            let nextButton = document.createElement("div");
            nextButton.classList.add("gfbFrequentBoughtWidgetNextButton");
            nextButton.setAttribute("data-offer-id", offerId);
            let nextButtonElement = document.createElement("div");
            nextButtonElement.classList.add("gfbFrequentBoughtWidgetNextButtonElement")
            nextButtonElement.setAttribute("data-offer-id", offerId);
            // nextButtonElement.src = "https://echo-fixed-bundle-app9.s3.us-east-2.amazonaws.com/public/nextCursor.svg";
            nextButtonElement.innerHTML = SLIDER_ARROW_SVG_APP9;
            nextButton.append(nextButtonElement);

            buttonContainer.appendChild(prevButton);
            buttonContainer.appendChild(nextButton);

            return buttonContainer;

          }catch(err){
            gfb.utility.debugConsole("error in prepareCarouselButtons render => ", err);
          }
        },
        refresh: function(){}
      },
      prepareAddToCartButton: {
        render: function(currentOffer){
          try{
            let offerData = currentOffer;
            let offerId = currentOffer.offerId;
            let gfbFrequentBoughtWidgetHorizontalUpsellAddToCart = document.createElement("div");
            gfbFrequentBoughtWidgetHorizontalUpsellAddToCart.classList.add("gfbFrequentBoughtWidgetHorizontalUpsellAddToCart");
            
            let isAnyProductOutOfStock = gfb.gfbFrequentBought.state.isAnyProductOutOfStock;
            let isParentProductAvailable = shopifyLiquidValuesApp9Ext.selected_or_first_available_variant.available;


            gfbFrequentBoughtWidgetHorizontalUpsellAddToCart.setAttribute("data-offer-id", offerId);

            const selectedProductsCount = Object.values(gfb.gfbFrequentBought.state.currentSelectedVariants[offerId]).filter(p => p.isSelected).length;
            let addToCartBtnText = offerData?.configuration?.cartBtnName_FBT || "Add to Cart";
            addToCartBtnText = addToCartBtnText.replace("{{SELECTED_PRODUCT}}", selectedProductsCount);

            const addToCartBtnBGColor = offerData?.configuration?.cartBtnBgColor || "#000000";
            const addToCartBtnTextColor = offerData?.configuration?.cartBtnTextColor || "#FFF";
            
            // Set background color and text color styles for the add to cart button
            gfbFrequentBoughtWidgetHorizontalUpsellAddToCart.style.backgroundColor = addToCartBtnBGColor;
            gfbFrequentBoughtWidgetHorizontalUpsellAddToCart.style.color = addToCartBtnTextColor;
            gfbFrequentBoughtWidgetHorizontalUpsellAddToCart.innerHTML = addToCartBtnText;

            if(!isParentProductAvailable){
              gfbFrequentBoughtWidgetHorizontalUpsellAddToCart.classList.add("gfbFrequentBoughtWidgetHorizontalUpsellAddToCartDisabled");
              gfbFrequentBoughtWidgetHorizontalUpsellAddToCart.style.backgroundColor = "#d4d2e2";
            }

            return gfbFrequentBoughtWidgetHorizontalUpsellAddToCart;

          }catch(err){
            gfb.utility.debugConsole("error in prepareAddToCartButton render => ", err);
          }
        },
        refresh: function(currentOffer){

        }
      },
      modifyItemsArrayForParentProduct: function(itemsArray, offerId, randomKey){
        try{
          let parentProduct = {
            id: shopifyLiquidValuesApp9Ext.selected_or_first_available_variant.id,
            quantity: 1,
            properties: {
              "_flyBundles:OfferId": `${offerId}_${randomKey}`,
              "_flyBundles:prodQty": parseInt(1),
              "_flyBUndles:horizontalUpsell": true,
              "_flyBundles:customField": customField,
            }
          }
          itemsArray.push(parentProduct);
          return itemsArray;

        }catch(err){
          gfb.utility.debugConsole("error in modifyItemsArrayForParentProduct => ", err);
        }
      }
    }
  }
};

window.gfb = gfb;

let gfbCodeActive = false;
document.addEventListener("DOMContentLoaded", function (event) {
  //do work
  // check if its bundle builder product execute the rest of the flow
  console.log("GFB Fly Bundles");
  if (gfbCodeActive == false) {
    gfbCodeActive = true;
    gfbUtils.f.loadJquery(function (jqueryRefObj) {
      gfb.$ = jqueryRefObj;
      gfb.f.initialize(gfb.$);
    });
  }
});

setTimeout(function () {
  try {
    if (gfbCodeActive == false) {
      gfbCodeActive = true;
      gfbUtils.f.loadJquery(function (jqueryRefObj) {
        gfb.$ = jqueryRefObj;
        gfb.f.initialize(gfb.$);
      });
    }
  } catch (err) {
    console.log("err before gfb inititalize", err);
  }
}, 3000);
